<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo-admin本地部署</title>
    <url>/2022/09/Hexo-admin%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h2 id="hexo-admin本地部署"><a href="#hexo-admin本地部署" class="headerlink" title="hexo-admin本地部署"></a>hexo-admin本地部署</h2><p>使用以下命令即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-admin --save</span><br></pre></td></tr></table></figure>

<p><code>hexo s</code>后浏览<code>localhost:4000/admin/</code>，settings设置登录账户和密码，根据提示在_config.yml中配置，如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># hexo-admin authentification</span><br><span class="line">admin:</span><br><span class="line">  username: qzwjer</span><br><span class="line">  password_hash: xxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">  secret: xxxxxxxxxx</span><br><span class="line">  deployCommand: &#x27;./script/hexo-d.sh&#x27;</span><br></pre></td></tr></table></figure>

<p>Deploy需要在_config.yml文件中配置deployCommand，如上最后一行，新建<code>script/hexo-d.sh</code>，内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<p>Windows10如上配置后，发布仍旧报错，需要更改<code>node_modules/hexo-admin/depoly.js</code>文件的相关函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params">command, message, done</span>) &#123;</span><br><span class="line">  done = <span class="title function_">once</span>(done);</span><br><span class="line">  <span class="comment">//var proc = spawn(command, [message], &#123;detached: true&#125;);  //将此行替换为下方</span></span><br><span class="line">  <span class="keyword">var</span> proc = <span class="title function_">spawn</span>((process.<span class="property">platform</span> == <span class="string">&quot;win32&quot;</span>?<span class="string">&quot;hexo.cmd&quot;</span>:<span class="string">&quot;hexo&quot;</span>), [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;-g&#x27;</span>]);</span><br><span class="line">  <span class="keyword">var</span> stdout = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> stderr = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  proc.<span class="property">stdout</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>)&#123;stdout += data.<span class="title function_">toString</span>()&#125;)</span><br><span class="line">  proc.<span class="property">stderr</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>)&#123;stderr += data.<span class="title function_">toString</span>()&#125;)</span><br><span class="line">  proc.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="title function_">done</span>(err, &#123;<span class="attr">stdout</span>: stdout, <span class="attr">stderr</span>: stderr&#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  proc.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">done</span>(<span class="literal">null</span>, &#123;<span class="attr">stdout</span>: stdout, <span class="attr">stderr</span>: stderr&#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上后即可发布文章也。</p>
<p>新建文章编辑时，右方Publish按钮边的设置按钮，选中有文章的头部信息，开始只有<code>Data,Author,Tags,Catagories</code>，如需添加其它，在_config.yml中配置，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">metadata:</span><br><span class="line">  top_img:       #文章顶部图片</span><br><span class="line">  cover:         #文章封面</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>杂文集合</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>CDN内容分发网络</title>
    <url>/2022/10/CDN%E5%86%85%E5%AE%B9%E5%88%86%E5%8F%91%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<p>Content Delivery Network</p>
<p>参考：</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/52362950">https://zhuanlan.zhihu.com/p/52362950</a></li>
<li><a href="https://help.aliyun.com/document_detail/27101.html">https://help.aliyun.com/document_detail/27101.html</a></li>
</ul>
<p>核心思想：将内容缓存在终端用户附近</p>
<p>CDN边缘节点（缓存服务器），布放在用户访问相对集中的地区或网络中。当用户访问网站时，利用全局负载技术，将用户的访问指向距离最近的缓存服务器上，由缓存服务器响应用户请求。</p>
<p>CDN缓存静态内容</p>
<ul>
<li>以存储换时延</li>
<li>以存储换带宽，减轻上层骨干网络的流量压力</li>
</ul>
<h3 id="全局负载技术"><a href="#全局负载技术" class="headerlink" title="全局负载技术"></a>全局负载技术</h3>]]></content>
      <categories>
        <category>杂文集合</category>
      </categories>
      <tags>
        <tag>CDN</tag>
      </tags>
  </entry>
  <entry>
    <title>C宏可变参数扩展</title>
    <url>/2022/10/C%E5%AE%8F%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>写代码时，遇到需要定义一个字符串数组和一个函数指针数组，字符串数组的值和函数指针名称一一对应。按照一般初始化方式，需要重复输入很多内容，并且因为字符串数组和函数指针数组可能会有增减，因此一般方式就很繁琐，想着用宏定义是否可解决。</p>
<p>问题示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span> <span class="params">(*FUNC)</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func_a</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func_b</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func_c</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需要定义字符串数组</span></span><br><span class="line"><span class="type">char</span>* strList[<span class="number">3</span>] = &#123;<span class="string">&quot;my_a&quot;</span>,<span class="string">&quot;my_b&quot;</span>,<span class="string">&quot;my_c&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需要定义函数指针数组</span></span><br><span class="line">FUNC funcList[<span class="number">3</span>] = &#123;func_a, func_b, func_c&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一般按照以上方式定义，但如果数量很多，并且可能编码过程中有增减，就会显得繁琐</span></span><br><span class="line"><span class="comment">//想要通过宏定义方式定义两个数组</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MCRO_INIT(...)  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> init(...)   MCRO_INIT(__VA_ARGS__) <span class="comment">//使用宏定义</span></span></span><br><span class="line"></span><br><span class="line">init(a,b,c);</span><br></pre></td></tr></table></figure>

<h2 id="宏参数数量"><a href="#宏参数数量" class="headerlink" title="宏参数数量"></a>宏参数数量</h2><p>定义数组需要设置数组的长度，可以设置一个较大值，保证之后即便添加元素，也不会超出长度。但这显然不太优雅，对于空间有点浪费，作为嵌入式程序员，是不能容忍这种浪费行为的。因此在使用宏时，能确定传入的参数数量是最好的。</p>
<p>以下宏正可以解决此问题：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ARG_T(t)  t  <span class="comment">//解决VC编译错误</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ARG_N(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,N,...)  N  <span class="comment">//限制了可变参数计算的范围［1，32］</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ARG_N_HELPER(...)  ARG_T(ARG_N(__VA_ARGS__))   <span class="comment">//辅助宏</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COUNT_ARG(...)  ARG_N_HELPER(__VA_ARGS__,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0)  <span class="comment">//返回可变参数个数</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>需要注意的是，该宏计算参数的数量是有上限的，如果预期参数数量超出，需要在宏中继续添加。虽然不是一劳永逸，但是目前最好的方法了。</p>
<h2 id="参数扩展"><a href="#参数扩展" class="headerlink" title="参数扩展"></a>参数扩展</h2><p>如果仅仅只是传递参数数列，没有必要对参数进行扩展，如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LOG(fmt,...) printf(fmt <span class="string">&quot;\n&quot;</span>,__VA_ARGS__)</span></span><br></pre></td></tr></table></figure>
<p>以上<code>__VA_ARGS__</code>替换<code>...</code>中的参数传递给<code>printf</code>，不需要扩展。</p>
<p>但对我的问题来说就不够了，需要为传入的参数添加前缀。另外，传入参数不能是字符串，因为函数名称不是字符，宏办不到把字符串的引号去掉，因此传入的参数只能是<code>a,b,c</code>，而不是<code>&quot;a&quot;,&quot;b&quot;,&quot;c&quot;</code>。将参数转为字符串，加<code>#</code>就可以了。</p>
<p>那么如何扩展呢，感谢文章最上方两个链接解答了这个问题。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HMConcat(A, B) _HMConcat(A, B)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _HMConcat(A, B) A##B</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HMMacroArgCheck(...) \</span></span><br><span class="line"><span class="meta">_HMMacroArgCheck(__VA_ARGS__, \</span></span><br><span class="line"><span class="meta">N, N, N, N, N, N, N, N, N, N, \</span></span><br><span class="line"><span class="meta">N, N, N, N, N, N, N, N, N, N, \</span></span><br><span class="line"><span class="meta">N, N, N, N, N, N, N, N, N, N,1)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _HMMacroArgCheck(\</span></span><br><span class="line"><span class="meta">_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, \</span></span><br><span class="line"><span class="meta">_11, _12, _13, _14, _15, _16, _17, _18, _19, _20, \</span></span><br><span class="line"><span class="meta">_21, _22, _23, _24, _25, _26, _27, _28, _29, _30, \</span></span><br><span class="line"><span class="meta">TARGET, ...) TARGET</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HMForeach(MACRO, ...) HMConcat(_HMForeach, HMMacroArgCheck(__VA_ARGS__)) (MACRO, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _HMForeach() HMForeach</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _HMForeach1(MACRO, A) MACRO(A)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _HMForeachN(MACRO, A, ...) MACRO(A)HMDefer(_HMForeach)() (MACRO, __VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HMEmpty()</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HMDefer(ID) ID HMEmpty()</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HMExpand(...)   _HMExpand1(_HMExpand1(_HMExpand1(__VA_ARGS__)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _HMExpand1(...) _HMExpand2(_HMExpand2(_HMExpand2(__VA_ARGS__)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _HMExpand2(...) _HMExpand3(_HMExpand3(_HMExpand3(__VA_ARGS__)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _HMExpand3(...) __VA_ARGS__</span></span><br></pre></td></tr></table></figure>
<p>以上宏实现了参数的扩展，具体使用方式：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字符串列表</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_STR(x) <span class="string">&quot;my_&quot;</span>#x,</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STR_LIST(...) HMExpand(HMForeach(MY_STR,__VA_ARGS__))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数列表</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_FUNC(x) func_##x,</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FUNC_LIST(...) HMExpand(HMForeach(MY_FUNC,__VA_ARGS__))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数声明</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MY_DECLARE(x) void func_##x(void);</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FUNC_DECLARE(...) HMExpand(HMForeach(MY_DECLARE,__VA_ARGS__))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> init(...) \</span></span><br><span class="line"><span class="meta">FUNC_DECLARE(__VA_ARGS__)\</span></span><br><span class="line"><span class="meta">char* strList[COUNT_ARG(__VA_ARGS__)]=&#123;STR_LIST(__VA_ARGS__)&#125;;\</span></span><br><span class="line"><span class="meta">FUNC funcList[COUNT_ARG(__VA_ARGS__)]=&#123;FUNC_LIST(__VA_ARGS__)&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">init(a,b,c);</span><br><span class="line"><span class="comment">//之后想要添加一个字符串`&quot;my_d&quot;`和函数`func_d`到数组，只需要在参数列表添加即可</span></span><br><span class="line">init(a,b,c,d);</span><br></pre></td></tr></table></figure>

<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote>
<ul>
<li><a href="https://www.jianshu.com/p/442f35ba8a6f">https://www.jianshu.com/p/442f35ba8a6f</a></li>
<li><a href="http://feng.zone/2017/05/17/%E5%AE%8F%E5%AE%9A%E4%B9%89%E9%BB%91%E9%AD%94%E6%B3%95-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7-1/">http://feng.zone/2017/05/17/%E5%AE%8F%E5%AE%9A%E4%B9%89%E9%BB%91%E9%AD%94%E6%B3%95-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7-1/</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>疑难杂症</category>
      </categories>
      <tags>
        <tag>宏</tag>
        <tag>CC++</tag>
      </tags>
  </entry>
  <entry>
    <title>Git本地文件上传</title>
    <url>/2022/09/Git%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<p><strong>本地项目上传到远程仓库，如github</strong></p>
<ol>
<li><p>先在github创建仓库，最好创建空的仓库</p>
</li>
<li><p>在本地项目根目录下<code>git init</code></p>
</li>
<li><p>提交本地项目<code>git add .</code>，<code>git commit -m &quot;xxx&quot;</code></p>
</li>
<li><p>关联远程仓库<code>git remote add origin git@github.com:qzwjer/test.git</code></p>
<p>其中origin为远程仓库在本地的标记，可以设置为其它名字，关联多个仓库时以此来选择提交到哪个仓库</p>
</li>
<li><p>提交到远程仓库<code>git push -u origin master</code></p>
<p>远程仓库非空时，提示<code>error: failed to push some refs to &#39;gitee.com:qzwjer/test.git&#39;</code>，表示远程仓库有本地没有的文件，需要<code>git pull</code></p>
</li>
<li><p><code>git pull</code></p>
<p>若远程仓库还有其它分支，则提示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">From gitee.com:qzwjer/test</span><br><span class="line"> * [new branch]      develop    -&gt; origin/develop</span><br><span class="line"> * [new branch]      master     -&gt; origin/master</span><br><span class="line">There is no tracking information for the current branch.</span><br><span class="line">Please specify which branch you want to merge with.</span><br></pre></td></tr></table></figure>

<p>需要 <code>git pull origin master</code></p>
</li>
<li><p>最后提交<code>git push origin master</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>杂文集合</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt使用Http下载</title>
    <url>/2022/10/Qt%E4%BD%BF%E7%94%A8Http%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<p>使用Qt进行Http download时，需注意一点，安卓下载URL为https时会报错，需要支持SSL。</p>
<p>头文件downfile.h：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DOWNFILE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DOWNFILE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFile&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QtNetwork/QNetworkAccessManager&gt;</span>  <span class="comment">//文件下载</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QNetworkReply&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QSharedPointer&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> pack(1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">UPDATE_HEADER</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint16_t</span> project_id;          <span class="comment">/**&lt; each project has its unique id */</span></span><br><span class="line">    <span class="type">uint8_t</span> root_version;	  <span class="comment">/**&lt;secondary boot update*/</span></span><br><span class="line">    <span class="type">uint8_t</span> stack_version;        <span class="comment">/**&lt;stack update*/</span></span><br><span class="line">    <span class="type">uint32_t</span> app_version;         <span class="comment">/**&lt;app update*/</span></span><br><span class="line">    <span class="type">uint32_t</span> code_size;           <span class="comment">/**&lt; updated code size*/</span></span><br><span class="line">    <span class="type">uint32_t</span> crc32;               <span class="comment">/**&lt;crc32*/</span></span><br><span class="line">&#125; ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">pk_t</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> addr;</span><br><span class="line">    <span class="type">uint16_t</span> pk;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> pack()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">pk_t</span> pt;</span><br><span class="line"><span class="keyword">extern</span> UPDATE_HEADER ota_vs_info;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DownFile</span> : <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> DownFile *<span class="title">getInstance</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">DownFile</span>();</span><br><span class="line">    DownFile&amp; <span class="keyword">operator</span>=(DownFile&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    <span class="built_in">DownFile</span>(DownFile&amp;) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> DownFile *downFile;</span><br><span class="line">    <span class="type">static</span> QMutex m_mutex;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QFile *avatorFile;</span><br><span class="line">    QNetworkReply *avatorReply;</span><br><span class="line">    QNetworkAccessManager *avatorManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> ota_size;</span><br><span class="line">    <span class="type">uint8_t</span> ota_data[<span class="number">40</span>*<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QString fileName;</span><br><span class="line">    QString downUrl = <span class="string">&quot;http://qzwjer.top/doc/&quot;</span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">copyfile</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">httpDownload</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">httpDownloadFinished</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setUrl</span><span class="params">(<span class="type">const</span> QString &amp;)</span></span>;</span><br><span class="line">    <span class="function">QString&amp; <span class="title">getUrl</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setFileName</span><span class="params">(<span class="type">const</span> QString &amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">getfile</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">downComplete</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>downfile.cpp：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;downfile.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDataStream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFileInfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDir&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QUrl&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> execution_character_set(<span class="string">&quot;utf-8&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="type">pk_t</span> pt = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">UPDATE_HEADER ota_vs_info = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> Q_OS_ANDROID</span></span><br><span class="line"><span class="type">static</span> QString path = <span class="string">&quot;file:///storage/emulated/0/BMTest/otafile/&quot;</span>;</span><br><span class="line"><span class="type">static</span> QString fpath = <span class="built_in">QUrl</span>(path).<span class="built_in">toLocalFile</span>();</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="type">static</span> QString fpath = <span class="string">&quot;otafile/&quot;</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DownFile* DownFile::downFile = <span class="literal">nullptr</span>;</span><br><span class="line">QMutex DownFile::m_mutex;</span><br><span class="line"></span><br><span class="line"><span class="function">DownFile *<span class="title">DownFile::getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">nullptr</span> == downFile)&#123;</span><br><span class="line">        m_mutex.<span class="built_in">lock</span>();</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">nullptr</span> == downFile)&#123;</span><br><span class="line">            downFile = <span class="keyword">new</span> DownFile;</span><br><span class="line">        &#125;</span><br><span class="line">        m_mutex.<span class="built_in">unlock</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> downFile;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DownFile::<span class="built_in">DownFile</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;fpath;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DownFile::copyfile</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QFile <span class="title">file</span><span class="params">(fpath + fileName)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(!file.<span class="built_in">open</span>(QIODevice::ReadOnly))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;file open error!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(ota_data, <span class="number">0</span>, <span class="built_in">sizeof</span>(ota_data));</span><br><span class="line">        ota_size = file.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">QDataStream <span class="title">in</span><span class="params">(&amp;file)</span></span>;</span><br><span class="line">        <span class="keyword">while</span>(!in.<span class="built_in">atEnd</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            in.<span class="built_in">readRawData</span>((<span class="type">char</span>*)ota_data, <span class="built_in">sizeof</span>(ota_data));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line">        QString str;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            str += QString::<span class="built_in">asprintf</span>(<span class="string">&quot;%02x &quot;</span>, ota_data[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;ota_head:&quot;</span>&lt;&lt;str;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="comment">//对文件头做判断</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">memcpy</span>(&amp;ota_vs_info, ota_data, <span class="built_in">sizeof</span>(UPDATE_HEADER));</span><br><span class="line">        <span class="function">emit <span class="title">downComplete</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DownFile::httpDownload</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//NOTE : 为什么安卓不行 ==&gt; https-&gt;http</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> Q_OS_ANDROID</span></span><br><span class="line">    QByteArray ba = avatorReply-&gt;<span class="built_in">readAll</span>();</span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;ota_data[ota_size], ba.<span class="built_in">data</span>(), ba.<span class="built_in">length</span>());</span><br><span class="line">    ota_size += ba.<span class="built_in">length</span>();</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line">        <span class="keyword">if</span>(avatorFile)&#123;</span><br><span class="line">            avatorFile-&gt;<span class="built_in">write</span>(avatorReply-&gt;<span class="built_in">readAll</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        <span class="function">QTextStream <span class="title">out</span><span class="params">(avatorFile)</span></span>;</span><br><span class="line">        out&lt;&lt;avatorReply-&gt;<span class="built_in">readAll</span>();</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DownFile::httpDownloadFinished</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//刷新文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> Q_OS_ANDROID</span></span><br><span class="line">    avatorFile-&gt;<span class="built_in">flush</span>();</span><br><span class="line">    avatorFile-&gt;<span class="built_in">close</span>();</span><br><span class="line">    <span class="keyword">delete</span> avatorFile;</span><br><span class="line">    avatorFile=<span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;avatorReply-&gt;<span class="built_in">error</span>();</span><br><span class="line">    <span class="keyword">if</span>(avatorReply-&gt;<span class="built_in">error</span>() != QNetworkReply::NoError)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;download failed&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;download finished&quot;</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> Q_OS_ANDROID</span></span><br><span class="line">        <span class="built_in">copyfile</span>();</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        <span class="built_in">memcpy</span>(&amp;ota_vs_info, ota_data, <span class="built_in">sizeof</span>(UPDATE_HEADER));</span><br><span class="line">        <span class="function">emit <span class="title">downComplete</span><span class="params">()</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> avatorManager;</span><br><span class="line">    avatorManager = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DownFile::setUrl</span><span class="params">(<span class="type">const</span> QString &amp;url)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    downUrl = url;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QString &amp;<span class="title">DownFile::getUrl</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> downUrl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DownFile::setFileName</span><span class="params">(<span class="type">const</span> QString &amp;name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fileName = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DownFile::getfile</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QDir dir;</span><br><span class="line">    <span class="type">bool</span> ota_down_flag = <span class="literal">false</span>;</span><br><span class="line">    ota_size = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> Q_OS_ANDROID</span></span><br><span class="line">    QString ota_file = fpath + fileName;</span><br><span class="line">    <span class="function">QFileInfo <span class="title">fileInfo</span><span class="params">(ota_file)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(fileInfo.<span class="built_in">isFile</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        ota_down_flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;本地文件&quot;</span>;</span><br><span class="line">        <span class="built_in">copyfile</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!dir.<span class="built_in">exists</span>(fpath))</span><br><span class="line">    &#123;</span><br><span class="line">        dir.<span class="built_in">mkpath</span>(fpath);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">if</span>(!ota_down_flag)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> Q_OS_ANDROID</span></span><br><span class="line">        avatorFile = <span class="keyword">new</span> <span class="built_in">QFile</span>(ota_file);</span><br><span class="line">        <span class="keyword">if</span>(!avatorFile-&gt;<span class="built_in">open</span>(QIODevice::WriteOnly)) &#123;</span><br><span class="line">            <span class="keyword">delete</span> avatorFile;</span><br><span class="line">            avatorFile=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;can not write ota file&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="comment">//开始请求 下载文件</span></span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt;downUrl + fileName;</span><br><span class="line">        QUrl  serviceUrl = <span class="built_in">QUrl</span>(downUrl + fileName);</span><br><span class="line">        <span class="comment">//get方式请求 如需加密用post</span></span><br><span class="line">        avatorManager = <span class="keyword">new</span> <span class="built_in">QNetworkAccessManager</span>(<span class="keyword">this</span>);</span><br><span class="line">        avatorReply=avatorManager-&gt;<span class="built_in">get</span>(<span class="built_in">QNetworkRequest</span>(serviceUrl));</span><br><span class="line">        <span class="built_in">connect</span>(avatorReply,<span class="built_in">SIGNAL</span>(<span class="built_in">readyRead</span>()),<span class="keyword">this</span>,<span class="built_in">SLOT</span>(<span class="built_in">httpDownload</span>()));</span><br><span class="line">        <span class="built_in">connect</span>(avatorReply,<span class="built_in">SIGNAL</span>(<span class="built_in">finished</span>()),<span class="keyword">this</span>,<span class="built_in">SLOT</span>(<span class="built_in">httpDownloadFinished</span>()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>杂文集合</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>单例模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux内核移植</title>
    <url>/2022/10/Linux%E5%86%85%E6%A0%B8%E7%A7%BB%E6%A4%8D/</url>
    <content><![CDATA[<p>内核移植思维导图</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/kernel.png" alt="kernel"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/uboot.png" alt="uboot"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/Linux_kernel.png" alt="Linux_kernel"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/rootfs.png" alt="rootfs"></p>
]]></content>
      <categories>
        <category>学习总结</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MXD2660B休眠唤醒</title>
    <url>/2022/10/MXD2660B%E4%BC%91%E7%9C%A0%E5%94%A4%E9%86%92/</url>
    <content><![CDATA[<p>经过一段时间的摸索后，终于大致搞清楚MXD2660B的休眠唤醒流程，做一下总结。</p>
<p>首先还是看手册。</p>
<p>芯片有多种功耗模式：active、idle、sleep、shutdown，我主要关注idle、sleep模式之间的切换。</p>
<p>需要注意的点：</p>
<ol>
<li>蓝牙广播会唤醒MCU，唤醒后会立刻进入休眠。如果有IO中断，在蓝牙唤醒时会触发中断；</li>
<li>IO唤醒，如果唤醒IO的脚配置了中断，MCU唤醒后会进入中断；</li>
</ol>
<p>如果MCU休眠时开启了广播，在广播时会有一定功耗，使用电流表测量会发现电流定期跳增，即是在广播。</p>
<p>从idle到sleep状态转移前，会询问app层是否进入睡眠，即调用save_info_before_sleep_cb函数，返回false允许睡眠。</p>
<p>某些时候，进入睡眠后会被即刻唤醒，这一点还不甚清楚原因，可能与硬件有关。</p>
<p>RTC，LTC，IO唤醒后会执行recover_info_after_wakeup_cb。<br>在执行recover_info_after_wakeup_cb之前，如果触发了IO中断或RTC回调，会先调用回调函数。</p>
]]></content>
      <categories>
        <category>学习总结</category>
      </categories>
      <tags>
        <tag>BLE</tag>
      </tags>
  </entry>
  <entry>
    <title>人生追求</title>
    <url>/2022/10/%E4%BA%BA%E7%94%9F%E8%BF%BD%E6%B1%82/</url>
    <content><![CDATA[<blockquote>
<p>人是复杂的动物，社会是复杂的系统，不要过于从自我角度去理解世道的运行</p>
</blockquote>
<p>以时间维度观察，人从出生到散为一抔黄土，轨迹如空中飞沙、江河流水，时时与四周相互碰撞互相影响，但作用又只限于周身一隅，难以撼动潮流涌动。</p>
<p>在毕业以前，个人有很多目标明确的追求，虽是镜花水月，但都不流于庸俗。视金钱如粪土，不屑于把一切价值与金钱绑定。然而时移世易，方今之世，人们评判一人的价值，着重于金钱多少，以至于若一人不善于赚钱，就少了闪光点。</p>
<p>我迷惘于这个观念久矣，以致时时自省，我是不是一无是处，每天兴致缺缺，忧虑于金钱的得失，悲欢常被粪土所支配，庸碌无趣，形神渐似我所厌之人。</p>
<p>昨夜突然醒悟过来，如果与别人比较财物的多少，那天下比我拥有多的数不胜数，若执着于此，岂不是永远觉低人一等，时时都可以找根绳子自挂东南枝了。迷惑于世道都在比较钞能力，说人人爱钱，实在是误入歧途了。</p>
<p>社会上以金钱评人高低，有钱者身居上流，不过一二十年，不能当作长久，未来如何犹未可知。而人位有高低，人格无贵贱。以人位观我，我实不值一提，以人格自观，足可以昂然。</p>
<p>人位可以追，人格更应求，明白这一事，哪里来忧愁。悟到此一节，往后财货、权位不足以迷我眼矣。</p>
<p>获得物质，随死亡而失去，凝固灵魂，能长久驻留在人间。悟到这一节，则精神超脱，万事不能障我目。余生在世，当笑则笑，当哭则哭，当吟则吟，当舞则舞。不负己，不罪人，不拘一物，逍遥洒脱。</p>
<p>从精神回到现实，事情总是说易行难，以终为始，才有始有终。</p>
<p>一生追求不易得，一年追求却可期。当时时勉励自己，以精勤求学，敦笃励志，果毅力行，忠恕任事为准则，努力完成自己所定之目标，不为自己蒙羞：</p>
<ul>
<li>为谈恋爱的对象每天说一声早晚安</li>
<li>每天至少练习吉他30分钟</li>
<li>每天至少读书30分钟</li>
<li>每天至少锻炼30分钟</li>
<li>每天与朋友们进行交流</li>
</ul>
]]></content>
      <categories>
        <category>生活感想</category>
      </categories>
  </entry>
  <entry>
    <title>关于爱情的认识</title>
    <url>/2022/10/%E7%88%B1%E6%83%85-%E7%81%B5%E9%AD%82/</url>
    <content><![CDATA[<blockquote>
<p>一个很久很久未付出亦未感受过爱情的人，谈谈对于爱情是什么的认识</p>
</blockquote>
<h2 id="在与女孩言语之后"><a href="#在与女孩言语之后" class="headerlink" title="在与女孩言语之后"></a>在与女孩言语之后</h2><p>女孩说我太过于执着，我说这是认真。</p>
<p>或许是我每天都道早晚安，让她产生厌倦了吧，认为这是不带感情无谓的言语，是完成自己心中的坚持，是敷衍的问候。</p>
<p>于我而言是一件有意义的事，它让我快乐，让每天都有可乐的瞬间，但对她来说也许真是这样，像公鸡打鸣，是定好闹钟，是备忘录中的一条记录。这就是不同角色之间的误解吧，互相理解。</p>
<p>我说谈恋爱要双向奔赴，她说只有互相吸引，喜欢，才会开始恋爱，我一想有道理，哪有一见面就恋爱的！</p>
<p>——但现在我想我也没错，毕竟是谈恋爱，不是在恋爱，哈哈。</p>
<p>提起喜欢，我思考了一些。</p>
<p>开始我以为我还没有喜欢的女生，但后来想想不对，我喜欢的可多了，街上的漂亮女孩、电影里的女演员、有性格的女歌手、小说里的女角色，只要让我感觉不错，就会喜欢。</p>
<p>我开始反思，喜欢的是不是太多了？可我与我喜欢的人有任何交流吗？有深刻感情吗？</p>
<p>没有！只是单纯的喜欢，并不一定要有参与。</p>
<p>所以，喜欢，和爱是不一样的。世界上那么多人，有无数优秀的人让人喜欢，可以喜欢长得漂亮，可以喜欢性格开朗，可以喜欢可爱，可以喜欢善良，可以喜欢温柔，可以喜欢活泼，无数的优点都有喜欢的道理，亦可以喜欢这个，更喜欢那个。</p>
<p>可以随心意喜欢，但爱只会爱一个。</p>
<p>爱是什么？每个人的答案不同。</p>
<p>我的爱是你中有我，我中有你，是不分你我，完全信任，是爱你就是爱自己，无可替代，无多余的给第三者，无理由在爱着你的时候，去爱别人。</p>
<p>然而喜欢的那么多，为什么有一个会变成爱呢？</p>
<p>由此想到缘分。</p>
<p>从喜欢到爱的转变，就是往你中有我、我中有你，你我不分发展的过程。</p>
<hr>
<h2 id="写在第一次的胡言乱语"><a href="#写在第一次的胡言乱语" class="headerlink" title="写在第一次的胡言乱语"></a>写在第一次的胡言乱语</h2><p>开始一段感情，如盲人摸象，摸到什么样算什么样，又想要收获爱情，把一切结果听天由命，恋人懵懂，不能自主，烦恼自招。</p>
<p>可你问谁不知道爱情啊，即便是初恋，在经过刻骨铭心之后，也能有一些体会。</p>
<p>可甚至不明白自己，枝叶落尽，掘开泥沙，是什么底色。</p>
<p>从未相遇的两条世界线，在开始爱情的那一刻交汇……</p>
<p>第一面，它们交织，缠绕，打结，像跳双人舞，你进我退，姿态优雅，像双人花样滑冰，分分合合，不论各自还是配合，都奉献精彩，直到最后榫卯相合。</p>
<p>第二面，一条追赶，一条若即若离，像弹球触碰大地，起起落落最终落地，还是蜜蜂寻找花蜜，蜻蜓点水，采摘完后又分离。</p>
<p>第三面，平行向前，偶尔相交但并不纠缠，像双螺旋一样起舞，可以慢慢收束最后扭成一条线，亦可以越旋越远，一直离心，最后分道扬镳。</p>
<p>何种激烈的感情？浪拍礁石，雨打浮萍，才能让人触动，是身不由己，无法挣脱，不可逃避。</p>
<p>其一，青梅竹马从小相识，性格相似，情意相通，互相了解对方，知悉对方缺点与长处，并喜爱与容忍，直至修成正果；</p>
<p>其二，早早相识，同窗共读，志趣相投，互相爱慕，结成好友双向奔赴，小心呵护爱情之花，结成正果。</p>
<p>其三，从不相识，猝然相交，互生好感，结为情侣，于生活中相知，在未完全相知时开花，共同呵护，一起品尝果实而爱愈深，灵魂相融。</p>
]]></content>
      <categories>
        <category>生活感想</category>
      </categories>
  </entry>
  <entry>
    <title>移远EC800MQTT与GNSS应用</title>
    <url>/2022/10/%E7%A7%BB%E8%BF%9CEC800MQTT%E4%B8%8EGNSS%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p>一切以移远应用指导手册为准。</p>
<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><ul>
<li><p>GPRS：General Packet Radio service，<a href="https://baike.baidu.com/item/gprs/107439">通用分组无线业务</a>。</p>
<p>  是一种基于GSM系统的无线分组交换技术，提供端到端的、广域的无线IP连接。相对原来GSM的拨号方式的电路交换数据传送方式，GPRS是分组交换技术，具有“实时在线”“按量计费”“快捷登录”“高速传输”“自如切换”的优点。通俗地讲，GPRS是一项高速数据处理的技术，方法是以“分组”的形式传送资料到用户手上。GPRS是GSM网络向第三代移动通信系统过渡的一项2.5代通信技术，在许多方面都具有显著的优势。</p>
</li>
<li><p>PDN：Public Data Network，<a href="https://baike.baidu.com/item/pdn/4214348">公用数据网</a>。</p>
<p>  为公众提供数据通信服务的通信网。由交换机、网控中心、用户入网设备、通信线路等设施组成。每个入网用户可与网上其他用户通信，公用数据网负责数据在其间作透明的无差错传输。有公用数字数据网、公用分组交换数据网、公用帧中继网、公用ATM（异步传送模式）网等之分。它除了向公众提供一般的数据交换平台服务外，还提供公用电子信箱业务、公众宽带多媒体业务、公用电子数据交换业务、公众互联网业务、公用无线数据通信网及相应的业务等。</p>
</li>
<li><p>PDP：Packet Data Protocol，<a href="https://baike.baidu.com/item/PDP/8646589">分组数据协议</a>。</p>
<p>  是外部PDN网与GPRS接口所用的网络协议。</p>
<p>  PDP附着（PDP-Attach）在PDP激活、PDP更新、PDP去激活之前的操作是PDP附着。</p>
<p>  PDP附着是让终端登录到PS域里，就是登记到SGSN&#x2F;PDSN的数据库，同时在HLR里进行PS域的location update，此时是control-plane还没有流量，相当于拨号成功。</p>
<p>  相对于PDP激活（PDP-activation）就是开始进行数据流通了，也就是开始打开网页上网了，此时有userplane流量了。</p>
<p>  分组数据协议（Packet Data Protocol，PDP）包括PDP地址和PDP上下文两个概念。PDP地址是数据用户的网络层地址，可以有一个或多个，这由该用户所涉及的外部网络来决定。PDP地址与标准的网络层地址（如IPv4地址、IPv6地址和X.121地址）建立了临时或永久性的关联。PDP地址可以有以下3种方式分配给MS。</p>
<ol>
<li>静态PDP地址，HPLMN将一个PDP地址永久性地分配给MS。</li>
<li>动态HPLMN PDP地址，当激活一个PDP上下文时，HPLMN才将一个PDP地址临时分配给MS。</li>
<li>动态VPLMN PDP地址，当激活一个PDP上下文时，VPLMN才将一个PDP地址临时分配给MS。</li>
</ol>
</li>
<li><p>PDP上下文：主要包括以下一些信息：APN、Qos、PDP 类型、PDP 地址等。即是移动场景，英文全称PDP Context，PDP是分组报文协议的简写，Context翻译成上下文。</p>
</li>
<li><p>APN：Access Point Name，<a href="https://baike.baidu.com/item/apn/96667">接入点</a>。</p>
<p>  APN指一种网络接入技术，是通过手机上网时必须配置的一个参数，它决定了手机通过哪种接入方式来访问网络。</p>
</li>
<li><p><a href="https://baike.baidu.com/item/apn%E8%AE%BE%E7%BD%AE/9957880">APN设置</a></p>
<p> 是用户在通过手机上网时必须配置的一个参数，它决定了用户手机通过哪种接入方式来访问移动网络。根据接入点名称，可以确定在分组数据链接中提供什么服务。这些服务可能包括：公众互网的链接；到WAP的连接，以转发互联上的网页;提供短消息，或多媒体业务。</p>
</li>
</ul>
<h2 id="TCP-x2F-IP流程"><a href="#TCP-x2F-IP流程" class="headerlink" title="TCP&#x2F;IP流程"></a>TCP&#x2F;IP流程</h2><ul>
<li><p>通过AT+QICSGP命令配置APN</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AT+QICSGP=1,1,&quot;UNINET&quot;,&quot;&quot;,&quot;&quot;,1   //UENINET联通</span><br><span class="line"></span><br><span class="line">AT+QICSGP=1,1,&quot;CMNET&quot;  //CMNET 移动</span><br><span class="line"></span><br><span class="line">AT+QICSGP=&lt;contextID&gt;[,&lt;context_type&gt;,&lt;APN&gt;[,&lt;username&gt;,&lt;password&gt;)[,&lt;authentication&gt;]]]</span><br><span class="line">//&lt;contextID&gt;场景ID，</span><br><span class="line">//&lt;context_type&gt;协议类型：1-IPv4，2-IPv6，3-IPv4v6，&lt;APN&gt;接入点名称</span><br></pre></td></tr></table></figure>
</li>
<li><p>激活场景</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AT+QIACT=1	//激活场景1</span><br><span class="line"></span><br><span class="line">AT+QIACT? //查询场景状态，IP</span><br></pre></td></tr></table></figure>
</li>
<li><p>TCP连接</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AT+QIOPEN=1,0,&quot;TCP&quot;,&quot;220.180.239.212&quot;,8009,0,2</span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭SOCKET</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AT+QICLOSE=&lt;connectID&gt; //&lt;connectID&gt;socket id</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="MQTT流程"><a href="#MQTT流程" class="headerlink" title="MQTT流程"></a>MQTT流程</h2><ul>
<li><p>配置可选参数</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AT+QMTCFG=?</span><br><span class="line"></span><br><span class="line">//可以选择配置ssl，如果选择ssl，则必须配置证书，</span><br><span class="line">//否则在打开MQTT客户端网络时会报：网络断开导致错误</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开MQTT客户端网络</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AT+QMTOPEN=0,&quot;qzwjer.top&quot;,1883</span><br><span class="line"></span><br><span class="line">//0为MQTT客户端标识符，对某个标志符配置参数，</span><br><span class="line">//之后可使用此标志符进行MQTT通信</span><br><span class="line"></span><br><span class="line">//回复0，0正常</span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭MQTT客户端网络</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AT+QMTCLOSE=0</span><br></pre></td></tr></table></figure>
</li>
<li><p>连接客户端到 MQTT 服务器</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AT+QMTCONN=0,&quot;client0&quot;</span><br><span class="line"></span><br><span class="line">//client0为终端名</span><br></pre></td></tr></table></figure>
</li>
<li><p>客户端断开与 MQTT 服务器的连接</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AT+QMTDISC=0</span><br><span class="line"></span><br><span class="line">//不太清楚 和 关闭MQTT客户端网络 的区别</span><br></pre></td></tr></table></figure>
</li>
<li><p>订阅、退订、发布消息</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AT+QMTSUB=0,1,&quot;topic/example&quot;,2   //订阅主题</span><br><span class="line"></span><br><span class="line">AT+QMTUNS=0,2,&quot;topic/example&quot;  //退订主题</span><br><span class="line"></span><br><span class="line">AT+QMTPUBEX=0,0,0,0,&quot;topic/pub&quot;,30  </span><br><span class="line">//发布消息，发送命令后收到“&gt;”响应，发送数据。 30为数据长度</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="GNSS配置"><a href="#GNSS配置" class="headerlink" title="GNSS配置"></a>GNSS配置</h2><p>GNSS只需要注意配置优先级即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AT+QGPSCFG=&quot;priority&quot;,1</span><br><span class="line">//GNSS优先级1，LTE会中断定位，结束后重新开始</span><br><span class="line">   </span><br><span class="line">AT+QLOCREL=3,3	//GNSS配置</span><br><span class="line">AT+QGPS=1 		//打开GNSS</span><br><span class="line">AT+QGPSLOC=0		//获取定位</span><br><span class="line">AT+QGPSEND		//GNSS休眠</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>项目开发</category>
      </categories>
      <tags>
        <tag>AT</tag>
        <tag>MQTT</tag>
      </tags>
  </entry>
  <entry>
    <title>vim跳转</title>
    <url>/2022/10/vim%E8%B7%B3%E8%BD%AC/</url>
    <content><![CDATA[<p>内容主要来源于以下两个博客：</p>
<ul>
<li><a href="https://blog.csdn.net/qq_42475711/article/details/99646284">vim几种跳转方式</a></li>
<li><a href="https://www.jianshu.com/p/37538ec6d8f7">vim技巧：vim标记（Mark）</a></li>
</ul>
<h3 id="文件内跳转"><a href="#文件内跳转" class="headerlink" title="文件内跳转"></a>文件内跳转</h3><ul>
<li><p>普通模式下左h，右l，上k，下j。（可以使用数字+hlkj，实现跳跃式移动）。</p>
</li>
<li><p>字符间跳转</p>
</li>
<li><p>跳转到当前字符的前面：普通模式下i。</p>
</li>
<li><p>跳转到当前字符的后面：不同模式下a。</p>
</li>
<li><p>字符串间跳转</p>
</li>
<li><p>向右跳：普通模式下跳转到串首w，普通模式下跳转到串尾e。</p>
</li>
<li><p>向左跳：普通模式下跳转到串首b，普通模式下跳转到串尾be（这个似乎没有专门的指令）。</p>
</li>
<li><p>高亮文件内的某字符串所有出现处，并在高亮处跳转：先将光标移动值至目标字符串处按<code>*</code>。</p>
</li>
<li><p>高亮匹配结果中往下跳：n。</p>
</li>
<li><p>高亮匹配结果中往上跳：N。关闭高亮：noh。</p>
</li>
<li><p>行内跳转</p>
</li>
<li><p>跳转到行末：普通模式下键入$光标移至行末，普通模式下键入A光标移至行末且进入插入模式。</p>
</li>
<li><p>跳转到行首：普通模式下键入0（^会忽略行首的空格，跳到第一个非空格字符处，0则跳到第一列）光标移至行首，普通模式下键入I光标移至行首且进入插入模式。</p>
</li>
<li><p>跳转到行内某个字符(比如字符a）：往后跳f + a，往前跳F + a。另外还有t键，往后 - 跳到某字符前面t + a，往前跳到某字符后面T + a。</p>
</li>
<li><p>行间跳转</p>
</li>
<li><p>跳转到文件的首行：普通模式下<code>gg</code>。</p>
</li>
<li><p>跳转到文件的尾行：普通模式下<code>G</code>。</p>
</li>
<li><p>普通模式下跳转到指定行：<code>100gg</code>或者<code>100G</code>。</p>
</li>
<li><p>命令模式下跳转到指定行: <code>:100</code>。</p>
</li>
</ul>
<blockquote>
<p>ps：以上两种形式都能跳转到文件的指定行（第100行）。</p>
</blockquote>
<ul>
<li><p>跳转到文件的50%：<code>50%</code>。</p>
</li>
<li><p>在可视行（可视行指Vim看起来是单独的一行，实际是某一行内容太多而换行显示，可视行不会累加行号。相对的就是实际行，实际行累加行号）间跳转：往上<code>gk</code>，往下<code>gj</code>。</p>
</li>
<li><p>符号间跳转</p>
</li>
<li><p>函数体间的跳转（注：只能跳到函数体开头，即<code>&#123;</code>处）。</p>
</li>
<li><p>跳到上一个函数体：<code>[[</code>。</p>
</li>
<li><p>跳到下一个函数体：<code>]]</code>。</p>
</li>
<li><p>匹配字符<code>&#123;&#125;</code>、<code>[]</code>、<code>()</code>间的跳转：<code>%</code>。</p>
</li>
</ul>
<h3 id="屏幕移动"><a href="#屏幕移动" class="headerlink" title="屏幕移动"></a>屏幕移动</h3><p>翻页</p>
<ul>
<li>保持光标位置不变（不变是相对的，当光标所在行超出光标可活动行范围时，光标保持在最上&#x2F;最下可活动行）移动屏幕：向上翻页ctrl + y，向下翻页ctrl + e。</li>
<li>滚动半屏：向上滚动半屏ctrl + u，向下滚动半屏ctrl + d。</li>
<li>滚动一屏：向上滚动一屏ctrl + b，向下滚动一屏ctrl + f。</li>
</ul>
<h3 id="文件间跳转"><a href="#文件间跳转" class="headerlink" title="文件间跳转"></a>文件间跳转</h3><ul>
<li><p>Buffer缓存文件间跳转</p>
<ul>
<li>跳转到下一个Buffer文件：<code>:bn</code>。</li>
<li>跳转到上一个Buffer文件：<code>:bp</code>。</li>
</ul>
</li>
<li><p>.h和.c文件间的跳转（此内容依赖于插件vim-scripts&#x2F;a.vim）</p>
<ul>
<li>.h和.c文件切换：<code>:A</code>。</li>
<li>跳转到光标所在的文件：<code>:IH</code>，这个指令用来跳转到#include后面的文件很有用。或使用<code>:gf</code></li>
</ul>
</li>
</ul>
<h3 id="针对光标的跳转"><a href="#针对光标的跳转" class="headerlink" title="针对光标的跳转"></a>针对光标的跳转</h3><ul>
<li>光标历史位置往前（旧）调ctrl i。</li>
<li>光标历史位置往后（新）调ctrl o。</li>
</ul>
<h3 id="特殊位置标记的跳转"><a href="#特殊位置标记的跳转" class="headerlink" title="特殊位置标记的跳转"></a>特殊位置标记的跳转</h3><p>注意：以下这些跳转动作都只能在文件内，不支持跨文件跳转</p>
<ul>
<li>跳转到上次修改的地方：<code>`.</code>。</li>
<li>跳转到上次进入插入模式的地方：<code>`^</code>。</li>
<li>给文件某位置（这里的位置是你添加标记时的光标位置）添加标记后跳转。添加标记：m a<del>z，这里的a</del>z既能是大写也能是小写，是区分大小写的。跳转到某标记位置：<code>&#39;a~z</code>（单引号+标记）, 这个标记要是已经添加过的。删除某个标记：<code>:delmarks a~z</code>，删除全部标记：<code>:delmarks!</code>。</li>
<li><code>:marks</code>可以列出全部标记，一些特殊的标记如下<ul>
<li><code>.</code> ——最近编辑的位置</li>
<li><code>0-9</code> ——最近使用的文件</li>
<li><code>^</code> ——最近插入的位置</li>
<li><code>&#39;</code> ——上一次跳转前的位置</li>
<li><code>&quot;</code> ——上一次退出文件时的位置</li>
<li><code>[</code> ——上一次修改的开始处</li>
<li><code>]</code> ——上一次修改的结尾处</li>
</ul>
</li>
</ul>
<h3 id="有关语法的跳转"><a href="#有关语法的跳转" class="headerlink" title="有关语法的跳转"></a>有关语法的跳转</h3><p>前提是ctags已经生成了标签</p>
<ul>
<li>跳转到定义处：<code>ctrl ]</code>。</li>
<li>跳转到声明处：<code>[</code>然后<code>ctrl i</code>。</li>
</ul>
]]></content>
      <categories>
        <category>杂文集合</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义malloc分配数组空间</title>
    <url>/2022/10/%E8%87%AA%E5%AE%9A%E4%B9%89malloc%E5%88%86%E9%85%8D%E6%95%B0%E7%BB%84%E7%A9%BA%E9%97%B4/</url>
    <content><![CDATA[<p>申请栈空间，实现initMallocPoll、mAlloc、mRealloc、mFree动态分配。</p>
<p>使用blk结构体记录空间分配，返回申请空间的地址在紧跟在blk后，链表记录已分配或未分配的块，申请或释放时，改变链表指针的指向，合并相邻未分配块。</p>
<blockquote>
<p>本篇文章参考自 <a href="https://blog.csdn.net/wxx258369/article/details/78949687">https://blog.csdn.net/wxx258369/article/details/78949687</a>，仅仅对其中的一部分做了修改</p>
</blockquote>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>mAlloc.h</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __mAlloc_h__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __mAlloc_h__</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">initMallocPool</span><span class="params">(<span class="type">void</span> *pool, <span class="type">unsigned</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">mAlloc</span><span class="params">(<span class="type">unsigned</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">mRealloc</span><span class="params">(<span class="type">void</span> *ptr, <span class="type">unsigned</span> size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mFree</span><span class="params">(<span class="type">void</span> *ptr)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>mAlloc.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mAlloc.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">blk</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="type">unsigned</span> size;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">blk</span> *<span class="title">next</span>;</span><span class="comment">//指向下一个未分配块</span></span><br><span class="line">&#125;blk, *pblk;<span class="comment">//指示每个已分配或未分配空间的大小和位置</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> pblk phead = <span class="literal">NULL</span>;<span class="comment">//链表记录未分配块的位置和大小</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">initMallocPool</span><span class="params">(<span class="type">void</span> *pool, <span class="type">unsigned</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    phead = (pblk)pool;</span><br><span class="line">    phead-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    phead-&gt;size = size - <span class="keyword">sizeof</span>(blk);<span class="comment">//可用空间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">mAlloc</span><span class="params">(<span class="type">unsigned</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    pblk pNext,pNode;</span><br><span class="line">    <span class="type">void</span> *result;</span><br><span class="line">    pNext = phead;</span><br><span class="line">    <span class="comment">//地址从下往上增长</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使分配的块为4字节的倍数，否则在某单片机上pNode-&gt;size访问错误</span></span><br><span class="line">    <span class="keyword">if</span>((size&amp;<span class="number">3</span>) != <span class="number">0</span>) </span><br><span class="line">        size = ((size &gt;&gt; <span class="number">2</span>) + <span class="number">1</span>) &lt;&lt; <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="keyword">if</span>(pNext-&gt;size &gt;= size + <span class="keyword">sizeof</span>(blk))<span class="comment">//找到可分配的块</span></span><br><span class="line">        &#123;</span><br><span class="line">            pNext-&gt;size = pNext-&gt;size - size - <span class="keyword">sizeof</span>(blk);<span class="comment">//分配后剩余大小</span></span><br><span class="line">            pNode = (pblk)((<span class="type">void</span>*)pNext + pNext-&gt;size + <span class="keyword">sizeof</span>(blk));<span class="comment">//新节点</span></span><br><span class="line">            pNode-&gt;size = size;</span><br><span class="line">            </span><br><span class="line">            result = (<span class="type">void</span>*)(++pNode); <span class="comment">//指针向上移动一个blk大小，为分配给用户的地址</span></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        pNext = pNext-&gt;next;</span><br><span class="line">    &#125;<span class="keyword">while</span>(pNext != <span class="literal">NULL</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">//找不到连续大小的块</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">merge</span><span class="params">(pblk pPrior, pblk pNext)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(pNext == (pblk)((<span class="type">void</span>*)pPrior + pPrior-&gt;size + <span class="keyword">sizeof</span>(blk)))<span class="comment">//相邻玩过</span></span><br><span class="line">    &#123;</span><br><span class="line">        pPrior-&gt;size += pNext-&gt;size + <span class="keyword">sizeof</span>(blk);</span><br><span class="line">        pPrior-&gt;next = pNext-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">mFree</span><span class="params">(<span class="type">void</span> *ptr)</span></span><br><span class="line">&#123;</span><br><span class="line">    pblk pFree = (pblk)(ptr - <span class="keyword">sizeof</span>(blk));<span class="comment">//指针向下移动一个blk大小，即位块信息</span></span><br><span class="line">    pblk pNext = phead;</span><br><span class="line">    pblk pPrior = phead;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        pPrior = pNext;</span><br><span class="line">        pNext = pNext-&gt;next;</span><br><span class="line">        <span class="comment">//将待释放块插入未分配链表距离最近的两个未分配块的中间</span></span><br><span class="line">        <span class="keyword">if</span>(pNext == <span class="literal">NULL</span> || (pPrior &lt;= pFree &amp;&amp; pNext &gt;= pFree))</span><br><span class="line">        &#123;</span><br><span class="line">            pFree-&gt;next = pNext;</span><br><span class="line">            pPrior-&gt;next = pFree;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">while</span>(pNext != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">//合并相邻的两个未分配块</span></span><br><span class="line">    merge(pPrior, pFree);</span><br><span class="line">    merge(pFree, pNext);</span><br><span class="line">    merge(pPrior, pNext);<span class="comment">//如果三个块是连续的，则需要</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">mRealloc</span><span class="params">(<span class="type">void</span> *ptr, <span class="type">unsigned</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(ptr == <span class="literal">NULL</span>) <span class="keyword">return</span> mAlloc(size);</span><br><span class="line">    pblk pFree = (pblk)(ptr - <span class="keyword">sizeof</span>(blk));<span class="comment">//指针向下移动一个blk大小，即位块信息</span></span><br><span class="line">    <span class="type">void</span> *p = mAlloc(size);</span><br><span class="line">    <span class="keyword">if</span>(p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(p, <span class="number">0</span>, size);</span><br><span class="line">        <span class="keyword">if</span>(pFree-&gt;size &lt; size)  size的大小不总大于原空间的大小</span><br><span class="line">            <span class="built_in">memcpy</span>(p, ptr, pFree-&gt;size);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">memcpy</span>(p, ptr, size);</span><br><span class="line">        mFree(ptr);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mAlloc.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> pool[<span class="number">1024</span>*<span class="number">5</span>];</span><br><span class="line">    initMallocPool(pool, <span class="keyword">sizeof</span>(pool));</span><br><span class="line">    <span class="type">char</span> *t = mAlloc(<span class="number">100</span>);</span><br><span class="line">    mFree(t);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><p>mAlloc可以进行优化，寻找所有未分配块中最接近需要size大小的块，避免剩余空间很多，但过于零碎，在需要分配一大块完整空间时找不到。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span>* <span class="title function_">mAlloc</span><span class="params">(<span class="type">unsigned</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">    pblk pNext,pNode;</span><br><span class="line">    <span class="type">void</span> *result;</span><br><span class="line">    pNext = phead;</span><br><span class="line">    pblk pMin = phead;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>((size&amp;<span class="number">3</span>) != <span class="number">0</span>) </span><br><span class="line">        size = ((size &gt;&gt; <span class="number">2</span>) + <span class="number">1</span>) &lt;&lt; <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="keyword">if</span>(pNext-&gt;size &gt;= size + <span class="keyword">sizeof</span>(blk))<span class="comment">//找到可分配的块</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(pMin-&gt;size &gt; pNext-&gt;size)</span><br><span class="line">                pMin = pNext;</span><br><span class="line">        &#125;</span><br><span class="line">        pNext = pNext-&gt;next;</span><br><span class="line">    &#125;<span class="keyword">while</span>(pNext != <span class="literal">NULL</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(pMin-&gt;size &gt;= size + <span class="keyword">sizeof</span>(blk))</span><br><span class="line">    &#123;</span><br><span class="line">        pMin-&gt;size = pMin-&gt;size - size - <span class="keyword">sizeof</span>(blk);<span class="comment">//分配后剩余大小</span></span><br><span class="line">        pNode = (pblk)((<span class="type">void</span>*)pMin + pMin-&gt;size + <span class="keyword">sizeof</span>(blk));<span class="comment">//新节点</span></span><br><span class="line">        pNode-&gt;size = size;</span><br><span class="line"></span><br><span class="line">        result = (<span class="type">void</span>*)(++pNode); <span class="comment">//指针向上移动一个blk大小，为分配给用户的地址</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">//找不到连续大小的块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习总结</category>
      </categories>
      <tags>
        <tag>CC++</tag>
      </tags>
  </entry>
  <entry>
    <title>OTA常用代码</title>
    <url>/2021/10/OTA%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<p>在嵌入式开发中，使产品的软件能够更新升级是个很常见的需求，作为开发人员，能够快速熟练地实现该功能是基本能力。</p>
<p>一般当设备不具备直接获取完整的更新文件时，需要逐包获取更新文件，因此要设计专门的更新代码以实现此功能。</p>
<p>在此记录下OTA的常用升级代码，以备不时之需。</p>
<h3 id="1-数据结构"><a href="#1-数据结构" class="headerlink" title="1.数据结构"></a>1.数据结构</h3><p>首先先来定义OTA需要的数据结构：</p>
<ul>
<li>具有更新功能的软件，必须定义软件版本号，以下为一个参考：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//version.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __VERSION_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __VERSION_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PROJECT_ID       0x2A4B     <span class="comment">/**&lt;each project has its own ID*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BOOT_VERSION     0x0        <span class="comment">/**&lt;BOOT LOADER version*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STACK_VERSION    0x16       <span class="comment">/**&lt;stack version*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USER_APP_VERSION 0x0002     <span class="comment">/**&lt;user only allow to change app version*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> APP_VERSION     ((BOOT_VERSION &lt;&lt; 24) | (STACK_VERSION &lt;&lt; 16) | USER_APP_VERSION)  <span class="comment">/**&lt;app code version, only low uin16 can be set by user*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>



<ul>
<li>获取更新包时需要的变量：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">uint8_t</span>    updata_ok   =  <span class="number">0</span>;	<span class="comment">//更新数据传输完成的标志位，当置1时设备复位升级</span></span><br><span class="line"><span class="type">uint32_t</span>   ota_offset  = <span class="number">16</span>;	<span class="comment">//更新包请求偏移量，一般前16个字节是更新包的头文件，用来保存版本号、校验码等，从16字节开始是设备更新文件</span></span><br><span class="line"><span class="type">uint16_t</span>   pk	       = <span class="number">1024</span>;	<span class="comment">//一般获取更新包时，每次请求1024个字节，因为一般写flash时是以1024字节为单位</span></span><br><span class="line"><span class="type">uint16_t</span>   x_bk	       = <span class="number">0</span>;		<span class="comment">//请求1024字节数据包的个数</span></span><br><span class="line"><span class="type">uint16_t</span>   remain      = <span class="number">0</span>;		<span class="comment">//不足1024字节时，最后一包的字节数</span></span><br><span class="line"></span><br><span class="line">UPDATE_HEADER sys_vs_info = &#123;<span class="number">0</span>&#125;;<span class="comment">//软件版本信息</span></span><br><span class="line">UPDATE_HEADER ota_vs_info = &#123;<span class="number">0</span>&#125;;<span class="comment">//ota文件版本信息</span></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span>    ota_buff[<span class="number">1024</span> + <span class="number">32</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">//接收更新数据</span></span><br></pre></td></tr></table></figure>



<ul>
<li>以下为更新包16字节头的参考结构，其中必须要包含的是软件版本号、更新文件长度、校验码：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	uint16 project_id;          <span class="comment">/**&lt; each project has its unique id */</span></span><br><span class="line">	uint8 root_version;	        <span class="comment">/**&lt;secondary boot update*/</span></span><br><span class="line">	uint8 stack_version;        <span class="comment">/**&lt;stack update*/</span></span><br><span class="line">	uint32 app_version;         <span class="comment">/**&lt;app update*/</span></span><br><span class="line">	uint32 code_size;           <span class="comment">/**&lt; updated code size*/</span></span><br><span class="line">	uint32 crc32;               <span class="comment">/**&lt;crc32*/</span></span><br><span class="line">&#125; UPDATE_HEADER;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="2-OTA过程"><a href="#2-OTA过程" class="headerlink" title="2.OTA过程"></a>2.OTA过程</h3><ul>
<li><p>OTA开始条件：一般设定一个时间间隔或定时来 check 一次是否有新版本更新，或是接收升级指令更新。check 有符合更新的版本时，即可开始请求。</p>
</li>
<li><p>获取更新数据：如果从其它模块获取更新数据，需要等待模块下载完成存储到数组中后，触发更新请求。OTA请求的第一个包是16字节的头文件，之后是设备更新数据。每次请求数据，offset 是数组的下标，长度为 pk 或 remain，更新数据写入 flash 的预留空间中。</p>
</li>
<li><p>判断接收完成：当接收的总字节数等于头文件的字节数时，即可置位 updata_ok，在合适的时间重启。</p>
</li>
<li><p>完成更新：重启后，进入 bootloader——如果设备有更新功能，则必须有 bootloader，每次设备复位后先进入 bootloader，检查 flash 预留空间是否有更新包可用，如果有则在校验通过后将更新包拷贝到应用程序空间，然后跳转到应用程序。</p>
</li>
</ul>
<h3 id="3-获取更新数据程序"><a href="#3-获取更新数据程序" class="headerlink" title="3.获取更新数据程序"></a>3.获取更新数据程序</h3><p>OTA的其它过程没什么说的，主要是获取更新数据的过程，分为发送和接收。发送和接收又分为头16字节数据和剩余数据。在剩余数据中，又分为1024字节整的数据包和最后一个不足1024字节的数据包。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接收16字节更新头文件</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">check_ota_head</span><span class="params">(<span class="type">uint8_t</span> *pData,<span class="type">uint16_t</span> lens)</span><span class="comment">//lens = 16</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">bool</span> s = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">uint16_t</span> sysAppNum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">uint16_t</span> otaAppNum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">uint8_t</span>  otaApproot  = <span class="number">0</span>;</span><br><span class="line">    <span class="type">uint8_t</span>  otaAppstack = <span class="number">0</span>;</span><br><span class="line">    ota_init();<span class="comment">//获取软件的版本号等信息</span></span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;ota_vs_info,pData,lens);<span class="comment">//文件头16字节得到文件大小和CRC32</span></span><br><span class="line">    sysAppNum   = sys_vs_info.app_version;</span><br><span class="line">    otaAppNum   = ota_vs_info.app_version;</span><br><span class="line">    otaApproot  = ota_vs_info.app_version &gt;&gt; <span class="number">24</span>;</span><br><span class="line">    otaAppstack = ota_vs_info.app_version &gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">if</span>(ota_vs_info.project_id == sys_vs_info.project_id</span><br><span class="line">       &amp;&amp; ota_vs_info.root_version  == <span class="number">0</span></span><br><span class="line">       &amp;&amp; ota_vs_info.stack_version == <span class="number">0</span></span><br><span class="line">       &amp;&amp; sys_vs_info.root_version  == otaApproot</span><br><span class="line">       &amp;&amp; sys_vs_info.stack_version == otaAppstack</span><br><span class="line">       &amp;&amp; sysAppNum != otaAppNum</span><br><span class="line">       &amp;&amp; ota_vs_info.code_size &lt;= (<span class="number">40</span> * <span class="number">1024</span>))<span class="comment">//版本比较以及其它控制信息</span></span><br><span class="line">    &#123;</span><br><span class="line">        s = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//更新控制信息，进入bootloader后判断是否更新</span></span><br><span class="line">        write_ota_ctrl(WRITE_OTA_INFO_CTRL);</span><br><span class="line">        write_ota_ctrl(WRITE_OTA_FILE_SIZE_CTRL);</span><br><span class="line">        x_bk   = (ota_vs_info.code_size) / pk;</span><br><span class="line">        remain = (ota_vs_info.code_size) % pk;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收设备更新数据</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">check_bin_file</span><span class="params">(<span class="type">uint8_t</span> *pData,<span class="type">uint16_t</span> lens)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> i,j,k;</span><br><span class="line">    k = lens / <span class="number">128</span>;<span class="comment">//这里flash一次写入128字节，也有512或1024</span></span><br><span class="line">    j = lens % <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">if</span>(ota_offset &lt; ota_vs_info.code_size)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; k;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ota_write_ota_data(&amp;pData[i * <span class="number">128</span>],<span class="number">128</span>);<span class="comment">//写入flash</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j)</span><br><span class="line">        &#123;</span><br><span class="line">            ota_write_ota_data(&amp;pData[i*<span class="number">128</span>],j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ota_offset += lens;</span><br><span class="line">    <span class="comment">//接收完成所有bin file复位升级</span></span><br><span class="line">    <span class="keyword">if</span>(ota_offset &gt;= (ota_vs_info.code_size))</span><br><span class="line">    &#123;</span><br><span class="line">        dly_us(<span class="number">100000</span>);</span><br><span class="line">        write_ota_ctrl(WRITE_OTA_FILE_CRC32_CTRL);</span><br><span class="line">        updata_ok     = <span class="number">1</span>;</span><br><span class="line">        ota_offset    = <span class="number">16</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> updata_ok;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//请求设备更新数据数据</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">copy_bin_file</span><span class="params">(<span class="type">uint8_t</span> *p)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="type">pk_t</span> pt = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(ota_offset / pk &lt; x_bk)</span><br><span class="line">    &#123;</span><br><span class="line">        pt.addr = ota_offset;</span><br><span class="line">        pt.pk   = pk;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(remain)</span><br><span class="line">    &#123;</span><br><span class="line">        pt.addr = ota_offset;</span><br><span class="line">        pt.pk   = remain;</span><br><span class="line">    &#125;</span><br><span class="line">    len = <span class="keyword">sizeof</span>(<span class="type">pk_t</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(p,(<span class="type">uint8_t</span>*)&amp;pt,len);</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//发送请求</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">send_uartttl_data</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint16_t</span>  ask   = <span class="number">0</span>;</span><br><span class="line">    uartMsg  uMsg   = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(pub_buf.buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(pub_buf.buf));</span><br><span class="line">    <span class="type">pst_info_t</span> s_cat1_data = (<span class="type">pst_info_t</span>)&amp;pub_buf.buf;</span><br><span class="line">    getUartQueMsg(&amp;uMsg);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(uMsg.msgType)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> OTA_HEAD:</span><br><span class="line">        &#123;</span><br><span class="line">            ask = <span class="number">1</span>;<span class="comment">//请求头文件时offset为0，对端响应16字节头文件数据</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> OTA_DATA:</span><br><span class="line">	&#123;</span><br><span class="line">	    ask = copy_bin_file((<span class="type">uint8_t</span>*)&amp;pub_buf.buf[<span class="number">5</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ask)</span><br><span class="line">    &#123;</span><br><span class="line">        s_cat1_data -&gt; head  = CAT1_OTA_HEAD;</span><br><span class="line">        s_cat1_data -&gt; cmd   = uMsg.msgType ;</span><br><span class="line">        s_cat1_data -&gt; len   = ask;</span><br><span class="line">        s_cat1_data -&gt; crc   = m_crc8((<span class="type">uint8_t</span>*)&amp;pub_buf.buf[<span class="number">5</span>], ask);</span><br><span class="line">        uart0_send((<span class="type">uint8_t</span>*)pub_buf.buf, <span class="number">5</span> + ask);</span><br><span class="line">        uartQueMsg.w_count += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接收数据</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">read_uartttl_data</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> t_crc =  <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(mxd_ttl.priv_len)</span><br><span class="line">    &#123;</span><br><span class="line">        t_crc = m_crc8(&amp;mxd_ttl.buf[<span class="number">5</span>], mxd_ttl.priv_len - <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(*(mxd_ttl.buf + <span class="number">4</span>) != t_crc </span><br><span class="line">           || mxd_ttl.buf[<span class="number">0</span>] != CAT1_OTA_HEAD)</span><br><span class="line">        &#123;</span><br><span class="line">            clear_ttl();</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span>(*(mxd_ttl.buf + <span class="number">1</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> OTA_HEAD:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(check_ota_head(&amp;mxd_ttl.buf[<span class="number">5</span>], mxd_ttl.priv_len - <span class="number">5</span>)) </span><br><span class="line">                &#123;</span><br><span class="line">                    set_uart_queue(OTA_DATA);<span class="comment">//接收到ota头后，请求发送剩余数据</span></span><br><span class="line">                &#125;</span><br><span class="line">                getUartQueMsgNumAdd();</span><br><span class="line">                uartQueMsg.w_count = <span class="number">0</span>;<span class="comment">//清空超时</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> OTA_DATA:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(check_bin_file(&amp;mxd_ttl.buf[<span class="number">5</span>], mxd_ttl.priv_len - <span class="number">5</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//接收完成，复位</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    set_uart_queue(OTA_DATA);<span class="comment">//未接收完整，继续请求发送数据</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                getUartQueMsgNumAdd();</span><br><span class="line">                uartQueMsg.w_count = <span class="number">0</span>;<span class="comment">//清空超时</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        clear_ttl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="4-OTA常见的问题"><a href="#4-OTA常见的问题" class="headerlink" title="4.OTA常见的问题"></a>4.OTA常见的问题</h3><ol>
<li><p>（stm32f103c8t6）传输完第一个1024字节后，mcu写入flash保存，写入之后程序挂死。</p>
<p>经过检查，有关升级的代码部分没有问题，查看程序大小，发现超出了自己所分配的程序运行空间（分配了25K的程序运行空间，紧接着是25K的升级包存储空间，而实际上程序大小超出了25K达到了30K），导致升级包被写入到了程序运行空间中。</p>
<p>解决方法是优化程序大小，或者重新分配程序运行空间和升级包存储空间的大小。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>学习总结</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>C陷阱与缺陷笔记</title>
    <url>/2021/06/C%E9%99%B7%E9%98%B1%E4%B8%8E%E7%BC%BA%E9%99%B7%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="第1章-词法陷阱"><a href="#第1章-词法陷阱" class="headerlink" title="第1章 词法陷阱"></a>第1章 词法陷阱</h4><p>严格规范词法书写，单引号与双引号不要混用。</p>
<h4 id="第2章-语法陷阱"><a href="#第2章-语法陷阱" class="headerlink" title="第2章 语法陷阱"></a>第2章 语法陷阱</h4><ul>
<li><p>理解函数声明</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//程序跳转到地址0处执行</span></span><br><span class="line">(*(<span class="type">void</span>(*)())<span class="number">0</span>)();</span><br></pre></td></tr></table></figure>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> (*signal(<span class="type">int</span>, <span class="type">void</span>(*)(<span class="type">int</span>)))(<span class="type">int</span>);</span><br><span class="line"><span class="comment">//typedef简化</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span> <span class="params">(*HANDLER)</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line">HANDLER <span class="title function_">signal</span><span class="params">(<span class="type">int</span>, HANDLER)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>运算符优先级</p>
</li>
<li><p>语句结束标志的分号</p>
</li>
<li><p>switch</p>
</li>
<li><p>函数调用</p>
</li>
<li><p>悬挂 else 引发的问题</p>
</li>
</ul>
<h4 id="第3章-语义陷阱"><a href="#第3章-语义陷阱" class="headerlink" title="第3章 语义陷阱"></a>第3章 语义陷阱</h4><ul>
<li><p>指针与数组</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="comment">//以下语句都是合法的</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *(a+<span class="number">5</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *(<span class="number">5</span>+a));</span><br><span class="line"><span class="comment">//*(a+i)即数组 a 中下标为 i 的元素的引用，简记为 a[i]</span></span><br><span class="line"><span class="comment">//由于 a+i 与 i+a 的含义一样，因此 a[i] 与 i[a] 也具有同样的含义</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a[<span class="number">5</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="number">5</span>[a]);  <span class="comment">//5[a] 与 a[5]是一样的，但不推荐这样的写法</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>非数组的指针</p>
<ul>
<li>字符串，注意字符串以 ‘\0’ 结尾，而 strlen() 计算长度并不将其计算在内。</li>
</ul>
</li>
<li><p>作为参数的数组声明</p>
</li>
<li><p>避免举隅法</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *p, *q;</span><br><span class="line">p = <span class="string">&quot;xyz&quot;</span>;</span><br><span class="line"><span class="comment">//要记住 p 的值并不是字符串 &quot;xyz&quot;，</span></span><br><span class="line"><span class="comment">//p 的值是一个指向由 &#x27;x&#x27;,&#x27;y&#x27;,&#x27;z&#x27;和&#x27;\0&#x27;4个字符组成的数组的起始元素的指针</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>空指针并非空字符串</p>
<ul>
<li>空指针不能使用该指针所指向内存中存储的内容，也不能解引用</li>
</ul>
</li>
<li><p>边界计算与不对称边界</p>
</li>
<li><p>求值顺序</p>
</li>
<li><p>运算符&amp;&amp;、||和 ! </p>
</li>
<li><p>整数溢出</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(a &gt; INT_MAX - b) <span class="built_in">printf</span>(<span class="string">&quot;溢出\n&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>为函数 main 提供返回值</p>
</li>
</ul>
<h4 id="第4章-连接"><a href="#第4章-连接" class="headerlink" title="第4章 连接"></a>第4章 连接</h4><ul>
<li>什么是连接器</li>
<li>声明与定义<ul>
<li>extern 声明了一个对外部变量的引用，可以出现在函数内部。</li>
</ul>
</li>
<li>命名冲突与 static 修饰符</li>
<li>形参、实参与返回值</li>
<li>检查外部类型</li>
<li>头文件</li>
</ul>
<h4 id="第5章-库函数"><a href="#第5章-库函数" class="headerlink" title="第5章 库函数"></a>第5章 库函数</h4><ul>
<li>返回整数的 getchar 函数</li>
<li>更新顺序文件</li>
<li>缓冲输出与内存分配</li>
<li>使用 errno 检测错误<ul>
<li>在库函数没有调用失败的情况下，并没有强制要求库函数一定要设置 errno 为0，因此 errno 的值就可能是前一个执行失败的库函数设置的值</li>
<li>库函数调用成功，仍旧可能设置 errno 的值（fopen 例子）</li>
</ul>
</li>
<li>库函数 signal</li>
</ul>
<h4 id="第6章-预处理器"><a href="#第6章-预处理器" class="headerlink" title="第6章 预处理器"></a>第6章 预处理器</h4><ul>
<li>不能忽视宏定义中的空格</li>
<li>宏并不是函数<ul>
<li>将宏定义中出现的参数用括号括起来</li>
<li>将整个结果表达式也用括号括起来</li>
</ul>
</li>
<li>宏并不是语句</li>
<li>宏并不是类型定义</li>
</ul>
<h4 id="第7章-可移植缺陷"><a href="#第7章-可移植缺陷" class="headerlink" title="第7章 可移植缺陷"></a>第7章 可移植缺陷</h4><ul>
<li><p>应对 C 语言标准变更</p>
</li>
<li><p>标识符名称的限制</p>
</li>
<li><p>整数的大小</p>
</li>
<li><p>字符是有符号整数还是无符号整数</p>
</li>
<li><p>移位运算符</p>
</li>
<li><p>内存位置0</p>
</li>
<li><p>除法运算时发生的截断</p>
<ul>
<li>不保证改变被除数的正负号，商的符号也会改变并且商的绝对值不变</li>
<li>不保证当除数大于0时余数大于等于0且余数小于除数</li>
</ul>
</li>
<li><p>随机数的大小</p>
</li>
<li><p>大小写转换</p>
</li>
<li><p>首先释放，然后重新分配</p>
</li>
<li><p>可移植性问题的一个例子</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//合法的写法</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, <span class="string">&quot;0123456789&quot;</span>[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="第8章-建议与答案"><a href="#第8章-建议与答案" class="headerlink" title="第8章 建议与答案"></a>第8章 建议与答案</h4><blockquote>
<p>事前周密思考</p>
</blockquote>
<blockquote>
<p>对程序组合方式的理解尤为重要</p>
</blockquote>
<blockquote>
<p>在调试程序很长时间之后，疲惫不堪的程序员开始漫无目的地瞎碰，这里试一下，那里改一点，如果凑巧程序似乎可以运行了，便万事大吉。</p>
</blockquote>
<ul>
<li>建议<ul>
<li>不要说服自己相信“皇帝的新装”</li>
<li>直截了当地表明意图</li>
<li>考察最简单的特例</li>
<li>使用不对称边界</li>
<li>注意潜伏在暗处的 Bug</li>
<li>防御性编程</li>
</ul>
</li>
<li>答案<ul>
<li>指针不能相加但可以相减，结果是一个整数</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>学习总结</category>
      </categories>
      <tags>
        <tag>CC++</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx安装SSL</title>
    <url>/2022/05/Nginx%E5%AE%89%E8%A3%85SSL/</url>
    <content><![CDATA[<p>1.购买申请证书</p>
<p>2.下载Nginx证书</p>
<p>3.在&#x2F;etc&#x2F;nginx&#x2F;下新建cert目录，拷贝证书到该目录下</p>
<p>4.证书改个人类友好的名字</p>
<p>5.修改Nginx配置文件，添加对443端口的监听</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">listen 443 ssl default_server;</span><br><span class="line">listen [::]:443 ssl default_server;</span><br><span class="line"></span><br><span class="line">ssl_certificate /etc/nginx/cert/sslconfigure.pem;</span><br><span class="line">ssl_certificate_key /etc/nginx/cert/sslconfigure.key;</span><br></pre></td></tr></table></figure>

<p>6.测试配置是否正常<code>nginx -t</code></p>
<p>7.云服务器平台开启443端口</p>
<p>8.防火墙打开443端口<code>ufw allow 443</code></p>
<p>9.Nginx重新加载配置文件<code>nginx -s reload</code></p>
<p>10.测试<code>curl -I https://xxx.com</code></p>
<p>11.浏览器验证</p>
<p>12.将http重定向到https，<code>rewrite ^(.*)$ https://$host$1;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream my_server&#123;</span><br><span class="line">        server xxx.xx.xx.xx:8080;</span><br><span class="line">        keepalive 2000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Default server configuration</span><br><span class="line">#</span><br><span class="line">server &#123;</span><br><span class="line">        listen 80 default_server;</span><br><span class="line">        listen [::]:80 default_server;</span><br><span class="line">    	rewrite ^(.*)$ https://$host$1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">        listen 443 ssl default_server;</span><br><span class="line">        listen [::]:443 ssl default_server;</span><br><span class="line"></span><br><span class="line">        root /var/www/html;</span><br><span class="line"></span><br><span class="line">        index index.html index.htm index.nginx-debian.html;</span><br><span class="line"></span><br><span class="line">        server_name qzwjer.top;</span><br><span class="line">    	ssl_certificate /etc/nginx/cert/sslconfigure.pem;</span><br><span class="line">    	ssl_certificate_key /etc/nginx/cert/sslconfigure.key;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">	    	    proxy_pass http://my_server;</span><br><span class="line">    	    	proxy_set_header Host $host:$server_port;</span><br><span class="line">                try_files $uri $uri/ =404;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ^~ /doc/ &#123;</span><br><span class="line">                alias /root/doc/;</span><br><span class="line">                autoindex on;</span><br><span class="line">                autoindex_exact_size off;</span><br><span class="line">                autoindex_localtime on;</span><br><span class="line">                charset utf-8,gbk;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    location ~ .* &#123;</span><br><span class="line">        proxy_pass http://my_server;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习总结</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>SSL</tag>
      </tags>
  </entry>
  <entry>
    <title>FreeRTOS-7</title>
    <url>/2021/06/FreeRTOS-7/</url>
    <content><![CDATA[<p><font size=16> 7.任务的定义与任务切换的实现</font></p>
<p>任务通俗的讲就是一件需要完成的事情，在多任务系统里指的就是一个独立的函数。</p>
<p>在裸机系统中，全局变量、局部变量、返回地址等都放在栈里，栈是单片机 RAM 里一段连续的内存空间，栈的大小一般在启动文件或链接脚本里指定，由 _main 初始化。</p>
<p>多任务系统中，每个任务是独立互不干扰的，所以每个任务都分配独立的栈空间。</p>
<p>任务控制块相当于任务的身份证，里面存有任务的所有信息，如任务的栈指针，任务名称，任务形参等。</p>
<p>任务控制块类型声明：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tskTaskControlBlock</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">volatile</span> StackType_t *pxTopOfStack;  <span class="comment">/*栈顶*/</span></span><br><span class="line">	ListItem_t xStateListItem;	<span class="comment">/*任务节点*/</span></span><br><span class="line">	StackType_t *pxStack; <span class="comment">/*任务栈起始地址*/</span></span><br><span class="line">	<span class="type">char</span> pcTaskName[configMAX_TASK_NAME_LEN]; <span class="comment">/*任务名称*/</span></span><br><span class="line">&#125; tskTCB;</span><br><span class="line"><span class="keyword">typedef</span> tskTCB TCB_t;</span><br></pre></td></tr></table></figure>



<h3 id="1-实现任务创建函数"><a href="#1-实现任务创建函数" class="headerlink" title="1.实现任务创建函数"></a>1.实现任务创建函数</h3><p>任务的栈，任务的函数实体，任务的控制块，最终需要联系起来才能由系统进行统一调度。</p>
<p>联系的工作由任务创建函数 xTackCreateStatic() 来实现。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> (configSUPPORT_STATIC_ALLOCATION == 1)</span></span><br><span class="line">TaskHandle_t <span class="title function_">xTaskCreateStatic</span><span class="params">(TaskFunction_t pxTaskCode, <span class="type">const</span> <span class="type">char</span>* <span class="type">const</span> pcName, <span class="type">const</span> <span class="type">uint32_t</span> ulStackDepth, <span class="type">void</span> * <span class="type">const</span> pvParameters, StackType_t *<span class="type">const</span> puxStackBuffer, TCB_t * <span class="type">const</span> pxTaskBuffer)</span></span><br><span class="line">&#123;</span><br><span class="line">    TCB_t * pxNewTCB;</span><br><span class="line">    TaskHandle_t xReturn;</span><br><span class="line">    <span class="keyword">if</span>((pxTaskBuffer != <span class="literal">NULL</span>) &amp;&amp; (puxStackBuffer != <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        pxNewTCB = (TCB_t *)pxTaskBuffer;</span><br><span class="line">        pxNewTCB-&gt;pxStack = (StackType_t *) puxStackBuffer;</span><br><span class="line">        prvInitialiseNewTask(pxTaskCode, pcName, ulStackDepth, pvParameters, &amp;xReturn, pxNewTCB);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        xReturn = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> xReturn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>其中 prvInitialiseNewTask() 函数的实现如下。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//待完成</span></span><br></pre></td></tr></table></figure>

<p>其中，关于字节对齐</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">cal_align</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> n, <span class="type">unsigned</span> align)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> ((n + align - <span class="number">1</span>) &amp; (~(align - <span class="number">1</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>① (align - 1)：表示对齐所需的对齐位，如：</p>
<ul>
<li>2字节对齐位为1；</li>
<li>4字节对齐位为11；</li>
<li>8字节对齐位为111；</li>
<li>16字节对齐位为1111；</li>
<li>。。。</li>
</ul>
<p>② (n + align - 1)：表示 n 补齐对齐所需数据。</p>
<p>③ &amp;(~(align - 1))：表示去除由于补齐造成的多余数据。</p>
<p>其中 prvInitialiseNewTask() 中需要初始化任务栈，函数 pxPortInitialiseStack() 实现如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//待完成</span></span><br></pre></td></tr></table></figure>

<h3 id="2-实现就绪列表"><a href="#2-实现就绪列表" class="headerlink" title="2.实现就绪列表"></a>2.实现就绪列表</h3><p>任务就绪列表是一个 List_t 类型的数组。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">List_t pxReadyTasksLists[configMAX_PRIORITIES];</span><br></pre></td></tr></table></figure>

<p>数组的下标对应了任务的优先级，同一优先级的任务统一插入到就绪列表的同一条链表中。</p>
<p>初始化任务就绪列表 prvInitialiseTaskLists() 就是将链表数组中每个元素初始化。</p>
<p>将任务插入到就绪列表：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">prvInitialiseTaskLists();  <span class="comment">//初始化就绪列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建任务1</span></span><br><span class="line">Task1_Handle = xTaskCreateStatic(</span><br><span class="line">	(TaskFunction_t)Task1_Entry,</span><br><span class="line">	(<span class="type">char</span> *)<span class="string">&quot;Task1&quot;</span>,</span><br><span class="line">	(<span class="type">uint32_t</span>)TASK1_STACK_SIZE,</span><br><span class="line">	(<span class="type">void</span>*)<span class="literal">NULL</span>,</span><br><span class="line">	(StackType_t*)Task1Stack,</span><br><span class="line">	(TCB_t*)&amp;Task1TCB);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将任务添加到就绪列表</span></span><br><span class="line">vListInsertEnd(</span><br><span class="line">    &amp;(pxReadyTasksLists[<span class="number">1</span>]),</span><br><span class="line">    &amp;(((TCB_t*)(&amp;Task1TCB))-&gt;xStateListItem));</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建任务2</span></span><br><span class="line">Task2_Handle = xTaskCreateStatic(</span><br><span class="line">	(TaskFunction_t)Task2_Entry,</span><br><span class="line">	(<span class="type">char</span>*)<span class="string">&quot;Task2&quot;</span>,</span><br><span class="line">	(<span class="type">uint32_t</span>)TASK2_STACK_SIZE,</span><br><span class="line">	(<span class="type">void</span>*)<span class="literal">NULL</span>,</span><br><span class="line">	(StackType_t*)Task2Stack,</span><br><span class="line">	(TCB_t*)&amp;Task2TCB);</span><br><span class="line"></span><br><span class="line">vListInsertEnd(</span><br><span class="line">    &amp;(pxReadyTasksLists[<span class="number">2</span>]),</span><br><span class="line">    &amp;(((TCB_t*)(&amp;Task2TCB))-&gt;xStateListItem));</span><br></pre></td></tr></table></figure>

<h3 id="3-实现任务调度器"><a href="#3-实现任务调度器" class="headerlink" title="3.实现任务调度器"></a>3.实现任务调度器</h3><p>调度器是操作系统的核心，主要功能是实现任务的切换。</p>
<p>启动调度器：</p>
<p>vTaskStartScheduler()</p>
<p>xPortStartScheduler()</p>
<p>启动第一个任务：</p>
<p>prvStartFirstTask()</p>
<p>SVC中断，该函数开始真正启动第一个任务：</p>
<p>vPortSVCHandler()</p>
<p>任务切换，触发PendSV中断：</p>
<p>taskYIELD()</p>
<p>PendSV中断服务函数是真正实现任务切换的地方：</p>
<p>xPortPendSVHandler()</p>
]]></content>
      <categories>
        <category>学习总结</category>
      </categories>
      <tags>
        <tag>FreeRTOS</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP（转载）</title>
    <url>/2021/08/TCP%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/</url>
    <content><![CDATA[<h2 id="TCP的通信机制"><a href="#TCP的通信机制" class="headerlink" title="TCP的通信机制"></a>TCP的通信机制</h2><hr>
<p>版权声明：本文为CSDN博主「「零一」」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/l_ppp/article/details/109133096">https://blog.csdn.net/l_ppp/article/details/109133096</a></p>
<p>[TOC]</p>
<h3 id="1-TCP连接管理"><a href="#1-TCP连接管理" class="headerlink" title="1.TCP连接管理"></a>1.TCP连接管理</h3><p>TCP是面向连接进行通信服务的协议，所谓连接，其实就是在两台需要数据交互的主机之间建立一条虚拟的线路，所有的数据交互都是通过这条线路进行的，而TCP就负责这整个线路的创建、销毁、维护管理等工作</p>
<p>在建立连接之前，需要做一些准备，为了确保通信两端是否可以进行正常通信，发送端会通过TCP的首部发送一个SYN包作为建立连接的请求并等待接收端确认应答。如果接收端确认应答并返回一个ACK包，则表示接收端同意与发送端进行通信，然后发送端再次发送一个ACK包给接收端，表示已收到你的同意通信的消息了，此后两端就可以正常通信了；若接收端没有返回给发送端一个确认应答的ACK包，则表示不同意与发送端进行通信，那么两端自然无法进行后续的通信了</p>
<p>两端若在通信完成以后肯定需要断开通信，同样也需要两端互发包来确认是否要断开通信。比如，发送端先发送一个FIN包给接收端，告知想要断开连接，然后接收端可以返回给发送端一个ACK包表示同意你断开连接的请求，紧接着接收端也向发送端发送了一个FIN包，表示其也想断开连接的意愿，发送端在接收到该包后随即返回给接收端一个ACK包表示我也同意你断开连接，这样，两端就断开连接了</p>
<p>总结一下，一次完整的TCP连接的建立与断开至少需要来回发送7个包，其中建立连接需要发3个包，断开连接需要发4个包</p>
<p>我们来看一下完整的通信过程简图</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/20201017154006265.png" alt="在这里插入图片描述"></p>
<p>这就是大家常说的三次握手，四次挥手的过程</p>
<p>如果不好理解上面的建立、断开连接过程，这里我再给大家举一个小小的例子</p>
<p>发送端与接收端通信，就好比我们日常生活中两个人打电话，例如现在A给B打电话</p>
<p>A问B：喂？你是B吗？<br>B回答A：我是B呀，你是A吗？<br>A回答B：对的，我是A<br>就这样一个简单的三次对话就确认了双方是想要互相通信的对象，因此连接就此建立了</p>
<p>那么当A和B聊完天，准备挂电话了</p>
<p>A对B说：我的事说完了，那么没啥事我就挂电话了哈<br>B回答A：好的<br>B又对A补充了一句：我也没啥事了，那我也挂了哈<br>A回答B：好的<br>这三段对话就使通信双方确认了会话结束，因此连接就此断开了</p>
<h3 id="2-分段数据发送"><a href="#2-分段数据发送" class="headerlink" title="2.分段数据发送"></a>2.分段数据发送</h3><p>TCP不是拿到一整个包就直接原封不动地传给接收端的，因为若这样做，即使是发生了数据丢失，也不知道到底丢失了哪部分的数据，因此其采用的就是将数据分段发送的方式</p>
<p>这里先说明一点，不光建立和断开连接时接收端需要向发送端发送请求应答，在数据交互时也是需要的</p>
<p>例如有一个数据包，我们可以将其按顺序给每一个字节都标上一个序号，然后我们假设每次发送1000个序号区间的数据给接收端，所以第一次发送的是 序号 1 ~ 1000 的数据，接收端接收到了以后会返回给发送端一个请求应答，告知发送端下一次请发送 序号 1001 ~ 2000 的数据过来，过程如图所示</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/20201017162518393.png" alt="在这里插入图片描述"></p>
<p>上面我们假设的是每次发送1000个序列号区间的单位，而实际过程中，却不一定是这个值。</p>
<p>在前面的学习中，我们得知数据在数据链路层中传输会收到MTU（最大传输单元）的影响，若数据大于该值，IP则会被分片处理，因此我们尽可能地不让这种事情发生，那么就要让传输的每段数据大小小于该通信线路上最小的MTU，该值称为MSS（最大消息长度）</p>
<p>该值是会在建立连接的三次握手时被计算获得的，比如发送端在请求接收端的时候，在发送的包上附带上其线路上的MTU大小为4000，然后接收端在发送确认应答给发送端时，也会在包上附带上其线路上的MTU大小为1460，此时发送端接收到确认应答后比较两个MTU的大小，取其中小的那个值作为之后数据传输每段的数据大小</p>
<p>如图：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/20201017164229202.png" alt="在这里插入图片描述"></p>
<h3 id="3-重发控制"><a href="#3-重发控制" class="headerlink" title="3.重发控制"></a>3.重发控制</h3><p>我们都知道，在数据传输过程中可能会因为各种原因出现丢包现象，而当出现丢包现象时，即发送端在发完数据以后等待一段时间，并未收到接收端的确认应答，则视为丢包，于是就会进行重发</p>
<p>其中丢包现象又分为两种：</p>
<p>发送端向接收端发送数据的过程中，发生了丢包现象，接收端并未接收到数据，因此不会给发送端发送确认应答<br>接收端收到了发送端传过来的数据，并且也向发送端返回了确认应答，但确认应答的包却在发送的途中出现了丢包，所以发送端接收不到确认应答<br>以上两种情况如下图所示：</p>
<p>第一种情况：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/20201017165347779.png" alt="在这里插入图片描述"></p>
<p>第二种情况：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/2020101716554998.png" alt="在这里插入图片描述"></p>
<p>那么，发送端发送完数据后多久没收到确认应答才判定数据丢包了呢？这个都是随着网络环境的变化而变化的，TCP会在每次发包时计算往返时间以及偏差来决定等待的时间</p>
<p>若重发后又出现了丢包，则下一次等待的时间会以2倍、4倍的指数函数延长</p>
<p>但其又不会无限进行重发，当重发次数达到一定程度后，会判定为网络异常，两端通信就会被强制关闭</p>
<h3 id="4-滑动窗口控制"><a href="#4-滑动窗口控制" class="headerlink" title="4.滑动窗口控制"></a>4.滑动窗口控制</h3><p>上面介绍了TCP将数据分段发送，虽然提高了传输的可靠性，但是存在着一个致命的缺点，那就是效率非常低，因为每送一段都要等待接收端的确认应答，若整个数据的分段较多，那么通信的性能可能就会很低了，因此TCP引入了窗口这个概念</p>
<p>所谓窗口，表示的是无需等待确认应答而可以连续发送的连续多段数据的区域，如图</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/20201017172721594.png" alt="在这里插入图片描述"></p>
<p>我们假设每段数据长度为1000，这里的窗口大小为4段，因此发送端可以将这四段数据都分别发送出去并且不需要发送一段数据以后等待一个确认应答，如图</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/20201017172916342.png" alt="在这里插入图片描述"></p>
<p>此时的窗口包含4个段，即窗口内包含4000个字节的数据，我们称之为窗口大小</p>
<p>接收端在返回相应的确认应答给发送端时，发送端会根据收到的确认应答，继续发送比该确认应答中序列号大4000的数据，如图所示</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/20201017173737412.png" alt="在这里插入图片描述"></p>
<h3 id="5-滑动窗口的重发控制"><a href="#5-滑动窗口的重发控制" class="headerlink" title="5.滑动窗口的重发控制"></a>5.滑动窗口的重发控制</h3><p>若使用了滑动窗口控制这一技术后，即使某段数据出现了丢包现象，也不会造成太大的影响，因为接收端会一边接收发送端传过来的数据，一边用某种方式告知发送端刚才丢失了哪段数据</p>
<p>接下来我们来介绍一下其作用过程，如图所示</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/20201017194341110.png" alt="在这里插入图片描述"></p>
<p>图中，在发送第二段数据（1001 ~ 2000）时发生了丢包，因此接收端没有接收到对应的包，所以当发送端传过来第三段数据的时候，接收端返回的仍是第二段的确认应答，紧接着发送端分别发送了第四段、第五段数据，可接收端都返回的是第二段的确认应答</p>
<p>就这样连着三次发送了同一个确认应答给发送端，所以发送端得知刚才传输数据的过程中第二段数据发生了丢包，因此此时会将丢失的数据重发一份</p>
<p>然后接收端在接收到之前丢掉的那段数据以后，因为之前的数据都成功接收了，所以下一次就开始请求 5001 ~ 6000 这段数据了</p>
<h3 id="6-流控制"><a href="#6-流控制" class="headerlink" title="6.流控制"></a>6.流控制</h3><p>有时，发送端发送给接收端的数据超过了接收端的最大承载能力，因此会造成数据无法接收的情况，从而导致之后会进行数据重发，这非常得浪费性能。</p>
<p>为了防止上述情况得发生，TCP提供了一种机制可以使发送端每次发送的数据尽可能得在接收端得承载能力之内，而其实现得方式就是接收端向发送端告知自己能够接收的数据大小，因此发送端每次发送的数据就都不会超过该值，我们称该值为窗口大小</p>
<p>一旦接收端暂时无法接收任何数据，它会告知发送端，因此发送端会暂停数据的发送，但为了后续数据的正常发送，发送端会不时地向接收端发送一个窗口探测，试探性地看一下接收端是否能继续接收数据了</p>
<p>具体的过程如下图所示</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/20201019163343725.png" alt="在这里插入图片描述"></p>
<h3 id="7-拥塞控制"><a href="#7-拥塞控制" class="headerlink" title="7.拥塞控制"></a>7.拥塞控制</h3><p>因为出现了窗口控制，数据不再是一段一段发送，而是连续发送多段数据包，因此有时如果遇到网络拥堵的情况，而我们又同时发送了大量的数据包，可能会导致网络瘫痪</p>
<p>TCP运用了一种叫做慢启动技巧缓解了上述情况，何为慢启动呢？就是不要在一开始就瞬间发送大量数据包，而是先发送一部分，然后根据收发情况再发送更多的数据包</p>
<p>具体过程我们来看一下</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/20201019171411162.png" alt="在这里插入图片描述"></p>
<p>如图中，发送端的窗口大小为1000，因此只发送了一段长度为1000字节的数据包，此时接收端收到数据并返回一个确认应答，因此发送端将窗口大小加一，即窗口大小为2000 ；发送端又发送了两段长度为1000的数据包，接收端收到数据并返回两个确认应答，因此发送端将窗口大小加二，即窗口大小为4000 ；以此类推</p>
<p>总结： 发送端每次发送的数据包会以1，2，4的指数型增长</p>
<p>但窗口大小也不会无限指数型增大，而是会在达到某个值时进行一些调整，该值称为慢启动阈值</p>
]]></content>
      <categories>
        <category>学习总结</category>
      </categories>
      <tags>
        <tag>TCP</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>http简单探索</title>
    <url>/2021/07/http%E7%AE%80%E5%8D%95%E6%8E%A2%E7%B4%A2/</url>
    <content><![CDATA[<p>&#x3D;&#x3D;注意：&#x3D;&#x3D;有些图片中，消息的时间和端口号与前面的不匹配，是因为图片是后提供的，不必纠结。</p>
<p>打开<strong>网络串口调试助手</strong>，如 netAssist，配置成 TCP Server 模式，如下：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/image-20210701130219844.png" alt="image-20210701130219844"></p>
<p>用浏览器访问地址：<code>localhost:12345</code> 或者 <code>127.0.0.1:12345</code>。</p>
<p>我们从网络调试助手上，首先看到客户端上线的通知，如下：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/image-20210701131006096.png" alt="image-20210701131006096"></p>
<p>然后收到信息，如下：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/image-20210701131627226.png" alt="image-20210701131627226"></p>
<p>具体数据为：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost:12345</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">sec-ch-ua</span><span class="punctuation">: </span>&quot; Not;A Brand&quot;;v=&quot;99&quot;, &quot;Microsoft Edge&quot;;v=&quot;91&quot;, &quot;Chromium&quot;;v=&quot;91&quot;</span><br><span class="line"><span class="attribute">sec-ch-ua-mobile</span><span class="punctuation">: </span>?0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36 Edg/91.0.864.59</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Sec-Fetch-Site</span><span class="punctuation">: </span>none</span><br><span class="line"><span class="attribute">Sec-Fetch-Mode</span><span class="punctuation">: </span>navigate</span><br><span class="line"><span class="attribute">Sec-Fetch-User</span><span class="punctuation">: </span>?1</span><br><span class="line"><span class="attribute">Sec-Fetch-Dest</span><span class="punctuation">: </span>document</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, br</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>wp-settings-time-1=1612349861; wp-settings-1=mfold%3Do</span><br></pre></td></tr></table></figure>



<p><strong>由以上可知，浏览器 http 请求也不过就是通过 socket 发送的一串数据而已，只不过是遵循特定协议格式的数据。</strong></p>
<p>在我们不回复消息时，浏览器会一直等待回复，表现就是刷新按钮一直在转圈圈。</p>
<p>直到超时或收到回复为止。</p>
<p>如果超时，则会断开socket连接。</p>
<p>如果我们在超时之前回复数据：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html</span><br><span class="line"><span class="attribute">charset</span><span class="punctuation">: </span>gbk</span><br><span class="line">Content-Length:44</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>浏览器收到后，会刷新网页为：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/image-20210701131312875.png" alt="image-20210701131312875"></p>
<p>收到数据后，浏览器再次响应：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/image-20210701130422238.png"></p>
<p>具体数据为：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/favicon.ico</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>localhost:12345</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">sec-ch-ua</span><span class="punctuation">: </span>&quot; Not;A Brand&quot;;v=&quot;99&quot;, &quot;Microsoft Edge&quot;;v=&quot;91&quot;, &quot;Chromium&quot;;v=&quot;91&quot;</span><br><span class="line"><span class="attribute">sec-ch-ua-mobile</span><span class="punctuation">: </span>?0</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36 Edg/91.0.864.59</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8</span><br><span class="line"><span class="attribute">Sec-Fetch-Site</span><span class="punctuation">: </span>same-origin</span><br><span class="line"><span class="attribute">Sec-Fetch-Mode</span><span class="punctuation">: </span>no-cors</span><br><span class="line"><span class="attribute">Sec-Fetch-Dest</span><span class="punctuation">: </span>image</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://localhost:12345/</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, br</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>wp-settings-time-1=1612349861; wp-settings-1=mfold%3Do</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>学习总结</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>linux下开发遇难</title>
    <url>/2021/06/linux%E4%B8%8B%E5%BC%80%E5%8F%91%E9%81%87%E9%9A%BE/</url>
    <content><![CDATA[<h3 id="1-使用串口调试工具minicom"><a href="#1-使用串口调试工具minicom" class="headerlink" title="1.使用串口调试工具minicom"></a>1.使用串口调试工具minicom</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install minicom</span><br><span class="line"></span><br><span class="line"><span class="comment">#直接运行 minicom 错误，需要配置</span></span><br><span class="line">minicom -s</span><br><span class="line"><span class="comment">#选择 Serial port setup [enter]</span></span><br><span class="line"><span class="comment">#配置完成后，Save setup as dfl</span></span><br><span class="line"><span class="comment">#Exit from minicom</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#针对 Cannot write to /etc/minicom/minirc.dfl</span></span><br><span class="line">sudo su</span><br><span class="line"><span class="built_in">touch</span> /etc/minicom/minirc.dfl  </span><br><span class="line"><span class="built_in">chmod</span> 777 /etc/minicom/minirc.dfl</span><br><span class="line"><span class="comment">#以上后，重新保存配置文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#minicom -s 配置波特率等</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看需要使用的端口</span></span><br><span class="line">sudo <span class="built_in">cat</span> /proc/tty/driver/serial</span><br><span class="line"><span class="comment">#或</span></span><br><span class="line">dmesg | grep <span class="built_in">tty</span></span><br></pre></td></tr></table></figure>

<h3 id="2-安装软件提示空间不足"><a href="#2-安装软件提示空间不足" class="headerlink" title="2.安装软件提示空间不足"></a>2.安装软件提示空间不足</h3><p><font color=red>提示信息：</font><code>E: 您在 /var/cache/apt/archives/ 上没有足够的可用空间。</code></p>
<ul>
<li><p>清除自动安装单不再使用的过期安装包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get autoremove</span><br></pre></td></tr></table></figure>
</li>
<li><p>清除所有已下载的安装包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get clean</span><br></pre></td></tr></table></figure>
</li>
<li><p>在某个空间大的分区建立一个目录，然后把 &#x2F;var&#x2F;cache&#x2F;apt&#x2F;archives 换成指向那个目录的软链接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p <span class="string">&quot;<span class="variable">$HOME</span>/debs/partial&quot;</span></span><br><span class="line">sudo <span class="built_in">rm</span> -rf /var/cache/apt/archives</span><br><span class="line">sudo <span class="built_in">ln</span> -s <span class="string">&quot;<span class="variable">$HOME</span>/debs&quot;</span> /varcache/apt/archives</span><br></pre></td></tr></table></figure>

</li>
<li><p>扩展磁盘空间</p>
<p>1、关闭虚拟机，扩展磁盘容量</p>
<p>2、打开虚拟机，划分分区</p>
<p>3、安装软件 gparted，<code>sudo apt-get install gparted</code>，命令 <code>sudo swapoff -a</code> 关闭交换分区，然后软件调整分区大小，应用，最后 <code>df -h</code>命令查看划分情况，使用 <code>sudo swapon /dev/xx</code> 开启交换分区，其中 ”xx“ 是交换分区名。</p>
<p>4、推荐阅读<a href="https://blog.csdn.net/daemon_2017/article/details/80660372">VMware虚拟机扩展Ubuntu系统磁盘空间_daemon_2017的博客-CSDN博客_ubuntu虚拟机扩展磁盘空间</a></p>
</li>
</ul>
<h3 id="3-安装包删除"><a href="#3-安装包删除" class="headerlink" title="3.安装包删除"></a>3.安装包删除</h3><p>ubuntu软件桌面链接在 &#x2F;usr&#x2F;share&#x2F;applications 目录下，一些通过下载安装包手动安装的软件，卸载时在删除了安装目录后，在该文件下删除 .desktop 文件</p>
<h3 id="4-网卡突然无法启用"><a href="#4-网卡突然无法启用" class="headerlink" title="4.网卡突然无法启用"></a>4.网卡突然无法启用</h3><p>网卡无法启用，<code>sudo service network-manager restart</code> 无用，输入 <code>ifconfig</code> 没有静态 IP。</p>
<p><a href="https://blog.csdn.net/weixin_39948381/article/details/98867003">解决ubuntu无法连接网络问题_daotian-CSDN博客_ubuntu网络不通</a>：</p>
<pre><code>1、关掉网络：`sudo service network-manager stop` 或者  `/etc/init.d/networking stop` ；

2、删除文件：`sudo rm /var/lib/NetworkManager/NetworkManager.state`

3、重启网络：`sudo service network-manager start 或者 /etc/init.d/networking start`；

4、再次输入：`ifconfig`，静态 ip 出现，同时网络可用了。
</code></pre>
<h3 id="5-permission-denied"><a href="#5-permission-denied" class="headerlink" title="5.permission denied"></a>5.permission denied</h3><p>有时候使用 &#x2F;dev&#x2F;ttyUSB0 等外设，或者访问、修改系统文件，需要获得使用权限。</p>
<ul>
<li>临时修改：<code>sudo chmod 777 /dev/ttyUSB0</code></li>
<li>永久修改：<code>sudo usermod -aG dialout xxx</code>，其中 xxx 为用户名（该方法未测试）</li>
</ul>
<h3 id="6-rdesktop-远程登录-windows"><a href="#6-rdesktop-远程登录-windows" class="headerlink" title="6.rdesktop 远程登录 windows"></a>6.rdesktop 远程登录 windows</h3><p>报错：</p>
<p><em>Failed to initialize NLA, do you have correct Kerberos TGT initialized ?</em></p>
<p>修改 windows 系统远程连接设置</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/image-20210820113554850.png" alt="image-20210820113554850"></p>
]]></content>
      <categories>
        <category>学习总结</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>gcc动态链接库</title>
    <url>/2021/09/gcc%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93/</url>
    <content><![CDATA[<h3 id="一、动态链接库源文件示例"><a href="#一、动态链接库源文件示例" class="headerlink" title="一、动态链接库源文件示例"></a>一、动态链接库源文件示例</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//my.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __my__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __my__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__cplusplus)</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__cplusplus)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//my.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;my.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b?a:b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二、生成动态链接库"><a href="#二、生成动态链接库" class="headerlink" title="二、生成动态链接库"></a>二、生成动态链接库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -shared -fPIC my.c -o libmy.so </span><br></pre></td></tr></table></figure>

<h3 id="三、使用动态链接库示例"><a href="#三、使用动态链接库示例" class="headerlink" title="三、使用动态链接库示例"></a>三、使用动态链接库示例</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;my.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\r\n&quot;</span>,max(<span class="number">1</span>,<span class="number">100</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="四、动态链接库编译选项"><a href="#四、动态链接库编译选项" class="headerlink" title="四、动态链接库编译选项"></a>四、动态链接库编译选项</h3><p>使用动态链接库，需要设置动态库的搜索路径，先后顺序是：</p>
<p>　　<strong>1.编译目标代码时指定的动态库搜索路径;</strong></p>
<p>　　<strong>2.环境变量LD_LIBRARY_PATH指定的动态库搜索路径；</strong> </p>
<p>　　<strong>3.配置文件&#x2F;etc&#x2F;ld.so.conf中指定的动态库搜索路径；</strong></p>
<p>　　<strong>4.默认的动态库搜索路径&#x2F;lib&#x2F;usr&#x2F;lib。</strong></p>
<p>因此有4种方法，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1</span></span><br><span class="line">gcc main.c -o main -L. -lmy -Wl,-rpath=&#x27;.&#x27;  #&#x27;.&#x27;指当前目录</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">或者</span></span><br><span class="line">gcc main.c -o main -L. -lmy -Wl,-rpath,-Wl,&#x27;.&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2</span></span><br><span class="line">export LD_LIBRARY_PATH=.  #当前目录</span><br><span class="line">gcc main.c -o main -lmy</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>对于方法3，查看虚拟机，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ly@qzwjer:luatest$ cat /etc/ld.so.conf</span><br><span class="line">include /etc/ld.so.conf.d/*.conf</span><br><span class="line"></span><br><span class="line">ly@qzwjer:luatest$ ls /etc/ld.so.conf.d</span><br><span class="line">fakeroot-x86_64-linux-gnu.conf  libc.conf  vmware-tools-libraries.conf  x86_64-linux-gnu.conf</span><br><span class="line">ly@qzwjer:luatest$ cat /etc/ld.so.conf.d/libc.conf </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">libc default configuration</span></span><br><span class="line">/usr/local/lib</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>因此可以在 <code>/etc/ld.so.conf.d/</code> 目录下建立自己的 conf 文件，或在 libc.conf 中，加入动态链接库的目录。</p>
<p>方法4不需赘言。</p>
<h3 id="五、ldd查看使用的共享库"><a href="#五、ldd查看使用的共享库" class="headerlink" title="五、ldd查看使用的共享库"></a>五、ldd查看使用的共享库</h3><p>可以通过 ldd a 来看程序 a 使用的共享函数库。</p>
<h3 id="六、动态加载的函数库"><a href="#六、动态加载的函数库" class="headerlink" title="六、动态加载的函数库"></a>六、动态加载的函数库</h3><p>以下内容原文链接：<a href="https://blog.csdn.net/ithomer/article/details/7346146">https://blog.csdn.net/ithomer/article/details/7346146</a></p>
<p>动态加载的函数库Dynamically loaded (DL) libraries是一类函数库，它可以在程序运行过程中的任何时间加载。它们特别适合在函数中加载一些模块和plugin扩展模块的场合，因为它可以在当程序需要某个plugin模块时才动态的加载。例如，Pluggable Authentication Modules(PAM)系统就是用动态加载函数库来使得管理员可以配置和重新配置身份验证信息。</p>
<p>Linux系统下，DL函数库与其他函数库在格式上没有特殊的区别，我们前面提到过，它们创建的时候是标准的object格式。主要的区别就是这些函数库不是在程序链接的时候或者启动的时候加载，而是通过一个API来打开一个函数库，寻找符号表，处理错误和关闭函数库。通常C语言环境下，需要包含这个头文件。 </p>
<p>Linux中使用的函数和Solaris中一样，都是dlpoen（） API。当然不是所有的平台都使用同样的接口，例如HP-UX使用shl_load()机制，而Windows平台用另外的其他的调用接口。如果你的目的是使得你的代码有很强的移植性，你应该使用一些wrapping函数库，这样的wrapping函数库隐藏不同的平台的接口区别。一种方法是使用glibc函数库中的对动态加载模块的支持，它使用一些潜在的动态加载函数库界面使得它们可以夸平台使用。具体可以参考<a href="http://developer.gnome.org/doc/API/glib/glib-dynamic-loading-of-modules.html">http://developer.gnome.org/doc/API/glib/glib-dynamic-loading-of-modules.html</a>. 另外一个方法是使用libltdl，是GNU libtool的一部分，可以进一步参考CORBA相关资料。  </p>
<p>4.1. dlopen()<br>dlopen函数打开一个函数库然后为后面的使用做准备。C语言原形是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void * dlopen(const char *filename, int flag);</span><br></pre></td></tr></table></figure>
<p>如果文件名filename是以“&#x2F;”开头，也就是使用绝对路径，那么dlopne就直接使用它，而不去查找某些环境变量或者系统设置的函数库所在的目录了。否则dlopen（）就会按照下面的次序查找函数库文件：</p>
<ol>
<li><p>环境变量LD_LIBRARY指明的路径。</p>
</li>
<li><p>&#x2F;etc&#x2F;ld.so.cache中的函数库列表。</p>
</li>
<li><p>&#x2F;lib目录，然后&#x2F;usr&#x2F;lib。不过一些很老的a.out的loader则是采用相反的次序，也就是先查 &#x2F;usr&#x2F;lib，然后是&#x2F;lib。<br> dlopen()函数中，参数flag的值必须是RTLD_LAZY或者RTLD_NOW，RTLD_LAZY的意思是resolve undefined symbols as code from the dynamic library is executed，而RTLD_NOW的含义是resolve all undefined symbols before dlopen() returns and fail if this cannot be done’。<br> 如果有好几个函数库，它们之间有一些依赖关系的话，例如X依赖Y，那么你就要先加载那些被依赖的函数。例如先加载Y，然后加载X。</p>
<p> dlopen()函数的返回值是一个句柄，然后后面的函数就通过使用这个句柄来做进一步的操作。如果打开失败dlopen()就返回一个NULL。如果一个函数库被多次打开，它会返回同样的句柄。<br> 如果一个函数库里面有一个输出的函数名字为_init,那么_init就会在dlopen（）这个函数返回前被执行。我们可以利用这个函数在我的函数库里面做一些初始化的工作。我们后面会继续讨论这个问题的。</p>
</li>
</ol>
<p>4.2. dlerror()</p>
<p>通过调用dlerror()函数，我们可以获得最后一次调用dlopen()，dlsym()，或者dlclose（）的错误信息。 </p>
<p>4.3. dlsym()</p>
<p>如果你加载了一个DL函数库而不去使用当然是不可能的了，使用一个DL函数库的最主要的一个函数就是dlsym()，这个函数在一个已经打开的函数库里面查找给定的符号。这个函数如下定义：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void * dlsym(void *handle, char *symbol);</span><br></pre></td></tr></table></figure>
<p>函数中的参数handle就是由dlopen打开后返回的句柄，symbol是一个以NIL结尾的字符串。如果dlsym()函数没有找到需要查找的symbol，则返回NULL。如果你知道某个symbol的值不可能是NULL或者0，那么就很好，你就可以根据这个返回结果判断查找的symbol是否存在了；不过，如果某个symbol的值就是NULL，那么这个判断就有问题了。标准的判断方法是先调用dlerror()，清除以前可能存在的错误，然后调用dlsym（）来访问一个symbol，然后再调用dlerror（）来判断是否出现了错误。一个典型的过程如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dlerror();		/*clear error code */</span><br><span class="line">s = (actual_type)dlsym(handle, symbol_being_searched_for);</span><br><span class="line">if((error = dlerror()) != NULL)&#123;</span><br><span class="line">/* handle error, the symbol wasn&#x27;t found */</span><br><span class="line">&#125; else &#123;</span><br><span class="line">/* symbol found, its value is in s */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4.4. dlclose()</p>
<p>dlopen()函数的反过程就是dlclose（）函数，dlclose（）函数用力关闭一个DL函数库。Dl函数库维持一个资源利用的计数器，当调用dlclose的时候，就把这个计数器的计数减一，如果计数器为0，则真正的释放掉。真正释放的时候，如果函数库里面有_fini()这个函数，则自动调用_ fini（）这个函数，做一些必要的处理。Dlclose（）返回0表示成功，其他非0值表示错误。</p>
<p>4.5. DL Library Example</p>
<p>下面是一个例子。例子中调入math函数库，然后打印2.0的余弦函数值。例子中每次都检查是否出错。应该是个不错的范例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int main(int argc, char *argv)&#123;</span><br><span class="line">		void *handle;</span><br><span class="line">		char *error;</span><br><span class="line">		</span><br><span class="line">		double (*cosine )(double);</span><br><span class="line">		handle = dlopen(&quot;/lib/libm.so.6&quot;, RTLD_LAZY);</span><br><span class="line">		if(!handle)&#123;</span><br><span class="line">			fputs(dlerror(), stderr);</span><br><span class="line">			 exit(1);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		cosine = dlsym(handle, &quot;cos&quot;);</span><br><span class="line">		if((error = dlerror()) != NULL)&#123;</span><br><span class="line">			fputs(error, stderr);</span><br><span class="line">			exit(1);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		printf(&quot;%f&quot;, (*cosine)(2, 0));</span><br><span class="line">		</span><br><span class="line">		dlclose(handle);</span><br><span class="line">		</span><br><span class="line">		return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果这个程序名字叫foo.c,那么用下面的命令来编译：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -o foo foo.c –ldl</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习总结</category>
      </categories>
      <tags>
        <tag>CC++</tag>
        <tag>动态链接库</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx学习</title>
    <url>/2022/02/nginx%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p><strong>1.nginx反向代理后，css、js、jpg等资源加载不出来</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user nobody;</span><br><span class="line">worker_processes 4;</span><br><span class="line">events&#123;</span><br><span class="line">        worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line">http&#123;</span><br><span class="line">        upstream xd-project&#123;</span><br><span class="line">                server 47.52.68.xx:8080;</span><br><span class="line">                server 45.40.205.xx;</span><br><span class="line">        &#125;</span><br><span class="line">        server&#123;</span><br><span class="line">                listen 80;</span><br><span class="line">                location / &#123;</span><br><span class="line">                        proxy_pass http://xd-project;</span><br><span class="line"> </span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">                location ~ .* &#123;</span><br><span class="line">                        proxy_pass http://xd-project;</span><br><span class="line">                        proxy_set_header Host $http_host;</span><br><span class="line">                        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">                        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2.nginx代理hexo博客</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 在服务器端，</span><br><span class="line">	a. 在用户目录下创建git仓库，假设目录为 /root/blog，git初始化命令，git init blog.git</span><br><span class="line">	b. 在blog.git/hook目录下新增文件 post-receive，内容如下</span><br><span class="line">		#!/bin/bash</span><br><span class="line">		git --work-tree=/var/www/blog --git-dir=/root/blog/qzwjer.git checkout -f</span><br><span class="line">	c. 将post-receive赋予访问和运行权限</span><br><span class="line">	d. 创建博客访问目录，在 /var/www 下创建 blog，此目录将为博客页面目录</span><br><span class="line">	e. 修改nginx配置文件，在/etc/nginx/sites-avaliable/default，增加location匹配项：</span><br><span class="line">		location ^~ /blog &#123;</span><br><span class="line">			root /var/www/;</span><br><span class="line">		&#125;</span><br><span class="line">	f. nginx -s reload</span><br><span class="line"></span><br><span class="line">2. 在本地，</span><br><span class="line">	a. 将ssh公钥添加到服务器，ssh公钥在.ssh目录下，如果没有则生成</span><br><span class="line">		ssh-keygen -t rsa //生成</span><br><span class="line">		ssh-copy-id -i .ssh/id_rsa.pub root@118.xxx.xxx.xxx</span><br><span class="line">	b. 上传公钥后，可直接 ssh root@118.xxx.xxx.xxx 登录服务器，或在.ssh/config 文件中添加</span><br><span class="line">		Host abc</span><br><span class="line">			HostName 118.xxx.xxx.xxx</span><br><span class="line">			User root</span><br><span class="line">		然后 ssh abc 即可登录</span><br><span class="line">	c. git clone root@118.xxx.xxx.xxx:/root/blog/blog.git (不用)</span><br><span class="line">	d. 修改hexo博客 _config.yml 文件，在deploy repo下添加服务器git库，</span><br><span class="line">		- root@118.xxx.xxx.xxx:/root/blog/blog.git</span><br><span class="line">	e. 在_config.yml文件中url行下添加一行</span><br><span class="line">		root: /blog</span><br><span class="line">		此行为所有资源文件添加根路径blog，匹配服务器nginx的配置路径</span><br><span class="line">	f. hexo clean, hexo g, hexo d</span><br></pre></td></tr></table></figure>

<p><strong>3.nginx设置访问服务器目录</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 在服务器上添加一个目录，用于nginx访问。（/root/doc)</span><br><span class="line">2. 配置 /etc/nginx/sites-avaliable/default，增加location匹配：</span><br><span class="line">	location ^~ /doc &#123;</span><br><span class="line">        alias /root/doc;</span><br><span class="line">        autoindex on;</span><br><span class="line">        autoindex_exact_size off;</span><br><span class="line">        autoindex_localtime on;</span><br><span class="line">        charset utf-8,gbk;</span><br><span class="line">	&#125;</span><br><span class="line">3. 在设置完后，发现nginx 403 forbidden，经过一番查找后，修改 /etc/nginx/nginx.conf文件，</span><br><span class="line">	将 user www-data; 改为 user root;</span><br><span class="line">	后即可正常访问</span><br><span class="line">4. 发现markdown文件点击后直接下载，而不能预览，在/etc/nginx/mime.types 文件中未发现md，将其加到txt一行。</span><br></pre></td></tr></table></figure>

<p><strong>4.nginx查看错误日志</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx的错误日志路径在 /etc/nginx/nginx.conf文件中，</span><br><span class="line">	error_log /var/log/nginx/error.log</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习总结</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu下jlink烧录stm32程序</title>
    <url>/2021/09/ubuntu%E4%B8%8Bjlink%E7%83%A7%E5%BD%95stm32%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<h3 id="一、下载JLink驱动"><a href="#一、下载JLink驱动" class="headerlink" title="一、下载JLink驱动"></a>一、下载JLink驱动</h3><p>下载地址：<a href="https://www.segger.com/downloads/jlink/%EF%BC%8Clinux%EF%BC%8C64-bit">https://www.segger.com/downloads/jlink/，linux，64-bit</a> DEB Installer（不翻墙下载不了）</p>
<p>链接：<a href="https://pan.baidu.com/s/1a5lfXL_wiJICMnQLKvRhRg">https://pan.baidu.com/s/1a5lfXL_wiJICMnQLKvRhRg</a><br>提取码：bc1w</p>
<p><code>sudo dpkg -i xx.deb</code>安装</p>
<h3 id="二、烧录程序"><a href="#二、烧录程序" class="headerlink" title="二、烧录程序"></a>二、烧录程序</h3><p><code>JLinkExe</code>进入 jlink 界面，在使用之前，确保安装了 libusb 驱动。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">qzwjer@abcd:test$ JLinkExe</span><br><span class="line">SEGGER J-Link Commander V7.54c (Compiled Sep 20 2021 13:59:37)</span><br><span class="line">DLL version V7.54c, compiled Sep 20 2021 13:59:21</span><br><span class="line"></span><br><span class="line">Connecting to J-Link via USB...O.K.</span><br><span class="line">Firmware: J-Link V9 compiled May  7 2021 16:26:12</span><br><span class="line">Hardware version: V9.20</span><br><span class="line">S/N: -1</span><br><span class="line">License(s): RDI, FlashBP, FlashDL, JFlash, GDB</span><br><span class="line">VTref=3.330V</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Type &quot;connect&quot; to establish a target connection, &#x27;?&#x27; for help</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">J-Link&gt; </span><span class="language-bash">connect /</span></span><br><span class="line">Please specify device / core. &lt;Default&gt;: STM32F103C8</span><br><span class="line">Type &#x27;?&#x27; for selection dialog</span><br><span class="line"><span class="meta prompt_">Device&gt; </span><span class="language-bash">STM32F103C8</span></span><br><span class="line">Please specify target interface:</span><br><span class="line">  J) JTAG (Default)</span><br><span class="line">  S) SWD</span><br><span class="line">  T) cJTAG</span><br><span class="line"><span class="meta prompt_">TIF&gt; </span><span class="language-bash">S</span></span><br><span class="line">Specify target interface speed [kHz]. &lt;Default&gt;: 4000 kHz</span><br><span class="line"><span class="meta prompt_">Speed&gt; </span><span class="language-bash">2 mHz</span></span><br><span class="line">Device &quot;STM32F103C8&quot; selected.</span><br><span class="line"></span><br><span class="line">Connecting to target via SWD</span><br><span class="line">InitTarget() start</span><br><span class="line">InitTarget() end</span><br><span class="line">Found SW-DP with ID 0x1BA01477</span><br><span class="line">DPIDR: 0x1BA01477</span><br><span class="line">Scanning AP map to find all available APs</span><br><span class="line">AP[1]: Stopped AP scan as end of AP map has been reached</span><br><span class="line">AP[0]: AHB-AP (IDR: 0x14770011)</span><br><span class="line">Iterating through AP map to find AHB-AP to use</span><br><span class="line">AP[0]: Core found</span><br><span class="line">AP[0]: AHB-AP ROM base: 0xE00FF000</span><br><span class="line">CPUID register: 0x411FC231. Implementer code: 0x41 (ARM)</span><br><span class="line">Found Cortex-M3 r1p1, Little endian.</span><br><span class="line">FPUnit: 6 code (BP) slots and 2 literal slots</span><br><span class="line">CoreSight components:</span><br><span class="line">ROMTbl[0] @ E00FF000</span><br><span class="line">[0][0]: E000E000 CID B105E00D PID 001BB000 SCS</span><br><span class="line">[0][1]: E0001000 CID B105E00D PID 001BB002 DWT</span><br><span class="line">[0][2]: E0002000 CID B105E00D PID 000BB003 FPB</span><br><span class="line">[0][3]: E0000000 CID B105E00D PID 001BB001 ITM</span><br><span class="line">[0][4]: E0040000 CID B105900D PID 001BB923 TPIU-Lite</span><br><span class="line">Cortex-M3 identified.</span><br><span class="line"><span class="meta prompt_">J-Link&gt; </span><span class="language-bash">/xxx/xxx/xxx/xxx/dfs.bin,0x8000000 <span class="comment">#全路径，起始地址</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="三、JLink常用命令"><a href="#三、JLink常用命令" class="headerlink" title="三、JLink常用命令"></a>三、JLink常用命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">usb			连接目标板  </span><br><span class="line">r			重启目标板  </span><br><span class="line">halt	 	停止cpu运行的程序  </span><br><span class="line">loadbin		加载可执行的二进制文件  </span><br><span class="line">g			跳到代码段地址执行 </span><br><span class="line">s			单步执行（调试用）  </span><br><span class="line">setpc		设置pc寄存器的值（调试用） </span><br><span class="line">setbp		设置断点  </span><br><span class="line">Regs		读寄存器组织，该命令会把所有的寄存器显示出来  </span><br><span class="line">wreg		写寄存器  </span><br><span class="line">mem			读内存  </span><br><span class="line">w4			写内存  </span><br><span class="line">power off mmu			关闭mmu，这个对于裸板调试很重要  </span><br><span class="line">w4 cpsr,0x0000001f		切换到系统模式  </span><br><span class="line">speed					设置jtag的传输速率  </span><br><span class="line">rce 0,c0,c0,0			设置cp15寄存器的第1个寄存器为0</span><br><span class="line">q						Quit（退出）</span><br><span class="line">qc						Close JLink connection andquit（关闭jlink连接，并退出）</span><br><span class="line">r						Reset target（重启目标）</span><br></pre></td></tr></table></figure>

<h3 id="四、编译工程"><a href="#四、编译工程" class="headerlink" title="四、编译工程"></a>四、编译工程</h3><h4 id="1-安装arm编译工具链"><a href="#1-安装arm编译工具链" class="headerlink" title="1.安装arm编译工具链"></a>1.安装arm编译工具链</h4><p>下载 gcc-arm-none-eabi-10.3-2021.07-x86_64-linux.tar.bz2 ，解压，设置环境变量</p>
<h4 id="2-建立工程"><a href="#2-建立工程" class="headerlink" title="2.建立工程"></a>2.建立工程</h4><p>参考链接：<a href="https://mculover666.blog.csdn.net/article/details/84888539">https://mculover666.blog.csdn.net/article/details/84888539</a></p>
<p>一个裸机工程，建立工程文件夹，包含三个文件：</p>
<ul>
<li>startup_stm32f10x_hd.s：从固件库中拷贝，注意不是<code>arm</code>文件夹下的，因为<code>truestudio</code>使用的是gcc编译器，所以我们选择<code>truestudio</code>文件夹下的启动文件；</li>
<li>stm32f10x.h：空文件；</li>
<li>main.c：主程序</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f10x.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">/* 开启GPIOB时钟 */</span></span><br><span class="line">	*(<span class="type">unsigned</span> <span class="type">int</span>*)(<span class="number">0x40021000</span>+<span class="number">0x18</span>) |= <span class="number">1</span>&lt;&lt;<span class="number">3</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* 配置PB0为推挽输出 */</span></span><br><span class="line">	*(<span class="type">unsigned</span> <span class="type">int</span>*)(<span class="number">0x40010c00</span>+<span class="number">0x00</span>) |= <span class="number">1</span>&lt;&lt;(<span class="number">4</span>*<span class="number">0</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* PB0输出低电平，点亮绿色LED */</span></span><br><span class="line">	*(<span class="type">unsigned</span> <span class="type">int</span>*)(<span class="number">0x40010c00</span>+<span class="number">0x0c</span>) &amp;= ~(<span class="number">1</span>&lt;&lt;<span class="number">0</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SystemInit</span><span class="params">(<span class="type">void</span>)</span>	<span class="comment">//startup_stm32f10x_hd.s文件会调用</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>makefile示例</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">TARGET=test</span><br><span class="line">CC=arm-none-eabi-gcc</span><br><span class="line">OBJCOPY=arm-none-eabi-objcopy</span><br><span class="line">RM=rm -f</span><br><span class="line">CORE=3</span><br><span class="line">CPUFLAGS=-mthumb -mcpu=cortex-m<span class="variable">$(CORE)</span></span><br><span class="line">LDFLAGS = -T stm32_flash.ld -Wl,-cref,-u,Reset_Handler -Wl,-Map=<span class="variable">$(TARGET)</span>.map -Wl,--gc-sections -Wl,--defsym=malloc_getpagesize_P=0x80 -Wl,--start-group -lc -lm -Wl,--end-group</span><br><span class="line">CFLAGS=-g -o</span><br><span class="line"></span><br><span class="line"><span class="variable">$(TARGET)</span>:startup_stm32f10x_md.o main.o</span><br><span class="line">	<span class="variable">$(CC)</span> <span class="variable">$^</span> <span class="variable">$(CPUFLAGS)</span> <span class="variable">$(LDFLAGS)</span> <span class="variable">$(CFLAGS)</span> <span class="variable">$(TARGET)</span>.elf</span><br><span class="line"></span><br><span class="line"><span class="section">startup_stm32f10x_md.o:startup_stm32f10x_md.s</span></span><br><span class="line">	<span class="variable">$(CC)</span> -c <span class="variable">$^</span> <span class="variable">$(CPUFLAGS)</span> <span class="variable">$(CFLAGS)</span> <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="section">main.o:main.c</span></span><br><span class="line">	<span class="variable">$(CC)</span> -c <span class="variable">$^</span> <span class="variable">$(CPUFLAGS)</span> <span class="variable">$(CFLAGS)</span> <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="section">bin:</span></span><br><span class="line">	<span class="variable">$(OBJCOPY)</span> <span class="variable">$(TARGET)</span>.elf <span class="variable">$(TARGET)</span>.bin</span><br><span class="line"></span><br><span class="line"><span class="section">hex:</span></span><br><span class="line">	<span class="variable">$(OBJCOPY)</span> <span class="variable">$(TARGET)</span>.elf -Oihex <span class="variable">$(TARGET)</span>.hex</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	<span class="variable">$(RM)</span> *.o <span class="variable">$(TARGET)</span>.*</span><br><span class="line"></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>学习总结</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>vim常用</title>
    <url>/2021/08/vim%E5%B8%B8%E7%94%A8/</url>
    <content><![CDATA[<h3 id="一、单个命令"><a href="#一、单个命令" class="headerlink" title="一、单个命令"></a>一、单个命令</h3><table>
<thead>
<tr>
<th>命令</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>n</td>
<td>重复，用于搜索，跳转等</td>
</tr>
<tr>
<td>N</td>
<td>同上，方向相反</td>
</tr>
<tr>
<td>;</td>
<td>重复，用于行内跳转指令 f&#x2F;t&#x2F;F&#x2F;T</td>
</tr>
<tr>
<td>,</td>
<td>同上，方向相反</td>
</tr>
<tr>
<td>s</td>
<td>替换，&#x3D;&#x3D;前加%指全文件替换&#x3D;&#x3D;</td>
</tr>
<tr>
<td>:Ex</td>
<td>返回目录树，  vim 从目录中进入文件，回到目录时用此命令</td>
</tr>
<tr>
<td>R</td>
<td>从光标所在处开始替换，&#x3D;&#x3D;按Esc键结束&#x3D;&#x3D;</td>
</tr>
<tr>
<td>ctrl+n</td>
<td>单词补全（向下查找）</td>
</tr>
<tr>
<td>ctrl+p</td>
<td>单词补全（向上查找）</td>
</tr>
<tr>
<td>cw</td>
<td>删除光标开始的一个词，并进入插入模式（改词时使用）</td>
</tr>
<tr>
<td>ciw</td>
<td>删除光标处的一个词，并进入插入模式（光标不必在词开头）</td>
</tr>
<tr>
<td>yiw</td>
<td>复制光标处的一个词，光标不必在词开头</td>
</tr>
<tr>
<td>viw</td>
<td>选中光标处的一个词，光标不必在词开头</td>
</tr>
<tr>
<td>e</td>
<td>移动到当前单词的结尾（如果光标不在字符上，则移动到下一单词的结尾）</td>
</tr>
<tr>
<td>ge</td>
<td>移动到上一单词的结尾</td>
</tr>
<tr>
<td>w</td>
<td>移动到下一单词的开头</td>
</tr>
<tr>
<td>b</td>
<td>移动到当前单词的开头（如果光标不在字符上，则移动到上一单词的开头）</td>
</tr>
<tr>
<td>[[</td>
<td>跳转到代码块的开头去（但要求代码块中”&#x3D;&#x3D;{&#x3D;&#x3D;”必须独占一行</td>
</tr>
<tr>
<td>gD</td>
<td>跳转到局部变量的定义处</td>
</tr>
<tr>
<td>‘’</td>
<td>跳转到光标上次停靠的地方, 是两个’, 而不是一个”</td>
</tr>
</tbody></table>
<h3 id="二、组合命令"><a href="#二、组合命令" class="headerlink" title="二、组合命令"></a>二、组合命令</h3><table>
<thead>
<tr>
<th>操作</th>
<th>命令</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>复制源单词，然后替换目标单词</td>
<td>ye 源单词<br>vep 目标单词</td>
<td>利用视图模式替换单词</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="三、其它"><a href="#三、其它" class="headerlink" title="三、其它"></a>三、其它</h3><hr>
<p>全局查找，vim自带匹配工具——vimgrep。</p>
<p>vimgrep两种使用方式，可以正则比配，也可以直接匹配。</p>
<p>正则匹配模式放在**&#x2F;&#x2F;<strong>之间，命令格式：</strong>:vim [grep][!] &#x2F;[pattern]&#x2F;[g][j] {file}**</p>
<p>例子：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">vim</span> /<span class="keyword">function</span> <span class="title">demo</span>/ *.c         在当前目录的.c文件中，搜索function demo</span><br><span class="line">:<span class="keyword">vim</span> /<span class="keyword">function</span> <span class="title">demo</span>/ **/*.c    在任意目录的.c文件中，搜索function demo</span><br><span class="line">:<span class="keyword">vim</span> /<span class="keyword">function</span> <span class="title">demo</span>/ **/*.&#123;h,c&#125;  在任意目录的.c和.h文件中，搜索function demo</span><br><span class="line">:<span class="keyword">vim</span> /\cfunction demo/ **/*.<span class="keyword">c</span>     使用\<span class="keyword">c</span>，不区分大小写</span><br><span class="line">:<span class="keyword">vim</span> /\Cfunction demo/ **/*.<span class="keyword">c</span>    使用\C，区分大小写</span><br><span class="line">:<span class="keyword">vim</span> /<span class="keyword">function</span> <span class="title">demo</span>/j *.c        只更新quickfix，不跳转到第一个搜索结果</span><br><span class="line">:<span class="keyword">vim</span> /<span class="keyword">function</span> <span class="title">demo</span>/g *.c        一行中若有多个匹配，每个都要单独显示一行</span><br></pre></td></tr></table></figure>

<p>在vim普通模式中：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">vim</span> /main/<span class="keyword">j</span> *.<span class="keyword">c</span> | <span class="keyword">copen</span></span><br></pre></td></tr></table></figure>

<p>以上命令在当前目录下的所有 .c文件中查找 main，其中 copen 是打开 quickfix 列表，也可以是</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:<span class="keyword">vim</span> /main/<span class="keyword">j</span> *.<span class="keyword">c</span></span><br><span class="line">:<span class="keyword">cw</span>   #或<span class="keyword">copen</span></span><br></pre></td></tr></table></figure>

<p>quickfix列表通过 cw或copen打开，ccl（cclose）关闭，cn下一个，cp上一个。</p>
<p>列表通过 Ctrl-w H移动到左侧，Ctrl-w w切换，或者Ctrl-w [hjkl]</p>
<hr>
]]></content>
      <categories>
        <category>学习总结</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode上配置Qt环境</title>
    <url>/2022/05/vscode%E4%B8%8A%E9%85%8D%E7%BD%AEQt%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>参考博客：</p>
<p>Qt+VSCode开发环境搭建：<a href="https://blog.csdn.net/cttckl/article/details/123533340">https://blog.csdn.net/cttckl/article/details/123533340</a></p>
<p>cmake+VSCode编译与断点调试：<a href="https://blog.csdn.net/weixin_44445507/article/details/117436661">https://blog.csdn.net/weixin_44445507/article/details/117436661</a></p>
<hr>
<p>按照第一篇，</p>
<p>首先：安装Qt和VSCode，这个不需多讲</p>
<p>第二：将Qt的编译工具加入系统环境变量，三个：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">APPS/Qt/Tools/CMake_64/bin             ---cmake</span><br><span class="line"></span><br><span class="line">APPS/Qt/5.15.2/mingw81_64/bin          ---Qt软件，这个无所谓</span><br><span class="line"></span><br><span class="line">APPS/Qt/Tools/mingw810_64/bin          ---gcc</span><br></pre></td></tr></table></figure>

<p>第三：VSCode安装插件四个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C/C++</span><br><span class="line">CMake</span><br><span class="line">CMake Tools</span><br><span class="line">Qt tools</span><br></pre></td></tr></table></figure>

<hr>
<p>测试：</p>
<p>Qt创建工程，编译工具选择cmake</p>
<p>VSCode打开文件夹，在底部选择gcc工具，选Qt的，如下图</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/image-20220411162959041.png" alt="image-20220411162959041"></p>
<p>点击Build即可生成</p>
<p>点击run（底部三角形），发现运行不正常，打印信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[cpptools] The build configurations generated do not contain the active build configuration. Using &quot;&quot; for CMAKE_BUILD_TYPE instead of &quot;Debug&quot; to ensure that ...</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/image-20220411163159432.png" alt="image-20220411163159432"></p>
<p>第二篇博客提到，在CMakeLists.txt中添加定义</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET(CMAKE_BUILD_TYPE &quot;Debug&quot;)</span><br></pre></td></tr></table></figure>

<p>重新生成后正常运行。</p>
]]></content>
      <categories>
        <category>学习总结</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>vim配置</title>
    <url>/2021/08/vim%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="1-gvim"><a href="#1-gvim" class="headerlink" title="1.gvim"></a>1.gvim</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:edit $vim/_vimrc</span><br></pre></td></tr></table></figure>

<p>在末尾加</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/image-20210805151848038.png" alt="image-20210805151848038"></p>
<p>禁止生成临时文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set noundofile</span><br><span class="line">set nobackup</span><br><span class="line">set noswapfile</span><br></pre></td></tr></table></figure>



<h3 id="2-vimwiki"><a href="#2-vimwiki" class="headerlink" title="2.vimwiki"></a>2.vimwiki</h3><p><a href="https://vimwiki.github.io/">Vimwiki by vimwiki</a></p>
<p>vimwiki的配置修改：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot; let g:vimwiki_list = [&#123;&#x27;path&#x27; : &#x27;/d/vimwiki/&#x27;, &#x27;path_html&#x27; : &#x27;/d/vimwiki/html/&#x27;, &#x27;auto_export&#x27; : 1, &#x27;nested_syntaxes&#x27;     : &#123; &#x27;vim&#x27; : &#x27;vim&#x27; &#125; &#125;]</span><br><span class="line">&quot; 生成markdown文件</span><br><span class="line">let g:vimwiki_list = [&#123;&#x27;path&#x27; : &#x27;/d/vimwiki/&#x27;, &#x27;path_html&#x27; : &#x27;/d/vimwiki/html/&#x27;, &#x27;auto_export&#x27; : 1, &#x27;syntax&#x27;:&#x27;markdown&#x27;,&#x27;ext&#x27;:&#x27;.md&#x27;&#125;]</span><br><span class="line"></span><br><span class="line">let g:vimwiki_use_mouse = 1</span><br><span class="line">&quot; let g:vimwiki_w32_dir_enc = cp936</span><br><span class="line">let g:vimwiki_dir_link = &#x27;index&#x27;</span><br><span class="line">let g:vimwiki_html_header_numbering = 0</span><br></pre></td></tr></table></figure>





<h3 id="3-vimrc"><a href="#3-vimrc" class="headerlink" title="3.vimrc"></a>3.vimrc</h3><p>vimrc 在哪？</p>
<p>1、输入 <code>:version</code> 即可找到。</p>
<p>2、输入 <code>:edit $vim/_vimrc</code> 可编辑。（$vim&#x2F;_vimrc 为 vimrc 的路径，可能不同，通过1查看）</p>
<h3 id="4-插件管理"><a href="#4-插件管理" class="headerlink" title="4.插件管理"></a>4.插件管理</h3><p>Vundle插件管理器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set nocompatible</span><br><span class="line">&quot;插件管理</span><br><span class="line">set rtp+=$VIM/vimfiles/bundle/Vundle.vim/   &quot;此处根据:version路径灵活配置</span><br><span class="line">call vundle#begin()</span><br><span class="line">&quot;let Vundle manage Vundle, required</span><br><span class="line">Plugin &#x27;VundleVim/Vundle.vim&#x27;  &quot;插件管理必须的</span><br><span class="line">&quot;my bundle plugin</span><br><span class="line">Plugin &#x27;scrooloose/nerdtree&#x27;        &quot;这两行</span><br><span class="line">Plugin &#x27;jistr/vim-nerdtree-tabs&#x27;</span><br><span class="line">Plugin &#x27;kien/ctrlp.vim&#x27;</span><br><span class="line"></span><br><span class="line">call vundle#end()</span><br><span class="line">filetype plugin indent on</span><br></pre></td></tr></table></figure>

<p>在<code>call vundle#begin()</code> 与 <code>call vundle#end()</code> 之间添加完插件后，需要在vim的命令行模式下安装，命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常用命令</span><br><span class="line">:PluginList       - 查看已经安装的插件</span><br><span class="line">:PluginInstall    - 安装插件</span><br><span class="line">:PluginUpdate     - 更新插件</span><br><span class="line">:PluginSearch     - 搜索插件，例如 :PluginSearch xml就能搜到xml相关的插件</span><br><span class="line">:PluginClean      - 删除插件，把安装插件对应行删除，然后执行这个命令即可</span><br><span class="line">:h vundle         - 获取帮助</span><br></pre></td></tr></table></figure>

<p>在使用<code>PluginInstall</code>时遇到一个奇葩的错误，插件vimwiki更新失败，查看日志，发现git的地址不对，地址本来是<code>[https://github.com/vimwiki/vimwiki]</code> ，但日志的地址变成了<code>[https://github.com/vimwiki/118]</code> ，一看才明白，在使用<code>PluginInstall</code>时，文件窗口被分割成了垂直的两个（类似使用<code>vsplit</code>），vimwiki的git地址也被分成了两行，第一行的结尾后面就是第二个窗口的第118行的行号，所以地址后面被改成了118……</p>
<p><strong>一些有用的插件</strong></p>
<ul>
<li><p>NERDTree目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;Nerdtree</span><br><span class="line">autocmd vimenter * NERDTree      &quot;打开vim自动打开目录&quot;</span><br><span class="line">map &lt;F2&gt; :NERDTreeMirror&lt;CR&gt;	&quot;按F2开启或关闭NERDTree目录&quot;</span><br><span class="line">map &lt;F2&gt; :NERDTreeToggle&lt;CR&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-常用配置"><a href="#5-常用配置" class="headerlink" title="5.常用配置"></a>5.常用配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot; 设置在查找时动态匹配</span><br><span class="line">set incsearch</span><br><span class="line"></span><br><span class="line">&quot; 设置搜索高亮显示  --不推荐</span><br><span class="line">set hlsearch</span><br><span class="line"></span><br><span class="line">&quot; PS1一般配置</span><br><span class="line">PS1=&quot;\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\W\033[01;32m\[\033[00m\]$ &quot;</span><br><span class="line">&quot; 其中颜色设置 [\033[01;32m\]，以[\033[00m\]结尾</span><br></pre></td></tr></table></figure>







<h3 id="6-示例文本"><a href="#6-示例文本" class="headerlink" title="6.示例文本"></a>6.示例文本</h3><p>来自 git bash 配置文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;</span><br><span class="line">&quot; Setting some decent VIM settings for programming</span><br><span class="line">&quot; This source file comes from git-for-windows build-extra repository (git-extra/vimrc)</span><br><span class="line"></span><br><span class="line">ru! defaults.vim                &quot; Use Enhanced Vim defaults</span><br><span class="line">set mouse=                      &quot; Reset the mouse setting from defaults</span><br><span class="line">aug vimStartup | au! | aug END  &quot; Revert last positioned jump, as it is defined below</span><br><span class="line">let g:skip_defaults_vim = 1     &quot; Do not source defaults.vim again (after loading this system vimrc)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">set nocompatible </span><br><span class="line">set rtp+=~/.vim/bundle/Vundle.vim</span><br><span class="line">call vundle#begin()</span><br><span class="line">&quot;call vundle#begin(&#x27;~/some/path/here&#x27;)</span><br><span class="line"></span><br><span class="line">Plugin &#x27;VundleVim/Vundle.vim&#x27;</span><br><span class="line"></span><br><span class="line">Plugin &#x27;vimwiki/vimwiki&#x27;</span><br><span class="line"></span><br><span class="line">call vundle#end()    </span><br><span class="line">filetype plugin indent on  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">set ai                          &quot; set auto-indenting on for programming</span><br><span class="line">set showmatch                   &quot; automatically show matching brackets. works like it does in bbedit.</span><br><span class="line">set vb                          &quot; turn on the &quot;visual bell&quot; - which is much quieter than the &quot;audio blink&quot;</span><br><span class="line">set laststatus=2                &quot; make the last line where the status is two lines deep so you can see status always</span><br><span class="line">set showmode                    &quot; show the current mode</span><br><span class="line">set clipboard=unnamed           &quot; set clipboard to unnamed to access the system clipboard under windows</span><br><span class="line">set wildmode=list:longest,longest:full   &quot; Better command line completion</span><br><span class="line"></span><br><span class="line">&quot; Show EOL type and last modified timestamp, right after the filename</span><br><span class="line">&quot; Set the statusline</span><br><span class="line">set statusline=%f               &quot; filename relative to current $PWD</span><br><span class="line">set statusline+=%h              &quot; help file flag</span><br><span class="line">set statusline+=%m              &quot; modified flag</span><br><span class="line">set statusline+=%r              &quot; readonly flag</span><br><span class="line">set statusline+=\ [%&#123;&amp;ff&#125;]      &quot; Fileformat [unix]/[dos] etc...</span><br><span class="line">set statusline+=\ (%&#123;strftime(\&quot;%H:%M\ %d/%m/%Y\&quot;,getftime(expand(\&quot;%:p\&quot;)))&#125;)  &quot; last modified timestamp</span><br><span class="line">set statusline+=%=              &quot; Rest: right align</span><br><span class="line">set statusline+=%l,%c%V         &quot; Position in buffer: linenumber, column, virtual column</span><br><span class="line">set statusline+=\ %P            &quot; Position in buffer: Percentage</span><br><span class="line"></span><br><span class="line">&quot; User define</span><br><span class="line">set autoindent</span><br><span class="line">set cindent</span><br><span class="line">set shiftwidth=4</span><br><span class="line">set softtabstop=4</span><br><span class="line">set ts=2</span><br><span class="line">set expandtab</span><br><span class="line">set number</span><br><span class="line">set mps+=&lt;:&gt;</span><br><span class="line">set guifont=Consolas:h10  #gvim设置字体，linux下可能不同</span><br><span class="line">nmap &lt;CR&gt; o&lt;ESC&gt;  #键盘映射，Enter键映射为 o + ESC</span><br><span class="line">syntax on</span><br><span class="line">filetype plugin on</span><br><span class="line">imap &#123;&lt;CR&gt; &#123;&lt;CR&gt;&#125;&lt;ESC&gt;O</span><br><span class="line">imap [ []&lt;ESC&gt;i</span><br><span class="line">imap ( ()&lt;ESC&gt;i</span><br><span class="line">&quot;设置跳出自动补全的括号</span><br><span class="line">func SkipPair()</span><br><span class="line">    if getline(&#x27;.&#x27;)[col(&#x27;.&#x27;) - 1] == &#x27;)&#x27; || getline(&#x27;.&#x27;)[col(&#x27;.&#x27;) - 1] == &#x27;]&#x27; || getline(&#x27;.&#x27;)[col(&#x27;.&#x27;) - 1] == &#x27;&quot;&#x27; || getline(&#x27;.&#x27;)[col(&#x27;.&#x27;) - 1] == &quot;&#x27;&quot; || getline(&#x27;.&#x27;)[col(&#x27;.&#x27;) - 1] == &#x27;&#125;&#x27; || getline(&#x27;.&#x27;)[col(&#x27;.&#x27;) - 1] == &#x27;&gt;&#x27;</span><br><span class="line">        return &quot;\&lt;ESC&gt;la&quot;</span><br><span class="line">    else</span><br><span class="line">        return &quot;\t&quot;</span><br><span class="line">    endif</span><br><span class="line">endfunc</span><br><span class="line">&quot; 将tab键绑定为跳出括号</span><br><span class="line">inoremap &lt;TAB&gt; &lt;c-r&gt;=SkipPair()&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">&quot; color</span><br><span class="line">hi MatchParen ctermbg=Red ctermfg=Yellow</span><br><span class="line">&quot;靠靠靠?  &quot;set cursorline</span><br><span class="line">  &quot;hi CursorLine   cterm=NONE ctermbg=darkblue guibg=darkred guifg=white</span><br><span class="line">&quot;靠靠靠?  &quot;set cursorcolumn</span><br><span class="line">  &quot;hi CursorColumn cterm=NONE ctermbg=darkblue  guibg=darkred guifg=white</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if &amp;term =~ &#x27;xterm-256color&#x27;    &quot; mintty identifies itself as xterm-compatible</span><br><span class="line">  if &amp;t_Co == 8</span><br><span class="line">    set t_Co = 256              &quot; Use at least 256 colors</span><br><span class="line">  endif</span><br><span class="line">  &quot; set termguicolors           &quot; Uncomment to allow truecolors on mintty</span><br><span class="line">endif</span><br><span class="line">&quot;------------------------------------------------------------------------------</span><br><span class="line">&quot; Only do this part when compiled with support for autocommands.</span><br><span class="line">if has(&quot;autocmd&quot;)</span><br><span class="line">    &quot; Set UTF-8 as the default encoding for commit messages</span><br><span class="line">    autocmd BufReadPre COMMIT_EDITMSG,MERGE_MSG,git-rebase-todo setlocal fileencodings=utf-8</span><br><span class="line"></span><br><span class="line">    &quot; Remember the positions in files with some git-specific exceptions&quot;</span><br><span class="line">    autocmd BufReadPost *</span><br><span class="line">      \ if line(&quot;&#x27;\&quot;&quot;) &gt; 0 &amp;&amp; line(&quot;&#x27;\&quot;&quot;) &lt;= line(&quot;$&quot;)</span><br><span class="line">      \           &amp;&amp; &amp;filetype !~# &#x27;commit\|gitrebase&#x27;</span><br><span class="line">      \           &amp;&amp; expand(&quot;%&quot;) !~ &quot;ADD_EDIT.patch&quot;</span><br><span class="line">      \           &amp;&amp; expand(&quot;%&quot;) !~ &quot;addp-hunk-edit.diff&quot; |</span><br><span class="line">      \   exe &quot;normal g`\&quot;&quot; |</span><br><span class="line">      \ endif</span><br><span class="line"></span><br><span class="line">      autocmd BufNewFile,BufRead *.patch set filetype=diff</span><br><span class="line"></span><br><span class="line">      autocmd Filetype diff</span><br><span class="line">      \ highlight WhiteSpaceEOL ctermbg=red |</span><br><span class="line">      \ match WhiteSpaceEOL /\(^+.*\)\@&lt;=\s\+$/</span><br><span class="line">endif &quot; has(&quot;autocmd&quot;)</span><br><span class="line"></span><br><span class="line">&quot; Set cursor shape and color</span><br><span class="line">if &amp;term =~ &quot;xterm&quot;</span><br><span class="line">    &quot; INSERT mode</span><br><span class="line">    let &amp;t_SI = &quot;\&lt;Esc&gt;[6 q&quot; . &quot;\&lt;Esc&gt;]12;blue\x7&quot;</span><br><span class="line">    &quot; REPLACE mode</span><br><span class="line">    let &amp;t_SR = &quot;\&lt;Esc&gt;[3 q&quot; . &quot;\&lt;Esc&gt;]12;black\x7&quot;</span><br><span class="line">    &quot; NORMAL mode</span><br><span class="line">    let &amp;t_EI = &quot;\&lt;Esc&gt;[2 q&quot; . &quot;\&lt;Esc&gt;]12;green\x7&quot;</span><br><span class="line">endif</span><br><span class="line">&quot; 1 -&gt; blinking block  闪烁的方块</span><br><span class="line">&quot; 2 -&gt; solid block  不闪烁的方块</span><br><span class="line">&quot; 3 -&gt; blinking underscore  闪烁的下划线</span><br><span class="line">&quot; 4 -&gt; solid underscore  不闪烁的下划线</span><br><span class="line">&quot; 5 -&gt; blinking vertical bar  闪烁的竖线</span><br><span class="line">&quot; 6 -&gt; solid vertical bar  不闪烁的竖线</span><br><span class="line"></span><br><span class="line">&quot; vimwiki</span><br><span class="line">let g:vimwiki_use_mouse = 1</span><br><span class="line">let g:vimwiki_list = [&#123;&#x27;path&#x27;: &#x27;/d/vimwiki/&#x27;,</span><br><span class="line">\ &#x27;path_html&#x27;: &#x27;/d/vimwiki/html/&#x27;,</span><br><span class="line">\ &#x27;html_header&#x27;: &#x27;/d/vimwiki/template/header.tpl&#x27;,&#125;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h3 id="7-git配置分支"><a href="#7-git配置分支" class="headerlink" title="7.git配置分支"></a>7.git配置分支</h3><p><strong>此项应该在bashrc中配置，之前搞错</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">来源：公众号【编程珠玑】</span></span><br><span class="line">git_branch()</span><br><span class="line">&#123;</span><br><span class="line">   branch=`git rev-parse --abbrev-ref HEAD 2&gt;/dev/null`</span><br><span class="line">   if [ &quot;$&#123;branch&#125;&quot; != &quot;&quot; ]</span><br><span class="line">   then</span><br><span class="line">       if [ &quot;$&#123;branch&#125;&quot; = &quot;(no branch)&quot; ]</span><br><span class="line">       then</span><br><span class="line">           branch=&quot;(`git rev-parse --short HEAD`...)&quot;</span><br><span class="line">       fi</span><br><span class="line">       echo &quot;($branch)&quot;</span><br><span class="line">   fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PS1=&#x27;$&#123;debian_chroot:+($debian_chroot)&#125;\u@\h:\W$(git_branch)\$ &#x27;</span><br><span class="line">PS1=&#x27;$&#123;debian_chroot:+($debian_chroot)&#125;\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\W\033[01;32m$(git_branch)\[\033[00m\]\$ &#x27;</span><br></pre></td></tr></table></figure>

















]]></content>
      <categories>
        <category>学习总结</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>工厂模式</title>
    <url>/2022/07/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<pre class="mermaid">classDiagram
class AbstractFactory{
 -成员名
 -getBall() Sport
}
class BasketballFactory{
 -成员名
 -getBall() Sport
}
class FootballFactory{
 -成员名
 -getBall() Sport
}
class VolleyballFactory{
 -成员名
 -getBall() Sport
}
class Sport{
 -
 -play() void
 -printName() void
}
class Basketball{
 -
 -play() void
 -printName() void
}
class Football{
 -
 -play() void
 -printName() void
}
class Volleyball{
 -
 -play() void
 -printName() void
}
class Client{
 -成员名
 -成员名
}
Client ..> AbstractFactory
Client ..> Sport
AbstractFactory <|-- BasketballFactory
AbstractFactory <|-- FootballFactory
AbstractFactory <|-- VolleyballFactory
BasketballFactory ..> Basketball
FootballFactory ..> Football
VolleyballFactory ..> Volleyball
Sport <|-- Basketball
Sport <|-- Football
Sport <|-- Volleyball</pre>

]]></content>
      <categories>
        <category>学习总结</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>强制地址跳转</title>
    <url>/2021/09/%E5%BC%BA%E5%88%B6%E5%9C%B0%E5%9D%80%E8%B7%B3%E8%BD%AC/</url>
    <content><![CDATA[<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span> <span class="params">(*pFunction)</span><span class="params">(<span class="type">void</span>)</span>; <span class="comment">//无返回值</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="title function_">long</span> <span class="params">(*pFunction2)</span><span class="params">(<span class="type">void</span>)</span>; <span class="comment">//有返回值 </span></span><br><span class="line"> </span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">aaa</span><span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123; </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;my address is %lx\r\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">long</span>)aaa); </span><br><span class="line">    <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">long</span>)aaa; <span class="comment">//返回函数地址</span></span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> </span><br><span class="line">&#123; </span><br><span class="line">    <span class="type">void</span> (*p1)(<span class="type">void</span>); </span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;void * - %ld\r\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">void</span>*))</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;unsigned int - %ld\r\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">int</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;unsigned long - %ld\r\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">long</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> a = aaa();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %lx\r\n&quot;</span>,a);</span><br><span class="line"></span><br><span class="line">    p1 = (<span class="type">void</span>(*)(<span class="type">void</span>))aaa; <span class="comment">//显式转换</span></span><br><span class="line">    p1();</span><br><span class="line"></span><br><span class="line">    p1 = aaa; <span class="comment">//隐式转换</span></span><br><span class="line">    <span class="comment">//b = p1();  //wrong</span></span><br><span class="line"></span><br><span class="line">    p1 = a;	<span class="comment">//直接使用地址</span></span><br><span class="line">    p1();</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="title function_">long</span> <span class="params">(*p2)</span><span class="params">(<span class="type">void</span>)</span>;	<span class="comment">//定义函数指针</span></span><br><span class="line">    p2 = a;	<span class="comment">//直接使用地址</span></span><br><span class="line">    b = p2();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;b=%lx\r\n&quot;</span>,b);</span><br><span class="line"></span><br><span class="line">    ((<span class="type">void</span>(*)())a)();</span><br><span class="line">    b = ((<span class="type">unsigned</span> <span class="type">long</span>(*)())a)();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;b=%lx\r\n&quot;</span>,b);</span><br><span class="line"></span><br><span class="line">    pFunction pp = aaa;</span><br><span class="line">    pp();</span><br><span class="line">    <span class="comment">//b =  pp();  //wrong</span></span><br><span class="line">    pp = a;</span><br><span class="line">    pp();</span><br><span class="line"></span><br><span class="line">    pFunction2 pp2 = a;</span><br><span class="line">    b = pp2();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;b=%lx\r\n&quot;</span>,b);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%lx\r\n&quot;</span>,a);</span><br><span class="line">    pFunction f = (pFunction)a;</span><br><span class="line">    f();</span><br><span class="line"></span><br><span class="line">    pFunction f2 = (<span class="type">void</span>(*)())a;</span><br><span class="line">    f2();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ly@xxxx:test$ ./d</span><br><span class="line">void * - 8</span><br><span class="line">unsigned int - 4</span><br><span class="line">unsigned long - 8</span><br><span class="line">my address is 55d37b981149</span><br><span class="line">a = 55d37b981149</span><br><span class="line">my address is 55d37b981149</span><br><span class="line">my address is 55d37b981149</span><br><span class="line">my address is 55d37b981149</span><br><span class="line">b=55d37b981149</span><br><span class="line">my address is 55d37b981149</span><br><span class="line">my address is 55d37b981149</span><br><span class="line">b=55d37b981149</span><br><span class="line">my address is 55d37b981149</span><br><span class="line">my address is 55d37b981149</span><br><span class="line">my address is 55d37b981149</span><br><span class="line">b=55d37b981149</span><br><span class="line">a=55d37b981149</span><br><span class="line">my address is 55d37b981149</span><br><span class="line">my address is 55d37b981149</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习总结</category>
      </categories>
      <tags>
        <tag>CC++</tag>
        <tag>程序跳转</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序H5支付</title>
    <url>/2021/08/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8FH5%E6%94%AF%E4%BB%98/</url>
    <content><![CDATA[<p>利用微信小程序 <code>&lt;web-view&gt;</code> 组件，将原来放在公众号的网页转移到微信小程序上，但是支付出现问题。</p>
<p>支付报错：<code>&#123;&quot;err_msg&quot;:&quot;system:access_denied&quot;&#125;</code>。</p>
<p>经查询，微信小程序现不支持通过组件在 H5 页面上支付，需要在支付时跳转到小程序，小程序支付完后，再跳转回 H5 页面。</p>
<hr>
<h2 id="1-调用接口"><a href="#1-调用接口" class="headerlink" title="1.调用接口"></a>1.调用接口</h2><p>首先调用 统一下单接口，在微信支付服务后台生成预支付交易单，返回正确的预支付交易后调起支付。</p>
<p>详情见 <a href="https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=9_1">https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=9_1</a></p>
<table>
<thead>
<tr>
<th align="left">调用接口</th>
</tr>
</thead>
<tbody><tr>
<td align="left">接口链接：<a href="https://api.mch.weixin.qq.com/pay/unifiedorder">https://api.mch.weixin.qq.com/pay/unifiedorder</a></td>
</tr>
<tr>
<td align="left">方法：post</td>
</tr>
<tr>
<td align="left">参数：xml_data（xml格式）</td>
</tr>
</tbody></table>
<p>参数 xml_data 举例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xml</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">appid</span>&gt;</span>wx2421b1c4370ec43b<span class="tag">&lt;/<span class="name">appid</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span>JSAPItest<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mch_id</span>&gt;</span>10000100<span class="tag">&lt;/<span class="name">mch_id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">nonce_str</span>&gt;</span>1add1a30ac87aa2db72f57a2375d8fec<span class="tag">&lt;/<span class="name">nonce_str</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">notify_url</span>&gt;</span>https://wxpay.wxutil.com/pub_v2/pay/notify.v2.php<span class="tag">&lt;/<span class="name">notify_url</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">openid</span>&gt;</span>oUpF8uMuAJO_M2pxb1Q9zNjWeS6o<span class="tag">&lt;/<span class="name">openid</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">out_trade_no</span>&gt;</span>1415659990<span class="tag">&lt;/<span class="name">out_trade_no</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">spbill_create_ip</span>&gt;</span>14.23.150.211<span class="tag">&lt;/<span class="name">spbill_create_ip</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">total_fee</span>&gt;</span>1<span class="tag">&lt;/<span class="name">total_fee</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">trade_type</span>&gt;</span>JSAPI<span class="tag">&lt;/<span class="name">trade_type</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">sign</span>&gt;</span>0CB01533B8C1EF103065174F50BCA001<span class="tag">&lt;/<span class="name">sign</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xml</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中，nonce_str 随机字符串长度在 32 位以内，</p>
<p>sign 通过签名算法计算得出，签名类型默认为 MD5，</p>
<p>notify_url 是异步接收微信支付结果通知的回调地址，必须外网可访问，不能携带参数。</p>
<hr>
<h2 id="2-签名生成算法"><a href="#2-签名生成算法" class="headerlink" title="2.签名生成算法"></a>2.签名生成算法</h2><p>以上述 xml 参数举例，将以上参数除 sign 外按照参数名 ASCII 码从小到大排序，使用 URL 键值对的格式拼接成字符串 stringA，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">stringA=<span class="string">&quot;appid=wx2421b1c4370ec43b&amp;body=JSAPItest&amp;mch_id=10000100&amp;nonce_str=1add1a30ac87aa2db72f57a2375d8fec&amp;notify_url=https://wxpay.wxutil.com/pub_v2/pay/notify.v2.php&amp;openid=oUpF8uMuAJO_M2pxb1Q9zNjWeS6o&amp;out_trade_no=1415659990&amp;spbill_create_ip=14.23.150.211&amp;total_fee=1&amp;trade_type=JSAPI&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>拼接API密钥：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">stringSignTemp=stringA+<span class="string">&quot;&amp;key=192006250b4c09247ec02edce69f6a2d&quot;</span>; <span class="comment">//key为商户平台设置的密钥key</span></span><br><span class="line">sign=<span class="title class_">MD5</span>(stringSignTemp).<span class="title function_">toUpperCase</span>();  <span class="comment">//md5算法</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="3-统一下单"><a href="#3-统一下单" class="headerlink" title="3.统一下单"></a>3.统一下单</h2><p>request 请求示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;https://api.mch.weixin.qq.com/pay/unifiedorder&#x27;</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">      <span class="attr">data</span>: xml_data,</span><br><span class="line">      <span class="attr">success</span>: <span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">      &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="4-代码"><a href="#4-代码" class="headerlink" title="4.代码"></a>4.代码</h2><p>如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">openid</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 事件处理函数</span></span><br><span class="line">  <span class="title function_">onLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> that = <span class="variable language_">this</span>;  </span><br><span class="line">    wx.<span class="title function_">login</span>(&#123;</span><br><span class="line">        success (res) &#123;</span><br><span class="line">          <span class="keyword">if</span> (res.<span class="property">code</span>) &#123;</span><br><span class="line">            <span class="comment">//发起网络请求</span></span><br><span class="line">            <span class="keyword">var</span> <span class="variable constant_">JSCODE</span>=res.<span class="property">code</span></span><br><span class="line">            <span class="keyword">var</span> urlx=<span class="string">&#x27;https://xxx.xxx.com/WXAppOpenid?js_code=&#x27;</span>+<span class="variable constant_">JSCODE</span>; <span class="comment">//从服务器获取openid</span></span><br><span class="line">            wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">              <span class="attr">url</span>: urlx,</span><br><span class="line">              <span class="attr">data</span>: &#123;<span class="attr">code</span>: res.<span class="property">code</span>&#125;,</span><br><span class="line">              <span class="attr">method</span>:<span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">              <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">rex</span>)&#123;that.<span class="title function_">setData</span>(&#123;<span class="attr">openid</span>:rex.<span class="property">data</span>.<span class="property">openid</span>&#125;);&#125;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;登录失败！&#x27;</span> + res.<span class="property">errMsg</span>)&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">zhifu</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> appId=<span class="string">&#x27;xxxxxxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> nonceStr = <span class="string">&#x27;xxxxxxxxxxxxxxxxxxxxx&#x27;</span>;  <span class="comment">//随机生成</span></span><br><span class="line">    <span class="keyword">var</span> codeStr=<span class="string">&quot;DC&quot;</span>;</span><br><span class="line">    codeStr += <span class="variable language_">this</span>.<span class="title function_">getTimeStamp</span>();</span><br><span class="line">    codeStr += <span class="built_in">parseInt</span>((<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">10</span>));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(codeStr);</span><br><span class="line">    <span class="keyword">var</span> money=<span class="string">&#x27;10&#x27;</span>; <span class="comment">//￥0.1</span></span><br><span class="line">    <span class="comment">//var url=&#x27;https://xxx.xxx.com/PayCallBackServlet&#x27;;</span></span><br><span class="line">    <span class="keyword">var</span> url = <span class="string">&#x27;https://wxpay.wxutil.com/pub_v2/pay/notify.v2.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> ip = <span class="string">&#x27;111.11.111.111&#x27;</span>;  <span class="comment">// 本机ip</span></span><br><span class="line">    <span class="keyword">var</span> openId = <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">openid</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(openId);</span><br><span class="line">    <span class="keyword">var</span> mch_id = <span class="string">&#x27;1111111111&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> mch_key = <span class="string">&#x27;111111111111111111111&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> app_key = <span class="string">&#x27;xxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> stringA=<span class="string">&quot;appid=&quot;</span>+appId+<span class="string">&quot;&amp;body=JSAPItest&amp;mch_id=&quot;</span>+mch_id+<span class="string">&quot;&amp;nonce_str=&quot;</span>+nonceStr+<span class="string">&quot;&amp;notify_url=&quot;</span>+url+<span class="string">&quot;&amp;openid=&quot;</span>+openId+<span class="string">&quot;&amp;out_trade_no=&quot;</span>+codeStr+<span class="string">&quot;&amp;spbill_create_ip=&quot;</span>+ip+<span class="string">&quot;&amp;total_fee=&quot;</span>+money+<span class="string">&quot;&amp;trade_type=JSAPI&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(stringA);</span><br><span class="line">    <span class="keyword">var</span> stringSignTemp=stringA+<span class="string">&quot;&amp;key=&quot;</span>+mch_key;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(stringSignTemp);</span><br><span class="line">    <span class="keyword">var</span> sign=<span class="title function_">md5</span>(stringSignTemp).<span class="title function_">toUpperCase</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(sign);</span><br><span class="line">    <span class="keyword">var</span> tdata = <span class="string">&#x27;&lt;xml&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;appid&gt;&#x27;</span>+appId+<span class="string">&#x27;&lt;/appid&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;body&gt;JSAPItest&lt;/body&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;mch_id&gt;&#x27;</span>+mch_id+<span class="string">&#x27;&lt;/mch_id&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;nonce_str&gt;&#x27;</span>+nonceStr+<span class="string">&#x27;&lt;/nonce_str&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;notify_url&gt;&#x27;</span>+url+<span class="string">&#x27;&lt;/notify_url&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;openid&gt;&#x27;</span>+openId+<span class="string">&#x27;&lt;/openid&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;out_trade_no&gt;&#x27;</span>+codeStr+<span class="string">&#x27;&lt;/out_trade_no&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;spbill_create_ip&gt;&#x27;</span>+ip+<span class="string">&#x27;&lt;/spbill_create_ip&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;total_fee&gt;&#x27;</span>+money+<span class="string">&#x27;&lt;/total_fee&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;trade_type&gt;JSAPI&lt;/trade_type&gt;&#x27;</span>+</span><br><span class="line">    <span class="string">&#x27;&lt;sign&gt;&#x27;</span>+sign+<span class="string">&#x27;&lt;/sign&gt;&#x27;</span>+<span class="string">&#x27;&lt;/xml&gt;&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(tdata);</span><br><span class="line">    <span class="keyword">var</span> prepay_id;</span><br><span class="line">    wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;https://api.mch.weixin.qq.com/pay/unifiedorder&#x27;</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">      <span class="attr">data</span>: tdata,</span><br><span class="line">      <span class="attr">success</span>: <span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">        <span class="keyword">var</span> a=res.<span class="property">data</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;&lt;prepay_id&gt;&lt;![CDATA[&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> b=res.<span class="property">data</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;]]&gt;&lt;/prepay_id&gt;&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(a == -<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        prepay_id=res.<span class="property">data</span>.<span class="title function_">slice</span>(a+<span class="number">20</span>,b);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(prepay_id);</span><br><span class="line">        <span class="comment">//pay</span></span><br><span class="line">        <span class="keyword">var</span> myDate=<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="keyword">var</span> timeStamp=myDate.<span class="title function_">getTime</span>().<span class="title function_">toString</span>();</span><br><span class="line">        <span class="keyword">var</span> pack=<span class="string">&quot;prepay_id=&quot;</span>+prepay_id;</span><br><span class="line">        <span class="keyword">var</span> signType=<span class="string">&quot;MD5&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> stringB=<span class="string">&quot;appId=&quot;</span>+appId+</span><br><span class="line">            <span class="string">&quot;&amp;nonceStr=&quot;</span>+nonceStr+</span><br><span class="line">            <span class="string">&quot;&amp;package=&quot;</span>+pack+</span><br><span class="line">            <span class="string">&quot;&amp;signType=&quot;</span>+signType+</span><br><span class="line">            <span class="string">&quot;&amp;timeStamp=&quot;</span>+timeStamp+</span><br><span class="line">            <span class="string">&quot;&amp;key=&quot;</span>+mch_key;</span><br><span class="line">        <span class="keyword">var</span> paySign=<span class="title function_">md5</span>(stringB).<span class="title function_">toUpperCase</span>();</span><br><span class="line">        wx.<span class="title function_">requestPayment</span>(&#123;</span><br><span class="line">          <span class="string">&quot;timeStamp&quot;</span>:timeStamp,</span><br><span class="line">          <span class="string">&quot;nonceStr&quot;</span>: nonceStr,</span><br><span class="line">          <span class="string">&quot;package&quot;</span>: pack,</span><br><span class="line">          <span class="string">&quot;signType&quot;</span>: signType,</span><br><span class="line">          <span class="string">&quot;paySign&quot;</span>: paySign,</span><br><span class="line">          <span class="string">&quot;success&quot;</span>:<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;fail&quot;</span>:<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;complete&quot;</span>:<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;last line&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">getTimeStamp</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> myDate=<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> codeStr = myDate.<span class="title function_">getFullYear</span>();</span><br><span class="line">    <span class="keyword">var</span> temp = myDate.<span class="title function_">getMonth</span>()+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(temp&lt;<span class="number">10</span>) codeStr += <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    codeStr += temp;</span><br><span class="line">    temp = myDate.<span class="title function_">getDate</span>();</span><br><span class="line">    <span class="keyword">if</span>(temp &lt; <span class="number">10</span>) codeStr +=<span class="string">&quot;0&quot;</span>;</span><br><span class="line">    codeStr += temp;</span><br><span class="line">    codeStr += <span class="string">&quot;_&quot;</span>;</span><br><span class="line">    codeStr += myDate.<span class="title function_">getHours</span>();</span><br><span class="line">    temp = myDate.<span class="title function_">getMinutes</span>();</span><br><span class="line">    <span class="keyword">if</span>(temp &lt; <span class="number">10</span>) codeStr += <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    codeStr += temp;</span><br><span class="line">    temp = myDate.<span class="title function_">getSeconds</span>();</span><br><span class="line">    <span class="keyword">if</span>(temp &lt; <span class="number">10</span>) codeStr += <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    codeStr += temp;</span><br><span class="line">    codeStr += <span class="string">&quot;_&quot;</span>;</span><br><span class="line">    temp = myDate.<span class="title function_">getMilliseconds</span>();</span><br><span class="line">    <span class="keyword">if</span>(temp &lt; <span class="number">10</span>) codeStr += <span class="string">&quot;00&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(temp &lt; <span class="number">100</span>) codeStr += <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    codeStr += temp;</span><br><span class="line">    <span class="keyword">return</span> codeStr;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * JavaScript MD5</span></span><br><span class="line"><span class="comment"> * https://github.com/blueimp/JavaScript-MD5</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Copyright 2011, Sebastian Tschan</span></span><br><span class="line"><span class="comment"> * https://blueimp.net</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the MIT license:</span></span><br><span class="line"><span class="comment"> * https://opensource.org/licenses/MIT</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Based on</span></span><br><span class="line"><span class="comment"> * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message</span></span><br><span class="line"><span class="comment"> * Digest Algorithm, as defined in RFC 1321.</span></span><br><span class="line"><span class="comment"> * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009</span></span><br><span class="line"><span class="comment"> * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet</span></span><br><span class="line"><span class="comment"> * Distributed under the BSD License</span></span><br><span class="line"><span class="comment"> * See http://pajhome.org.uk/crypt/md5 for more info.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* global define */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Add integers, wrapping at 2^32. This uses 16-bit operations internally</span></span><br><span class="line"><span class="comment">     * to work around bugs in some JS interpreters.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">safeAdd</span>(<span class="params">x, y</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> lsw = (x &amp; <span class="number">0xffff</span>) + (y &amp; <span class="number">0xffff</span>)</span><br><span class="line">        <span class="keyword">var</span> msw = (x &gt;&gt; <span class="number">16</span>) + (y &gt;&gt; <span class="number">16</span>) + (lsw &gt;&gt; <span class="number">16</span>)</span><br><span class="line">        <span class="keyword">return</span> (msw &lt;&lt; <span class="number">16</span>) | (lsw &amp; <span class="number">0xffff</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Bitwise rotate a 32-bit number to the left.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">bitRotateLeft</span>(<span class="params">num, cnt</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (num &lt;&lt; cnt) | (num &gt;&gt;&gt; (<span class="number">32</span> - cnt))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * These functions implement the four basic operations the algorithm uses.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">md5cmn</span>(<span class="params">q, a, b, x, s, t</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">safeAdd</span>(<span class="title function_">bitRotateLeft</span>(<span class="title function_">safeAdd</span>(<span class="title function_">safeAdd</span>(a, q), <span class="title function_">safeAdd</span>(x, t)), s), b)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">md5ff</span>(<span class="params">a, b, c, d, x, s, t</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">md5cmn</span>((b &amp; c) | (~b &amp; d), a, b, x, s, t)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">md5gg</span>(<span class="params">a, b, c, d, x, s, t</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">md5cmn</span>((b &amp; d) | (c &amp; ~d), a, b, x, s, t)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">md5hh</span>(<span class="params">a, b, c, d, x, s, t</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">md5cmn</span>(b ^ c ^ d, a, b, x, s, t)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">md5ii</span>(<span class="params">a, b, c, d, x, s, t</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">md5cmn</span>(c ^ (b | ~d), a, b, x, s, t)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Calculate the MD5 of an array of little-endian words, and a bit length.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">binlMD5</span>(<span class="params">x, len</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* append padding */</span></span><br><span class="line">        x[len &gt;&gt; <span class="number">5</span>] |= <span class="number">0x80</span> &lt;&lt; (len % <span class="number">32</span>)</span><br><span class="line">        x[((len + <span class="number">64</span>) &gt;&gt;&gt; <span class="number">9</span> &lt;&lt; <span class="number">4</span>) + <span class="number">14</span>] = len</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> i</span><br><span class="line">        <span class="keyword">var</span> olda</span><br><span class="line">        <span class="keyword">var</span> oldb</span><br><span class="line">        <span class="keyword">var</span> oldc</span><br><span class="line">        <span class="keyword">var</span> oldd</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">1732584193</span></span><br><span class="line">        <span class="keyword">var</span> b = -<span class="number">271733879</span></span><br><span class="line">        <span class="keyword">var</span> c = -<span class="number">1732584194</span></span><br><span class="line">        <span class="keyword">var</span> d = <span class="number">271733878</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; x.<span class="property">length</span>; i += <span class="number">16</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            olda = a</span><br><span class="line">            oldb = b</span><br><span class="line">            oldc = c</span><br><span class="line">            oldd = d</span><br><span class="line"></span><br><span class="line">            a = <span class="title function_">md5ff</span>(a, b, c, d, x[i], <span class="number">7</span>, - <span class="number">680876936</span>)</span><br><span class="line">            d = <span class="title function_">md5ff</span>(d, a, b, c, x[i + <span class="number">1</span>], <span class="number">12</span>, - <span class="number">389564586</span>)</span><br><span class="line">            c = <span class="title function_">md5ff</span>(c, d, a, b, x[i + <span class="number">2</span>], <span class="number">17</span>, <span class="number">606105819</span>)</span><br><span class="line">            b = <span class="title function_">md5ff</span>(b, c, d, a, x[i + <span class="number">3</span>], <span class="number">22</span>, - <span class="number">1044525330</span>)</span><br><span class="line">            a = <span class="title function_">md5ff</span>(a, b, c, d, x[i + <span class="number">4</span>], <span class="number">7</span>, - <span class="number">176418897</span>)</span><br><span class="line">            d = <span class="title function_">md5ff</span>(d, a, b, c, x[i + <span class="number">5</span>], <span class="number">12</span>, <span class="number">1200080426</span>)</span><br><span class="line">            c = <span class="title function_">md5ff</span>(c, d, a, b, x[i + <span class="number">6</span>], <span class="number">17</span>, - <span class="number">1473231341</span>)</span><br><span class="line">            b = <span class="title function_">md5ff</span>(b, c, d, a, x[i + <span class="number">7</span>], <span class="number">22</span>, - <span class="number">45705983</span>)</span><br><span class="line">            a = <span class="title function_">md5ff</span>(a, b, c, d, x[i + <span class="number">8</span>], <span class="number">7</span>, <span class="number">1770035416</span>)</span><br><span class="line">            d = <span class="title function_">md5ff</span>(d, a, b, c, x[i + <span class="number">9</span>], <span class="number">12</span>, - <span class="number">1958414417</span>)</span><br><span class="line">            c = <span class="title function_">md5ff</span>(c, d, a, b, x[i + <span class="number">10</span>], <span class="number">17</span>, - <span class="number">42063</span>)</span><br><span class="line">            b = <span class="title function_">md5ff</span>(b, c, d, a, x[i + <span class="number">11</span>], <span class="number">22</span>, - <span class="number">1990404162</span>)</span><br><span class="line">            a = <span class="title function_">md5ff</span>(a, b, c, d, x[i + <span class="number">12</span>], <span class="number">7</span>, <span class="number">1804603682</span>)</span><br><span class="line">            d = <span class="title function_">md5ff</span>(d, a, b, c, x[i + <span class="number">13</span>], <span class="number">12</span>, - <span class="number">40341101</span>)</span><br><span class="line">            c = <span class="title function_">md5ff</span>(c, d, a, b, x[i + <span class="number">14</span>], <span class="number">17</span>, - <span class="number">1502002290</span>)</span><br><span class="line">            b = <span class="title function_">md5ff</span>(b, c, d, a, x[i + <span class="number">15</span>], <span class="number">22</span>, <span class="number">1236535329</span>)</span><br><span class="line"></span><br><span class="line">            a = <span class="title function_">md5gg</span>(a, b, c, d, x[i + <span class="number">1</span>], <span class="number">5</span>, - <span class="number">165796510</span>)</span><br><span class="line">            d = <span class="title function_">md5gg</span>(d, a, b, c, x[i + <span class="number">6</span>], <span class="number">9</span>, - <span class="number">1069501632</span>)</span><br><span class="line">            c = <span class="title function_">md5gg</span>(c, d, a, b, x[i + <span class="number">11</span>], <span class="number">14</span>, <span class="number">643717713</span>)</span><br><span class="line">            b = <span class="title function_">md5gg</span>(b, c, d, a, x[i], <span class="number">20</span>, - <span class="number">373897302</span>)</span><br><span class="line">            a = <span class="title function_">md5gg</span>(a, b, c, d, x[i + <span class="number">5</span>], <span class="number">5</span>, - <span class="number">701558691</span>)</span><br><span class="line">            d = <span class="title function_">md5gg</span>(d, a, b, c, x[i + <span class="number">10</span>], <span class="number">9</span>, <span class="number">38016083</span>)</span><br><span class="line">            c = <span class="title function_">md5gg</span>(c, d, a, b, x[i + <span class="number">15</span>], <span class="number">14</span>, - <span class="number">660478335</span>)</span><br><span class="line">            b = <span class="title function_">md5gg</span>(b, c, d, a, x[i + <span class="number">4</span>], <span class="number">20</span>, - <span class="number">405537848</span>)</span><br><span class="line">            a = <span class="title function_">md5gg</span>(a, b, c, d, x[i + <span class="number">9</span>], <span class="number">5</span>, <span class="number">568446438</span>)</span><br><span class="line">            d = <span class="title function_">md5gg</span>(d, a, b, c, x[i + <span class="number">14</span>], <span class="number">9</span>, - <span class="number">1019803690</span>)</span><br><span class="line">            c = <span class="title function_">md5gg</span>(c, d, a, b, x[i + <span class="number">3</span>], <span class="number">14</span>, - <span class="number">187363961</span>)</span><br><span class="line">            b = <span class="title function_">md5gg</span>(b, c, d, a, x[i + <span class="number">8</span>], <span class="number">20</span>, <span class="number">1163531501</span>)</span><br><span class="line">            a = <span class="title function_">md5gg</span>(a, b, c, d, x[i + <span class="number">13</span>], <span class="number">5</span>, - <span class="number">1444681467</span>)</span><br><span class="line">            d = <span class="title function_">md5gg</span>(d, a, b, c, x[i + <span class="number">2</span>], <span class="number">9</span>, - <span class="number">51403784</span>)</span><br><span class="line">            c = <span class="title function_">md5gg</span>(c, d, a, b, x[i + <span class="number">7</span>], <span class="number">14</span>, <span class="number">1735328473</span>)</span><br><span class="line">            b = <span class="title function_">md5gg</span>(b, c, d, a, x[i + <span class="number">12</span>], <span class="number">20</span>, - <span class="number">1926607734</span>)</span><br><span class="line"></span><br><span class="line">            a = <span class="title function_">md5hh</span>(a, b, c, d, x[i + <span class="number">5</span>], <span class="number">4</span>, - <span class="number">378558</span>)</span><br><span class="line">            d = <span class="title function_">md5hh</span>(d, a, b, c, x[i + <span class="number">8</span>], <span class="number">11</span>, - <span class="number">2022574463</span>)</span><br><span class="line">            c = <span class="title function_">md5hh</span>(c, d, a, b, x[i + <span class="number">11</span>], <span class="number">16</span>, <span class="number">1839030562</span>)</span><br><span class="line">            b = <span class="title function_">md5hh</span>(b, c, d, a, x[i + <span class="number">14</span>], <span class="number">23</span>, - <span class="number">35309556</span>)</span><br><span class="line">            a = <span class="title function_">md5hh</span>(a, b, c, d, x[i + <span class="number">1</span>], <span class="number">4</span>, - <span class="number">1530992060</span>)</span><br><span class="line">            d = <span class="title function_">md5hh</span>(d, a, b, c, x[i + <span class="number">4</span>], <span class="number">11</span>, <span class="number">1272893353</span>)</span><br><span class="line">            c = <span class="title function_">md5hh</span>(c, d, a, b, x[i + <span class="number">7</span>], <span class="number">16</span>, - <span class="number">155497632</span>)</span><br><span class="line">            b = <span class="title function_">md5hh</span>(b, c, d, a, x[i + <span class="number">10</span>], <span class="number">23</span>, - <span class="number">1094730640</span>)</span><br><span class="line">            a = <span class="title function_">md5hh</span>(a, b, c, d, x[i + <span class="number">13</span>], <span class="number">4</span>, <span class="number">681279174</span>)</span><br><span class="line">            d = <span class="title function_">md5hh</span>(d, a, b, c, x[i], <span class="number">11</span>, - <span class="number">358537222</span>)</span><br><span class="line">            c = <span class="title function_">md5hh</span>(c, d, a, b, x[i + <span class="number">3</span>], <span class="number">16</span>, - <span class="number">722521979</span>)</span><br><span class="line">            b = <span class="title function_">md5hh</span>(b, c, d, a, x[i + <span class="number">6</span>], <span class="number">23</span>, <span class="number">76029189</span>)</span><br><span class="line">            a = <span class="title function_">md5hh</span>(a, b, c, d, x[i + <span class="number">9</span>], <span class="number">4</span>, - <span class="number">640364487</span>)</span><br><span class="line">            d = <span class="title function_">md5hh</span>(d, a, b, c, x[i + <span class="number">12</span>], <span class="number">11</span>, - <span class="number">421815835</span>)</span><br><span class="line">            c = <span class="title function_">md5hh</span>(c, d, a, b, x[i + <span class="number">15</span>], <span class="number">16</span>, <span class="number">530742520</span>)</span><br><span class="line">            b = <span class="title function_">md5hh</span>(b, c, d, a, x[i + <span class="number">2</span>], <span class="number">23</span>, - <span class="number">995338651</span>)</span><br><span class="line"></span><br><span class="line">            a = <span class="title function_">md5ii</span>(a, b, c, d, x[i], <span class="number">6</span>, - <span class="number">198630844</span>)</span><br><span class="line">            d = <span class="title function_">md5ii</span>(d, a, b, c, x[i + <span class="number">7</span>], <span class="number">10</span>, <span class="number">1126891415</span>)</span><br><span class="line">            c = <span class="title function_">md5ii</span>(c, d, a, b, x[i + <span class="number">14</span>], <span class="number">15</span>, - <span class="number">1416354905</span>)</span><br><span class="line">            b = <span class="title function_">md5ii</span>(b, c, d, a, x[i + <span class="number">5</span>], <span class="number">21</span>, - <span class="number">57434055</span>)</span><br><span class="line">            a = <span class="title function_">md5ii</span>(a, b, c, d, x[i + <span class="number">12</span>], <span class="number">6</span>, <span class="number">1700485571</span>)</span><br><span class="line">            d = <span class="title function_">md5ii</span>(d, a, b, c, x[i + <span class="number">3</span>], <span class="number">10</span>, - <span class="number">1894986606</span>)</span><br><span class="line">            c = <span class="title function_">md5ii</span>(c, d, a, b, x[i + <span class="number">10</span>], <span class="number">15</span>, - <span class="number">1051523</span>)</span><br><span class="line">            b = <span class="title function_">md5ii</span>(b, c, d, a, x[i + <span class="number">1</span>], <span class="number">21</span>, - <span class="number">2054922799</span>)</span><br><span class="line">            a = <span class="title function_">md5ii</span>(a, b, c, d, x[i + <span class="number">8</span>], <span class="number">6</span>, <span class="number">1873313359</span>)</span><br><span class="line">            d = <span class="title function_">md5ii</span>(d, a, b, c, x[i + <span class="number">15</span>], <span class="number">10</span>, - <span class="number">30611744</span>)</span><br><span class="line">            c = <span class="title function_">md5ii</span>(c, d, a, b, x[i + <span class="number">6</span>], <span class="number">15</span>, - <span class="number">1560198380</span>)</span><br><span class="line">            b = <span class="title function_">md5ii</span>(b, c, d, a, x[i + <span class="number">13</span>], <span class="number">21</span>, <span class="number">1309151649</span>)</span><br><span class="line">            a = <span class="title function_">md5ii</span>(a, b, c, d, x[i + <span class="number">4</span>], <span class="number">6</span>, - <span class="number">145523070</span>)</span><br><span class="line">            d = <span class="title function_">md5ii</span>(d, a, b, c, x[i + <span class="number">11</span>], <span class="number">10</span>, - <span class="number">1120210379</span>)</span><br><span class="line">            c = <span class="title function_">md5ii</span>(c, d, a, b, x[i + <span class="number">2</span>], <span class="number">15</span>, <span class="number">718787259</span>)</span><br><span class="line">            b = <span class="title function_">md5ii</span>(b, c, d, a, x[i + <span class="number">9</span>], <span class="number">21</span>, - <span class="number">343485551</span>)</span><br><span class="line"></span><br><span class="line">            a = <span class="title function_">safeAdd</span>(a, olda)</span><br><span class="line">            b = <span class="title function_">safeAdd</span>(b, oldb)</span><br><span class="line">            c = <span class="title function_">safeAdd</span>(c, oldc)</span><br><span class="line">            d = <span class="title function_">safeAdd</span>(d, oldd)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> [a, b, c, d]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Convert an array of little-endian words to a string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">binl2rstr</span>(<span class="params">input</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> i</span><br><span class="line">        <span class="keyword">var</span> output = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">var</span> length32 = input.<span class="property">length</span> * <span class="number">32</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length32; i += <span class="number">8</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            output += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>((input[i &gt;&gt; <span class="number">5</span>] &gt;&gt;&gt; (i % <span class="number">32</span>)) &amp; <span class="number">0xff</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Convert a raw string to an array of little-endian words</span></span><br><span class="line"><span class="comment">     * Characters &gt;255 have their high-byte silently ignored.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">rstr2binl</span>(<span class="params">input</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> i</span><br><span class="line">        <span class="keyword">var</span> output = []</span><br><span class="line">        output[(input.<span class="property">length</span> &gt;&gt; <span class="number">2</span>) - <span class="number">1</span>] = <span class="literal">undefined</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; output.<span class="property">length</span>; i += <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            output[i] = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> length8 = input.<span class="property">length</span> * <span class="number">8</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length8; i += <span class="number">8</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            output[i &gt;&gt; <span class="number">5</span>] |= (input.<span class="title function_">charCodeAt</span>(i / <span class="number">8</span>) &amp; <span class="number">0xff</span>) &lt;&lt; (i % <span class="number">32</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Calculate the MD5 of a raw string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">rstrMD5</span>(<span class="params">s</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">binl2rstr</span>(<span class="title function_">binlMD5</span>(<span class="title function_">rstr2binl</span>(s), s.<span class="property">length</span> * <span class="number">8</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Calculate the HMAC-MD5, of a key and some data (raw strings)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">rstrHMACMD5</span>(<span class="params">key, data</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> i</span><br><span class="line">        <span class="keyword">var</span> bkey = <span class="title function_">rstr2binl</span>(key)</span><br><span class="line">        <span class="keyword">var</span> ipad = []</span><br><span class="line">        <span class="keyword">var</span> opad = []</span><br><span class="line">        <span class="keyword">var</span> hash</span><br><span class="line">        ipad[<span class="number">15</span>] = opad[<span class="number">15</span>] = <span class="literal">undefined</span></span><br><span class="line">        <span class="keyword">if</span> (bkey.<span class="property">length</span> &gt; <span class="number">16</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            bkey = <span class="title function_">binlMD5</span>(bkey, key.<span class="property">length</span> * <span class="number">8</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i += <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ipad[i] = bkey[i] ^ <span class="number">0x36363636</span></span><br><span class="line">            opad[i] = bkey[i] ^ <span class="number">0x5c5c5c5c</span></span><br><span class="line">        &#125;</span><br><span class="line">        hash = <span class="title function_">binlMD5</span>(ipad.<span class="title function_">concat</span>(<span class="title function_">rstr2binl</span>(data)), <span class="number">512</span> + data.<span class="property">length</span> * <span class="number">8</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">binl2rstr</span>(<span class="title function_">binlMD5</span>(opad.<span class="title function_">concat</span>(hash), <span class="number">512</span> + <span class="number">128</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Convert a raw string to a hex string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">rstr2hex</span>(<span class="params">input</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> hexTab = <span class="string">&#x27;0123456789abcdef&#x27;</span></span><br><span class="line">        <span class="keyword">var</span> output = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">var</span> x</span><br><span class="line">        <span class="keyword">var</span> i</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; input.<span class="property">length</span>; i += <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x = input.<span class="title function_">charCodeAt</span>(i)</span><br><span class="line">            output += hexTab.<span class="title function_">charAt</span>((x &gt;&gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0f</span>) + hexTab.<span class="title function_">charAt</span>(x &amp; <span class="number">0x0f</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Encode a string as utf-8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">str2rstrUTF8</span>(<span class="params">input</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span>(input))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Take string arguments and return either raw or hex encoded strings</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">rawMD5</span>(<span class="params">s</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">rstrMD5</span>(<span class="title function_">str2rstrUTF8</span>(s))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">hexMD5</span>(<span class="params">s</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">rstr2hex</span>(<span class="title function_">rawMD5</span>(s))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">rawHMACMD5</span>(<span class="params">k, d</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">rstrHMACMD5</span>(<span class="title function_">str2rstrUTF8</span>(k), <span class="title function_">str2rstrUTF8</span>(d))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">hexHMACMD5</span>(<span class="params">k, d</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">rstr2hex</span>(<span class="title function_">rawHMACMD5</span>(k, d))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">md5</span>(<span class="params">string, key, raw</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!key)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!raw)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">hexMD5</span>(string)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">rawMD5</span>(string)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!raw)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">hexHMACMD5</span>(key, string)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">rawHMACMD5</span>(key, string)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>













]]></content>
      <categories>
        <category>学习总结</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/2022/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="一、设计模式来源"><a href="#一、设计模式来源" class="headerlink" title="一、设计模式来源"></a>一、设计模式来源</h2><p>设计模式（Design Pattern）是前辈们对代码开发经验的总结，是解决特定问题的一系列套路。它不是语法规定，而是一套用来提高代码可复用性、可维护性、可读性、稳健性以及安全性的解决方案。</p>
<h2 id="二、设计模式六大原则"><a href="#二、设计模式六大原则" class="headerlink" title="二、设计模式六大原则"></a>二、设计模式六大原则</h2><p>总原则——开闭原则（Open Closed principle）</p>
<blockquote>
<p>一个软件实体，如类、模块和函数应该对扩展开放，对修改关闭。</p>
</blockquote>
<p>在程序需要进行拓展的时候，不能去修改原有的代码，而是要扩展原有代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。</p>
<p>想要达到这样的效果，我们需要使用接口和抽象类等。</p>
<h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><p>Single Responsibility Principle</p>
<blockquote>
<p>一个类应该只有一个发生变化的原因</p>
</blockquote>
<p>不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，否则就应该把类拆分。</p>
<h3 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h3><p>Liskov Substitution Principle</p>
<blockquote>
<p>所有引用基类的地方必须能透明地使用其子类的对象</p>
</blockquote>
<p>任何基类可以出现的地方，子类一定可以出现。里氏替换原则是继承复用的基石，只有当衍生类可以替换基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。</p>
<p>里氏替换原则是对“开-闭”原则的补充。实现“开闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏替换原则是对实现抽象化的具体步骤的规范。里氏替换原则中，子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。</p>
<h3 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h3><p>Dependence Inversion Principle</p>
<blockquote>
<ol>
<li>上层模块不应该依赖底层模块，它们都应该依赖于抽象</li>
<li>抽象不应该依赖于细节，细节应该依赖于抽象</li>
</ol>
</blockquote>
<p>面向接口编程，依赖于抽象而不依赖于具体。写代码时用到具体类时，不与具体类交互，而与具体类的上层接口交互。</p>
<h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><p>Interface Segregation Principle</p>
<blockquote>
<ol>
<li>客户端不应该依赖它不需要的接口</li>
<li>类间的依赖关系应该建立在最小的接口上</li>
</ol>
</blockquote>
<p>每个接口中不存在子类用不到却必须实现的方法，如果不然，就要将接口拆分。使用多个隔离的接口，比使用单个接口（多个接口方法集合到一个的接口）要好。</p>
<h3 id="迪米特法则（最少知道原则）"><a href="#迪米特法则（最少知道原则）" class="headerlink" title="迪米特法则（最少知道原则）"></a>迪米特法则（最少知道原则）</h3><p>Law of Demeter</p>
<blockquote>
<p>只与你的直接朋友交谈，不跟“陌生人”说话</p>
</blockquote>
<p>一个类对自己依赖的类知道的越少越好。无论被依赖的类多么复杂，都应该将逻辑封装在方法的内部，通过public方法提供给外部。这样当被依赖的类变化时，才能最小的影响该类。</p>
<p>最少知道原则的另一个表达方式是：只与直接的朋友通信。类之间只要有耦合关系，就叫朋友关系。耦合分为依赖、关联、聚合、组合等。我们称出现为成员变量、方法参数、方法返回值中的类为直接朋友。局部变量、临时变量则不是直接的朋友。我们要求陌生的类不要作为局部变量出现在类中。</p>
<h3 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h3><p>Composite Reuse Principle</p>
<blockquote>
<p>尽量使用对象组合&#x2F;聚合，而不是继承关系达到软件复用的目的。</p>
</blockquote>
<p>合成或聚合可以将已有对象纳入到新对象中，使之成为新对象的一部分，因此新对象可以调用已有对象的功能。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SOLID CD</span><br><span class="line">S: single responsibility principle</span><br><span class="line">O: open closed principle</span><br><span class="line">L: liskov substitution principle</span><br><span class="line">I: interface segregation principle</span><br><span class="line">D: dependence inversion principle</span><br><span class="line"></span><br><span class="line">C: composite reuse principle</span><br><span class="line">D: law of Demeter</span><br></pre></td></tr></table></figure>

<h2 id="三、设计模式的三大类"><a href="#三、设计模式的三大类" class="headerlink" title="三、设计模式的三大类"></a>三、设计模式的三大类</h2><h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h3><p>Creational Pattern</p>
<p>关注如何创建对象，核心思想是要把对象的创建和使用相分离，这样使得两者能相对独立地变换。</p>
<p>包括：</p>
<ul>
<li>工厂方法：Factory Method</li>
<li>抽象工厂：Abstract Factory</li>
<li>建造者：Builder</li>
<li>原型：Prototype</li>
<li>单例：Singleton</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">创工原单建抽（创公园，但见愁）</span><br></pre></td></tr></table></figure>

<h3 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h3><p>Structural Pattern</p>
<p>关注对象的组成以及对象间的依赖关系，描述如何将类或者对象结合在一起形成更大的结构，就像搭积木，可以通过简单积木的组合形成复杂的、功能更为强大的结构。</p>
<p>包括：</p>
<ul>
<li>适配器</li>
<li>装饰着</li>
<li>代理</li>
<li>外观</li>
<li>桥接</li>
<li>组合</li>
<li>享元</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">结享外组适代装桥（姐想外租，世代装桥）</span><br></pre></td></tr></table></figure>

<h3 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h3><p>Behavioral Pattern</p>
<p>关注对象的行为问题，是对在不同的对象之间划分责任和算法的抽象化；不仅仅关注类和对象的结构，而且重点关注它们之间的相互作用。</p>
<p>包括：</p>
<ul>
<li>策略模式</li>
<li>模板方法</li>
<li>观察者</li>
<li>迭代器</li>
<li>责任链</li>
<li>命令模式</li>
<li>备忘录</li>
<li>状态模式</li>
<li>访问者</li>
<li>中介者</li>
<li>解释器</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">行状责中模访解备观策命迭（形状折中模仿，戒备观测鸣笛）</span><br></pre></td></tr></table></figure>

<h2 id="四、C-常见设计模式"><a href="#四、C-常见设计模式" class="headerlink" title="四、C++常见设计模式"></a>四、C++常见设计模式</h2><ol>
<li>智能指针shared_ptr，unique_ptr，weak_ptr：代理模式</li>
<li>STL中的queue：适配器模式</li>
<li>STL中的iterator：迭代器模式</li>
<li>拷贝构造函数&#x2F;拷贝复制运算符进行深拷贝：原型模式</li>
<li>std::optional：空对象模式</li>
<li>虚函数实现运行时多态：策略模式</li>
<li>std::string_view：享元模式</li>
</ol>
<h2 id="五、编码常用设计模式"><a href="#五、编码常用设计模式" class="headerlink" title="五、编码常用设计模式"></a>五、编码常用设计模式</h2><p>以下内容参考 <a href="https://github.com/FengJungle/DesignPattern">https://github.com/FengJungle/DesignPattern</a></p>
<h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><p>创建型模式关注对象的创建过程，在软件开发中应用非常广泛。创建型模式描述如何将对象的创建和使用分离，让用户在使用对象过程中无须关心对象的创建细节，从而降低系统耦合度，并且让系统易于修改和扩展。</p>
<p>简单工厂模式是最简单的设计模式之一，其实它并不属于Gof的23中设计模式，但应用也十分频繁，同时也是其余创建模式的基础，因此有必要先学习简单工厂模式。</p>
<p><a href="https://github.com/FengJungle/DesignPattern/blob/master/01.SimpleFactory/01.SimpleFactory.md">https://github.com/FengJungle/DesignPattern/blob/master/01.SimpleFactory/01.SimpleFactory.md</a></p>
<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><ul>
<li><a href="https://qzwjer.top/2022/07/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/">工厂模式</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/110419316">https://zhuanlan.zhihu.com/p/110419316</a></li>
<li><a href="https://www.cnblogs.com/yssjun/p/11102162.html">https://www.cnblogs.com/yssjun/p/11102162.html</a></li>
</ul>
<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>Singleton Pattern，也称单件模式，使用最广泛的设计模式之一。其意图是保证一个类仅有一个实例，并提供一个访问它的全局访问点，该实例被所有程序模块共享。</p>
<p>定义一个单例类：</p>
<ol>
<li>私有化它的构造函数，以防止外界创建单例类的对象；</li>
<li>使用类的私有静态指针变量指向类的唯一实例；</li>
<li>使用一个公有的静态方法获取该实例。</li>
</ol>
<p>实现方式：</p>
<ul>
<li>懒汉式，线程不安全</li>
<li>懒汉式加锁</li>
<li>懒汉式双检锁（DCL，double-checked-locking）</li>
<li>饿汉式</li>
<li>静态内部类</li>
<li>枚举</li>
</ul>
<p>参考：</p>
<ul>
<li><a href="https://m.runoob.com/design-pattern/singleton-pattern.html">https://m.runoob.com/design-pattern/singleton-pattern.html</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/37469260">https://zhuanlan.zhihu.com/p/37469260</a></li>
<li><a href="https://qzwjer.top/2022/10/Qt%E4%BD%BF%E7%94%A8Http%E4%B8%8B%E8%BD%BD/">Qt 使用 Http 下载</a></li>
</ul>
<h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><h3 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h3><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><h3 id="包装模式（装饰器模式）"><a href="#包装模式（装饰器模式）" class="headerlink" title="包装模式（装饰器模式）"></a>包装模式（装饰器模式）</h3><h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h3><h3 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h3><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><h3 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h3>]]></content>
      <categories>
        <category>学习总结</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>16进制文本插入文件头</title>
    <url>/2021/08/16%E8%BF%9B%E5%88%B6%E6%96%87%E6%9C%AC%E6%8F%92%E5%85%A5%E6%96%87%E4%BB%B6%E5%A4%B4/</url>
    <content><![CDATA[<p>在给设备 ota 升级时制作升级文件，会在工程生成的二进制文件头部加上一些升级信息，之前一直使用已经制作好的工具软件生成的。</p>
<p>要生成一个工具软件未支持的文件头，就得修改工具软件源码，重新编译工具软件（当然，也可以把工具软件做得更有扩展性一点），这无疑有点麻烦，尤其是在没有工具软件源码时。</p>
<p>要完成这么一个小功能，其实也不用那么复杂，使用一点 linux 中的几个命令即可。</p>
<p>以下1，2都是来自网络，仅作整理和备份。</p>
<ol>
<li><p>将文本插入文件头</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span> | <span class="built_in">cat</span> - fromFile &gt; toFile</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过 echo 写二进制文件</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法1</span></span><br><span class="line"><span class="built_in">echo</span> 000102030405 | xxd -r -ps &gt; <span class="built_in">test</span></span><br><span class="line"><span class="comment"># xxd 用于二进制或十六进制显示文件内容</span></span><br><span class="line"><span class="comment"># -r 把 xxd 的十六进制输出内容转回原文件的二进制内容</span></span><br><span class="line"><span class="comment"># -ps 以 postscript 的连续十六进制转储输出，这也叫做纯十六进制转储</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2</span></span><br><span class="line"><span class="built_in">echo</span> -e -n <span class="string">&quot;\x00\x01\x02\x03\x04\x05&quot;</span> &gt; <span class="built_in">test</span></span><br><span class="line"><span class="comment"># -e 表示使能反斜杠转义，\x 转义为十六进制</span></span><br><span class="line"><span class="comment"># -n 不添加行尾换行标识，echo 默认会在末尾添加 0x0A</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>当然，处理完成后得再检查一下是否达到预期</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1，使用 hex editor neo 软件直接对比源码是更加推荐的方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2，使用命令 diff 对比两个文件</span></span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<p>通过看书，获取到两外两种向文件头插入行的方法：</p>
<ol>
<li><p>使用 gawk 命令</p>
<p>用 gawk 命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gawk <span class="string">&#x27;BEGIN &#123;print &quot;HELLO&quot;&#125;;&#123;print $0&#125;&#x27;</span> fromFile &gt; toFile</span><br></pre></td></tr></table></figure>

<p>其中 BEGIN 关键字强制 gawk 在读取数据前执行 <code>BEGIN</code> 关键字后指定的程序脚本，即 <code>&#123;print &quot;HELLO&quot;&#125;</code></p>
</li>
<li><p>使用 sed 命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed <span class="string">&#x27;1i\HELLO&#x27;</span> fromFile &gt; toFile</span><br></pre></td></tr></table></figure>

<p>使用 sed 的指定行的插入功能，其中参数 <code>1i</code> 表示在第一行前插入文本</p>
</li>
</ol>
]]></content>
      <categories>
        <category>杂文集合</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>BLE学习笔记</title>
    <url>/2022/07/BLE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>GATT:Generic Attribute Profile，通用属性配置文件</p>
<p>GAP:Generic Access Profile，通用访问配置文件</p>
<h4 id="nRF52832-开发指南"><a href="#nRF52832-开发指南" class="headerlink" title="nRF52832 开发指南"></a>nRF52832 开发指南</h4><p>一个BLE程序通常需要至少包含 4 个必要的部分：系统初始化、启动、空闲管理和事件处理。</p>
<ul>
<li><p>BLE 协议栈初始化</p>
<p>使能 SoftDevice，配置 BLE 协议栈参数，使能 BLE 协议栈，注册 BLE 协议栈事件回调参数</p>
</li>
<li><p>配置 GAP 参数</p>
<p>模式（Mode）和规程（Procedure）</p>
<p>设置安全模式和名称</p>
</li>
<li><p>GATT 初始化</p>
</li>
<li><p>广播初始化</p>
</li>
<li><p>服务初始化</p>
</li>
<li><p>连接参数协商初始化</p>
<p>连接参数协商模块的作用是用于启动和执行连接参数协商规程</p>
</li>
<li><p>启动广播</p>
</li>
</ul>
<h4 id="服务的-UUID"><a href="#服务的-UUID" class="headerlink" title="服务的 UUID"></a>服务的 UUID</h4><p>加入服务 UUID 的步骤：</p>
<p>1 定义并初始化 UUID 数组</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">ble_uuid_t</span> m_adv_uuids[] =   <span class="comment">/**&lt; Universally unique service identifier. */</span></span><br><span class="line">&#123;</span><br><span class="line">    &#123;BLE_UUID_NUS_SERVICE, NUS_SERVICE_UUID_TYPE&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>2 初始化广播数据（扫描响应）中 UUID 列表</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.uuid_cnt = <span class="keyword">sizeof</span>(m_adv_uuids) / <span class="keyword">sizeof</span>(m_adv_uuids[<span class="number">0</span>]);</span><br><span class="line">.p_uuids  = m_adv_uuids;</span><br></pre></td></tr></table></figure>

<p>3 初始化广播</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">err_code = ble_advertising_init(&amp;m_advertising, &amp;init);</span><br><span class="line">   APP_ERROR_CHECK(err_code);</span><br></pre></td></tr></table></figure>



<h4 id="服务数据"><a href="#服务数据" class="headerlink" title="服务数据"></a>服务数据</h4><p>服务数据用来在广播中发送某个服务的数据，服务数据可以不需要连接就能解析出数据。</p>
<p>服务数据由 UUID 和数据两部分组成。</p>
<p>加入服务 UUID 的步骤：</p>
<p>1 定义服务数据结构体变量</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">ble_advdata_service_data_t</span> service_data;</span><br></pre></td></tr></table></figure>

<p> 2 初始化服务数据</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">service_data.service_uuid = BLE_UUID_BATTERY_SERVICE;</span><br><span class="line">service_data.data.size = <span class="keyword">sizeof</span>(battery_data);</span><br><span class="line">service_data.data.p_data = &amp;battery_data;</span><br></pre></td></tr></table></figure>

<p>3 配置广播数据中的服务数据</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">init.davdata.service_data_count = <span class="number">1</span>;</span><br><span class="line">init.advdata.p_service_data_array = &amp;service_data;</span><br></pre></td></tr></table></figure>

<p>4 初始化广播</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">err_code = ble_advertising_init(&amp;m_advertising, &amp;init);</span><br><span class="line">APP_ERROR_CHECK(err_code);</span><br></pre></td></tr></table></figure>



<h4 id="厂商自定义数据"><a href="#厂商自定义数据" class="headerlink" title="厂商自定义数据"></a>厂商自定义数据</h4><p>1 定义厂商自定义数据结构体变量</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="type">uint16_t</span> company_identifier;   <span class="comment">//厂商ID</span></span><br><span class="line">    <span class="type">uint8_array_t</span> data;  <span class="comment">//附件的自定义数据</span></span><br><span class="line">&#125;<span class="type">ble_advdata_manuf_data_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">ble_advdata_manuf_data_t</span> manuf_specific_data;</span><br></pre></td></tr></table></figure>

<p>2 初始化厂商自定义数据</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//制造商 ID，0x0059 是 Nordic 的 ID</span></span><br><span class="line">manuf_specific_data.company_identifier = <span class="number">0x0059</span>;</span><br><span class="line"><span class="comment">//指向制造商自定义的数据</span></span><br><span class="line">manuf_specific_data.data.p_data = my_adv_manuf_data;</span><br><span class="line"><span class="comment">//制造商自定义的数据大小（字节数）</span></span><br><span class="line">manuf_specific_data.data.size = <span class="keyword">sizeof</span>(my_adv_manuf_data);</span><br></pre></td></tr></table></figure>

<p>3 配置广播数据中包含厂商自定义数据</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">init.advdata.p_manuf_specific_data = &amp;manuf_specific_data;</span><br></pre></td></tr></table></figure>

<p>4 初始化广播</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">err_code = ble_advertising_init(&amp;m_advertising, &amp;init);</span><br><span class="line">APP_ERROR_CHECK(err_code);</span><br></pre></td></tr></table></figure>



<h4 id="BLE常见的4中模式"><a href="#BLE常见的4中模式" class="headerlink" title="BLE常见的4中模式"></a>BLE常见的4中模式</h4><h5 id="蓝牙广播模式（broadcast）"><a href="#蓝牙广播模式（broadcast）" class="headerlink" title="蓝牙广播模式（broadcast）"></a>蓝牙广播模式（broadcast）</h5><p>比较有代表例子就是基于低功耗蓝牙的beacon设备。</p>
<p>beacon处于广播模式时，一般会被设置成了不可连接的状态，Beacon 会每隔一定的时间（SKYLAB的beacon为100毫秒）广播一个数据包到周围，作为独立的蓝牙主机在执行扫描动作时，会间隔地接收到 Beacon 广播出来的数据包。该数据包内容最多可以包含 31 个字节的内容。同时，在主机接收到广播包时，其中会指示该广播包来自于哪一个蓝牙从机 MAC 地址(每个 Beacon 拥有唯一的 MAC 地址)的从机设备和当前的接收发送信号强度指示值(RSSI)为多少。</p>
<h5 id="蓝牙从机模式（peripheral）"><a href="#蓝牙从机模式（peripheral）" class="headerlink" title="蓝牙从机模式（peripheral）"></a>蓝牙从机模式（peripheral）</h5><p>代表例子是蓝牙心率带，蓝牙智能手环等</p>
<p>工作在从机模式的低功耗蓝牙模块也处于广播状态，等待被扫描。和广播模式不同的是，从机模式的蓝牙模块是可以被连接的，在数据传输过程中作从机； 下图是SKYLAB的蓝牙智能手环VG08，可以向蓝牙主机发送一些心率数据、记步数据、消耗的卡路里等等数据。</p>
<h5 id="蓝牙主机模式（center）"><a href="#蓝牙主机模式（center）" class="headerlink" title="蓝牙主机模式（center）"></a>蓝牙主机模式（center）</h5><p>代表例子：智能手机，数据传输中做主机的蓝牙模块。</p>
<p>Ble蓝牙模块处于主机模式时，无广播，可扫描周围广播设备，可以要求与广播设备的连接。在连接中做主机。主从一体蓝牙模块可以做主机、从机、主从一体三种模式。</p>
<h5 id="观察者模式（observer）"><a href="#观察者模式（observer）" class="headerlink" title="观察者模式（observer）"></a>观察者模式（observer）</h5><p>代表的例子是蓝牙网关。</p>
<p>Ble蓝牙处于观察者模式，无广播，可扫描周围的广播设备，不能要求与广播设备的连接。</p>
<hr>
]]></content>
      <categories>
        <category>杂文集合</category>
      </categories>
      <tags>
        <tag>BLE</tag>
      </tags>
  </entry>
  <entry>
    <title>高效工作命令</title>
    <url>/2022/05/%E9%AB%98%E6%95%88%E5%B7%A5%E4%BD%9C%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="1-复制-x2F-移动文件"><a href="#1-复制-x2F-移动文件" class="headerlink" title="1. 复制&#x2F;移动文件"></a>1. 复制&#x2F;移动文件</h3><p>例如复制&#x2F;移动文件a.txt到b.txt</p>
   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp &#123;a.txt,b.txt&#125;</span><br><span class="line">mv &#123;a.txt,b.txt&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">以上后缀相同，甚至可写为</span></span><br><span class="line">cp &#123;a,b&#125;.txt</span><br><span class="line">mv &#123;a,b&#125;.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果a.txt在目录 /opt/text/下，则</span></span><br><span class="line">cp /opt/text/&#123;a.txt,b.txt&#125;</span><br><span class="line">mv /opt/text/&#123;a.txt,b.txt&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果要将/opt/text/a.txt复制/移动到其它目录，则b.txt使用相对于/opt/text/的相对目录</span></span><br><span class="line">cp /opt/text/&#123;a.txt,../b.txt&#125;  #复制到/opt/b.txt</span><br><span class="line">mv /opt/text/&#123;a.txt,test/b.txt&#125; #移动到/opt/text/test/b.txt</span><br></pre></td></tr></table></figure>

<h3 id="2-删除文件"><a href="#2-删除文件" class="headerlink" title="2. 删除文件"></a>2. 删除文件</h3><p>删除目录下除某些文件以外的其余文件。</p>
   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除所有文件</span></span><br><span class="line">rm *</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除除.cpp和.h后缀的其它文件</span></span><br><span class="line">rm !(.cpp|.h)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除除 a.txt,b.cc,c.h外的其它文件</span></span><br><span class="line">rm !(a.txt|b.cc|c.h)</span><br></pre></td></tr></table></figure>

<h3 id="3-ssh快速登录"><a href="#3-ssh快速登录" class="headerlink" title="3. ssh快速登录"></a>3. ssh快速登录</h3>   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">检查是否有ssh公钥，看是否有id_rsa,id_rsa.pub</span></span><br><span class="line">ls ~/.ssh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果没有则生成</span></span><br><span class="line">ssh-keygen -t rsa -C &quot;abc@mail.com&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将id_rsa.pub公钥放到远程连接上的authorized_keys(~/.ssh/authorized_keys)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">可以手动复制，也可以用命令</span></span><br><span class="line">ssh-copy-id root@xxx.xx.xxx.xxx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">为方便可在~/.ssh/config中配置，如果没有config则创建</span></span><br><span class="line">Host ali</span><br><span class="line">    HostName xxx.xxx.xxx.xxx</span><br><span class="line">    User root</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ssh登录</span></span><br><span class="line">ssh ali</span><br></pre></td></tr></table></figure>

<h3 id="4-scp命令快速使用"><a href="#4-scp命令快速使用" class="headerlink" title="4. scp命令快速使用"></a>4. scp命令快速使用</h3>   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">未配置ssh公钥</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将本地a.txt上传到远程/root/doc/a.txt</span></span><br><span class="line">scp a.txt root@xxx.xxx.xxx.xx:/root/doc/.    </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将远程连接/root/doc/a.txt下载到本地</span></span><br><span class="line">scp root@xxx.xxx.xxx.xx:/root/doc/a.txt .</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置好ssh公钥后</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">上传</span></span><br><span class="line">scp a.txt ali:/root/doc/.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下载</span></span><br><span class="line">scp ali:/root/doc/a.txt .</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-批量将文件编码格式转换为utf-8"><a href="#5-批量将文件编码格式转换为utf-8" class="headerlink" title="5. 批量将文件编码格式转换为utf-8"></a>5. 批量将文件编码格式转换为utf-8</h3>   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">file命令查看文件类型：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">bluetooth.c:      C <span class="built_in">source</span>, ISO-8859 text, with CRLF line terminators</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">grep命令过滤出编码格式是 ISO-8859 text 的文件</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">awk命令获取文件名，-F <span class="string">&#x27;:&#x27;</span> =》 以冒号为分隔符</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">find -name *.c -o -name *.h   <span class="comment">#第二个必须带 -o</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">find -name <span class="string">&quot;*.[c|h]&quot;</span>    <span class="comment">#必须带双引号</span></span></span><br><span class="line">fileName=$(file $(find -name &quot;*.[c|h]&quot;) | grep ISO | awk -F &#x27;:&#x27; &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">echo $fileName</span><br><span class="line"></span><br><span class="line">for i in $fileName ;</span><br><span class="line">do</span><br><span class="line">    echo $i</span><br><span class="line">    # vim -c 选项后跟命令(此命令在.vimrc之前执行)，主要目的是自动执行命令并且退出文件</span><br><span class="line">    # set fileencoding 更改编码格式</span><br><span class="line">    # set ff 更改换行格式</span><br><span class="line">    # x 保存退出</span><br><span class="line">    vim -c &quot;set fileencoding=utf-8&quot; -c &quot;set ff=unix&quot; -c &quot;x&quot; $i</span><br><span class="line">    # 延时1s，sleep 默认单位是秒，0.1是0.1秒，m-分钟，h-小时，d-天</span><br><span class="line">    sleep 1s</span><br><span class="line">done</span><br></pre></td></tr></table></figure>



<h3 id="6-fs"><a href="#6-fs" class="headerlink" title="6. fs"></a>6. fs</h3>]]></content>
      <categories>
        <category>学习总结</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>C++提高</title>
    <url>/2021/08/C-%E6%8F%90%E9%AB%98/</url>
    <content><![CDATA[<p><a href="https://www.zhihu.com/question/442040692/answer/1708667756">https://www.zhihu.com/question/442040692/answer/1708667756</a></p>
<p>CC++常用算法手册</p>
]]></content>
      <categories>
        <category>杂文集合</category>
      </categories>
      <tags>
        <tag>CC++</tag>
      </tags>
  </entry>
  <entry>
    <title>C指针</title>
    <url>/2022/02/C%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<p>比较容易搞混的是<strong>指针数组</strong>和<strong>数组指针</strong>。</p>
<hr>
<p><strong>指针数组，顾名思义，存放指针的数组。</strong></p>
<p>如果不理解可以思考一下其它类型的数组，比如</p>
<ul>
<li>字符数组</li>
<li>整数数组</li>
<li>浮点数数组</li>
</ul>
<p>看到这些，就明白指针数组是个什么玩意了</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字符数组</span></span><br><span class="line"><span class="type">char</span> a[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//整数数组</span></span><br><span class="line"><span class="type">int</span> b[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//浮点数数组</span></span><br><span class="line"><span class="type">float</span> c[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针数组</span></span><br><span class="line"><span class="type">int</span> 	*d1[<span class="number">3</span>];	<span class="comment">//整数指针数组	&lt;=&gt; (int*) d1[3];</span></span><br><span class="line"><span class="type">char</span> 	*d2[<span class="number">3</span>];	<span class="comment">//字符指针数组	&lt;=&gt; (char*) d2[3];</span></span><br><span class="line"><span class="type">float</span> 	*d3[<span class="number">3</span>];	<span class="comment">//浮点数指针数组	&lt;=&gt; (float*) d3[3];</span></span><br><span class="line"><span class="comment">//以上数组中存储的是相关类型的指针</span></span><br><span class="line"><span class="type">int</span> 	*d1[<span class="number">3</span>] = &#123;&amp;a[<span class="number">0</span>], &amp;a[<span class="number">1</span>], &amp;a[<span class="number">2</span>]&#125;;  <span class="comment">//虽然没意义，但整数数组也可以用int初始化</span></span><br><span class="line"><span class="type">char</span> 	*d2[<span class="number">3</span>] = &#123;<span class="string">&quot;afbg&quot;</span>, <span class="string">&quot;234dfs&quot;</span>, <span class="string">&quot;fdsf&quot;</span>&#125;;</span><br><span class="line"><span class="type">float</span> 	*d3[<span class="number">3</span>] = &#123;&amp;c[<span class="number">0</span>], &amp;c[<span class="number">1</span>], &amp;c[<span class="number">2</span>]&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>数组指针，指向数组的指针。</strong></p>
<p>先想想别的什么指针，整数指针、字符串指针、浮点数指针、类指针，然后想到数组指针，是不是突然明白了什么？</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//整数指针</span></span><br><span class="line"><span class="type">int</span> *a;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符指针</span></span><br><span class="line"><span class="type">char</span> *b;</span><br><span class="line"></span><br><span class="line"><span class="comment">//浮点数指针</span></span><br><span class="line"><span class="type">float</span> *c;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类指针</span></span><br><span class="line">Student *d;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组指针</span></span><br><span class="line"><span class="type">int</span> 	(*p1)[<span class="number">3</span>];   <span class="comment">//整数数组指针	指针指向有三个整数的数组</span></span><br><span class="line"><span class="type">char</span> 	(*p2)[<span class="number">3</span>];	<span class="comment">//字符数组指针	指针指向有三个字符的数组</span></span><br><span class="line"><span class="type">float</span> 	(*p3)[<span class="number">3</span>];	<span class="comment">//浮点数数组指针	指针指向有三个浮点数的数组</span></span><br><span class="line">Student (*p4)[<span class="number">3</span>];	<span class="comment">//类数组指针		指针指向有三个Student对象的数组</span></span><br><span class="line"><span class="comment">//指针赋值</span></span><br><span class="line"><span class="type">int</span> v1[<span class="number">3</span>];</span><br><span class="line">p1 = &amp;v1;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> v2[<span class="number">3</span>];</span><br><span class="line">p2 = &amp;v2;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> v3[<span class="number">3</span>];</span><br><span class="line">p3 = &amp;v3;</span><br><span class="line"></span><br><span class="line">Student v4[<span class="number">3</span>];</span><br><span class="line">p4 = &amp;v4;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>杂文集合</category>
      </categories>
      <tags>
        <tag>CC++</tag>
      </tags>
  </entry>
  <entry>
    <title>GiteePages服务部署hexo+butterfly总结1</title>
    <url>/2021/03/GiteePages%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2hexo-butterfly%E6%80%BB%E7%BB%931/</url>
    <content><![CDATA[<p>本文目的是为节省读者在刚开始部署博客遇到部分小问题时要解决处理而花费的不必要时间。</p>
<p>本文适合从零开始的读者，在刚开始部署博客时，大致浏览本文。</p>
<p>你可以只看<a href="#jump4">仓库创建 Hexo 分支<sup>页内跳转</sup></a>，详细教程应当参考其它更加优质的博文。</p>
<p>本人参考的文章 <font color=orange><strong>顺序</strong></font> 推荐如下：</p>
<table>
<thead>
<tr>
<th align="center">官方</th>
<th align="center">个人</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="https://hexo.io/zh-cn/docs/">Hexo</a></td>
<td align="center"><a href="http://www.c-hasel.cn/categories/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/">网站搭建</a></td>
</tr>
<tr>
<td align="center"><a href="https://github.com/iissnan/hexo-theme-next/wiki">hexo-theme-next</a></td>
<td align="center"><a href="https://zhuanlan.zhihu.com/p/78467553">一小时搭建完自己的个人网站</a></td>
</tr>
<tr>
<td align="center"><a href="https://github.com/jerryc127/hexo-theme-butterfly">hexo-theme-butterfly</a></td>
<td align="center"><a href="https://www.zhihu.com/question/21193762">使用hexo，如果换了电脑怎么更新博客？</a></td>
</tr>
</tbody></table>
<p>本篇文章题目是总结1，主要总结在博客从开工到能实际运行起来所遇到的部分问题，只简略说明一些创建博客过程中的实际步骤。</p>
<p><font style="background:white" color=#00F5FF>现在开始！</font></p>
<h2 id="1-如何创建博客"><a href="#1-如何创建博客" class="headerlink" title="1.如何创建博客"></a>1.如何创建博客</h2><p>如何在Gitee或Github上<br>    ①建立个人博客对应的仓库，以及它们的细微区别<br>    ②配置Git Bash工具<br>    ③获取 <em>SSH KEY</em><br>……<br>此处不表。</p>
<p>以上准备完成，下载并安装 <a href="https://nodejs.org/zh-cn/"><em>nodejs</em></a> ，测试可用后，准备工作完成。</p>
<p>Git Bash安装 <em>Hexo</em> ，生成博客，命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>测试链接：<a href="localhost:4000">localhost:4000&#x2F;</a></p>
<p><font color=blue><code>hexo s</code> 是测试命令，当修改博客，在 <code>hexo g</code> 之后，应先 <code>hexo s</code> 本地查看效果。</font></p>
<h2 id="2-配置-config-yml-，上传到仓库"><a href="#2-配置-config-yml-，上传到仓库" class="headerlink" title="2.配置 _config.yml ，上传到仓库"></a>2.配置 <em>_config.yml</em> ，上传到仓库</h2><p>注意在本段以下，所有的命令都在<font color=red> <em>blog</em> 目录下</font>执行。</p>
<p><em>_config.yml</em> 在 <em>blog</em> 根目录下。</p>
<p>查找 <em>url</em> 字段，将值配置为将要显示的网站域名：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://xxx.github.io</span><br><span class="line">or</span><br><span class="line">https://xxx.gitee.io</span><br></pre></td></tr></table></figure>
<p>修改 <em>deploy</em> 字段，配置值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">	type: git</span><br><span class="line">	repo: #你的仓库地址（复制仓库中克隆/下载按钮下的https链接）</span><br><span class="line">	branch: master</span><br></pre></td></tr></table></figure>
<p>注意冒号之后需要空格间隔开。</p>
<p>修改完成之后，安装一个Git部署插件，命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>最后命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>生成并发布，如果发布在Gitee上并且打算白嫖，需要<font color=red>手动更新Gitee Pages服务</font>。</p>
<p>完成后，即可看到博客效果。</p>
<h2 id="3-新主题：butterfly"><a href="#3-新主题：butterfly" class="headerlink" title="3.新主题：butterfly"></a>3.新主题：butterfly</h2><p>在GitHub中找到 <em>butterfly</em> 官方仓库，将其拉取到 <em>blog</em> 下的 <em>themes</em> 目录下，<font color=green>更改文件名称</font>，同时修改 <em>blog</em> 目录下的 <em>_config.yml</em> 文件中的 <em>theme</em> 字段，值修改为<font color=green>更改的文件名</font>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>手动更新Gitee Pages服务，查看效果。</p>
<p>更多配置内容后续总结。</p>
<h2 id="4-仓库创建-Hexo-分支"><a href="#4-仓库创建-Hexo-分支" class="headerlink" title="4.仓库创建 Hexo 分支"></a>4.<span id="jump4">仓库创建 Hexo 分支</span></h2><p>以上完成后，在仓库下，仅有 <em>master</em> 一个分支存储网站博客内容，但生成这些内容的 <em>blog</em> 目录下的所有文件仅在本地。考虑到之后可能在其它电脑上更新博客，因此需要将这些生产文件上传到仓库中。</p>
<p>创建 <em>hexo</em> 分支，因为我们更新博客时，仅对生产文件做修改，博客内容直接通过 <code>hexo d</code> 上传，因此在分支管理处将 <em>hexo</em> 分支设置成默认分支。之后更新博客后，仅需要 <code>git push</code> <em>hexo</em> 分支即可。</p>
<p>在创建 <em>hexo</em> 分支后， <em>master</em> 分支的内容会被同步复制到该分支中，需要删除掉。</p>
<p>将 <em>hexo</em> 分支拉取到本地并删除多余文件后，更新远程仓库。</p>
<p>将 <em>blog</em> 文件夹下的内容复制到 <em>hexo</em> 分支所在根目录下，再更新远程仓库，查看博客所在仓库的 <em>hexo</em> 分支是否更新成功。</p>
<p>在 <em>hexo</em> 分支目录下发布文章以测试以上修改。</p>
<p>本篇内容到此结束，希望大家一切顺利！</p>
]]></content>
      <categories>
        <category>杂文集合</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-man</title>
    <url>/2022/02/Linux-man/</url>
    <content><![CDATA[<p>man使用时，SEE ALSO选项下很多命令后都跟着括号数字，意思是表示在数字章节有该命令的相关说明。</p>
<p>例如 <code>man stat</code>，其显示 STAT(1)的手册，在SEE ALSO中有stat(2), statfs(2)。此时若要看stat(2)，需要命令<code>man 2 stat</code>。</p>
]]></content>
      <categories>
        <category>杂文集合</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Java原生http请求</title>
    <url>/2021/08/Java%E5%8E%9F%E7%94%9Fhttp%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<p>  版权声明：本文为CSDN博主「qq_16055765」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>  原文链接：<a href="https://blog.csdn.net/qq_16055765/article/details/83342069">https://blog.csdn.net/qq_16055765/article/details/83342069</a></p>
<hr>
<p>项目中用到 Java 的 http 访问，Java 原生 HttpURLConnection 请求实现记录如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpURLConnectionUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * http get请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpUrl 链接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 响应数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">httpGet</span><span class="params">(String httpUrl)</span>&#123;</span><br><span class="line">        <span class="comment">//链接</span></span><br><span class="line">        HttpURLConnection connection=<span class="literal">null</span>;</span><br><span class="line">        InputStream is=<span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        StringBuffer result=<span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建连接</span></span><br><span class="line">            URL url=<span class="keyword">new</span> <span class="title class_">URL</span>(httpUrl);</span><br><span class="line">            connection= (HttpURLConnection) url.openConnection();</span><br><span class="line">            <span class="comment">//设置请求方式</span></span><br><span class="line">            connection.setRequestMethod(<span class="string">&quot;GET&quot;</span>);</span><br><span class="line">            <span class="comment">//设置连接超时时间</span></span><br><span class="line">            connection.setConnectTimeout(<span class="number">15000</span>);</span><br><span class="line">            <span class="comment">//设置读取超时时间</span></span><br><span class="line">            connection.setReadTimeout(<span class="number">15000</span>);</span><br><span class="line">            <span class="comment">//开始连接</span></span><br><span class="line">            connection.connect();</span><br><span class="line">            <span class="comment">//获取响应数据</span></span><br><span class="line">            <span class="keyword">if</span>(connection.getResponseCode()==<span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">//获取返回的数据</span></span><br><span class="line">                is=connection.getInputStream();</span><br><span class="line">                <span class="keyword">if</span>(is!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    br=<span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                    <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">while</span> ((temp=br.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">                        result.append(temp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(br!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(is!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            connection.disconnect();<span class="comment">// 关闭远程连接</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * post请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> httpUrl 链接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param 参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">httpPost</span><span class="params">(String httpUrl, String param)</span> &#123;</span><br><span class="line">        StringBuffer result=<span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="comment">//连接</span></span><br><span class="line">        HttpURLConnection connection=<span class="literal">null</span>;</span><br><span class="line">        OutputStream os=<span class="literal">null</span>;</span><br><span class="line">        InputStream is=<span class="literal">null</span>;</span><br><span class="line">        BufferedReader br=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建连接对象</span></span><br><span class="line">            URL url=<span class="keyword">new</span> <span class="title class_">URL</span>(httpUrl);</span><br><span class="line">            <span class="comment">//创建连接</span></span><br><span class="line">            connection= (HttpURLConnection) url.openConnection();</span><br><span class="line">            <span class="comment">//设置请求方法</span></span><br><span class="line">            connection.setRequestMethod(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">            <span class="comment">//设置连接超时时间</span></span><br><span class="line">            connection.setConnectTimeout(<span class="number">15000</span>);</span><br><span class="line">            <span class="comment">//设置读取超时时间</span></span><br><span class="line">            connection.setReadTimeout(<span class="number">15000</span>);</span><br><span class="line">            <span class="comment">//设置是否可读取</span></span><br><span class="line">            connection.setDoOutput(<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//设置响应是否可读取</span></span><br><span class="line">            connection.setDoInput(<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//设置参数类型</span></span><br><span class="line">            connection.setRequestProperty(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">            <span class="comment">//拼装参数</span></span><br><span class="line">            <span class="keyword">if</span>(param!=<span class="literal">null</span>&amp;&amp;!param.equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">                <span class="comment">//设置参数</span></span><br><span class="line">                os=connection.getOutputStream();</span><br><span class="line">                <span class="comment">//拼装参数</span></span><br><span class="line">                os.write(param.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//设置权限</span></span><br><span class="line">            <span class="comment">//设置请求头等</span></span><br><span class="line">            <span class="comment">//开启连接</span></span><br><span class="line">            <span class="comment">//connection.connect();</span></span><br><span class="line">            <span class="comment">//读取响应</span></span><br><span class="line">            <span class="keyword">if</span>(connection.getResponseCode()==<span class="number">200</span>)&#123;</span><br><span class="line">                is=connection.getInputStream();</span><br><span class="line">                <span class="keyword">if</span>(is!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    br=<span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                    String temp=<span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">if</span>((temp=br.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">                        result.append(temp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//关闭连接</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(br!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(os!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(is!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//关闭连接</span></span><br><span class="line">            connection.disconnect();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] str)</span>&#123;</span><br><span class="line">        <span class="comment">/*String result=HttpURLConnectionUtil.hGet(&quot;http://localhost:8080/test&quot;);</span></span><br><span class="line"><span class="comment">        System.out.println(result);*/</span></span><br><span class="line">        <span class="comment">/*Map&lt;String, Object&gt; map=new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">        map.put(&quot;1&quot;,&quot;1&quot;);</span></span><br><span class="line"><span class="comment">        map.put(&quot;2&quot;,&quot;2&quot;);</span></span><br><span class="line"><span class="comment">        map.put(&quot;3&quot;,&quot;3&quot;);</span></span><br><span class="line"><span class="comment">        System.out.println(HttpURLConnectionUtil.getParamStr(map));*/</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>杂文集合</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>PicGo自动上传图片</title>
    <url>/2021/06/PicGo%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<p>PicGo 下载链接 <a href="https://picgo.github.io/PicGo-Doc/zh">https://picgo.github.io/PicGo-Doc/zh</a></p>
<ol>
<li><p>下载 PicGo</p>
</li>
<li><p>安装最新版 typor</p>
</li>
<li><p>选择 文件&#x2F;偏好设置&#x2F;图像，上传服务设定</p>
</li>
<li><p>配置 PicGo，此处选择 gitee 做为图床使用</p>
</li>
<li><p>前往 gitee.com&#x2F;settings&#x2F;tokens，生成新的 token，复制保存</p>
</li>
<li><p>创建用于图床的仓库</p>
</li>
<li><p>PicGo 安装 gitee-uploader 插件，安装完成后在图床设置里选择 gitee，进行配置</p>
</li>
</ol>
<p>测试：</p>
<p>图片太大的显示不出来</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/19f2293ed1a15d9213f3f66dd3455a3.jpg"></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/typora-icon2.png"><br><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/typora-icon.png"></p>
]]></content>
      <categories>
        <category>杂文集合</category>
      </categories>
  </entry>
  <entry>
    <title>Qt布局不生效</title>
    <url>/2021/11/Qt%E5%B8%83%E5%B1%80%E4%B8%8D%E7%94%9F%E6%95%88/</url>
    <content><![CDATA[<p>描述：</p>
<p>在qt designer 上使用布局控件后，实际未生效，在对象查看器中发现 centralwidget 被禁用。</p>
<p>现象：在 Designer 的对象查看器中可以看到，布局控件被打了红色表示忽略的标记。而在主设计区中网格布局控件未生效。</p>
<p>版本：QT5.9</p>
<p>原因：centralwidget 需要设置布局。</p>
<p>方法：</p>
<ul>
<li><p>在主设计区窗口空白处右击，选择鼠标菜单下面的 layout 中的一种即可。</p>
</li>
<li><p>或者在对象查看器中右击 MainWindow，选择 layout 中的一个。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>杂文集合</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt蓝牙开发</title>
    <url>/2022/07/Qt%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<p><strong>QBluetoothDeviceDiscoveryAgent类发现附近的蓝牙设备：</strong></p>
<ul>
<li>创建一个QBluetoothDeviceDiscoveryAgent实体</li>
<li>connect信号deviceDiscovered()或finished()</li>
<li>调用start()</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyClass::startDeviceDiscovery</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QBluetoothDeviceDiscoveryAgent * discoveryAgent = <span class="keyword">new</span> <span class="built_in">QBluetoothDeviceDiscoveryAgent</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">connect</span>(discoveryAgent, <span class="built_in">SIGNAL</span>(<span class="built_in">deviceDiscovered</span>(QBluetoothDeviceInfo)), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">deviceDiscovered</span>(QBluetoothDeviceInfo)));</span><br><span class="line">    discoveryAgent-&gt;<span class="built_in">start</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyClass::deviceDiscovered</span><span class="params">(<span class="type">const</span> QBluetoothDeviceInfo &amp;device)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;Found new device:&quot;</span>&lt;&lt;device.<span class="built_in">name</span>()&lt;&lt;<span class="string">&#x27;(&#x27;</span>&lt;&lt;device.<span class="built_in">address</span>().<span class="built_in">toString</span>()&lt;&lt;<span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要异步检索结果，则connect信号deviceDiscovered()。要获取发现设备的列表，在finished信号后调用discoveredDevices()。</p>
<p>该类能发现经典和低功耗蓝牙设备。单个设备类型可以通过QBluetoothDeviceInfo::coreConfigurations () 属性确定。在大多数情况下，由foundDevices () 返回的列表包含两种类型的设备。然而，并非每个平台都能检测到这两种类型的设备。在具有此限制的平台上（例如 iOS 仅支持低能耗发现），发现程序会将搜索限制为支持的类型。</p>
<p>其它示例：</p>
<p>第一步，扫描设备，发现所有外设。使用QBluetoothDeviceDiscoveryAgent类发现设备，使用start()函数开始，每个新设备通过deviceDiscovered()信号发现。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">discoveryAgent = <span class="keyword">new</span> <span class="built_in">QBluetoothDeviceDiscoveryAgent</span>();</span><br><span class="line">discoveryAgent-&gt;<span class="built_in">setLowEnergyDiscoveryTimeout</span>(<span class="number">5000</span>);</span><br><span class="line"><span class="built_in">connect</span>(discoveryAgent, &amp;QBluetoothDeviceDiscoveryAgent::deviceDiscovered,</span><br><span class="line">        <span class="keyword">this</span>, &amp;Device::addDevice);</span><br><span class="line"><span class="built_in">connect</span>(discoveryAgent, QOverload&lt;QBluetoothDeviceDiscoveryAgent::Error&gt;::<span class="built_in">of</span>(&amp;QBluetoothDeviceDiscoveryAgent::error),</span><br><span class="line">        <span class="keyword">this</span>, &amp;Device::deviceScanError);</span><br><span class="line"><span class="built_in">connect</span>(discoveryAgent, &amp;QBluetoothDeviceDiscoveryAgent::finished, <span class="keyword">this</span>, &amp;Device::deviceScanFinished);</span><br><span class="line">discoveryAgent-&gt;<span class="built_in">start</span>(QBluetoothDeviceDiscoveryAgent::LowEnergyMethod);</span><br></pre></td></tr></table></figure>

<p>addDevice()槽函数作为发现新设备的相应被触发，它过滤所有被发现的有QBluetoothDeviceInfo::LowEnergyCoreConfiguration标记的设备，并将它们加入列表展示给用户。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Device::addDevice</span><span class="params">(<span class="type">const</span> QBluetoothDeviceInfo &amp;info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(info.<span class="built_in">coreConfigurations</span>() &amp; QBluetoothDeviceInfo::LowEnergyCoreConfiguration)</span><br><span class="line">        <span class="built_in">setUpdate</span>(<span class="string">&quot;Last device added: &quot;</span> + info.<span class="built_in">name</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p><strong>注意：</strong>从 Android 6.0 开始，检测设备的能力需要 ACCESS_COARSE_LOCATION。</p>
</blockquote>
<blockquote>
<p><strong>注意：</strong>由于 API 限制，只能在 Windows 上查找已使用 Windows 设置配对的设备。</p>
</blockquote>
<blockquote>
<p><strong>注意：</strong> Win32 后端目前不支持接收信号强度指示器 (RSSI)，以及制造商特定数据，或蓝牙 LE 设备在发现后公布的其他数据更新。</p>
</blockquote>
<p>&#x3D;&#x3D;<strong>经测，在win10下Qt 5.15版本，使用MinGW编译的软件搜索蓝牙只能搜到曾连过保存的蓝牙，使用MSVC2019 64bit则正常</strong>&#x3D;&#x3D;</p>
<p><strong>QBluetoothDeviceInfo类用来保存蓝牙设备的名称、地址和设备类</strong></p>
<p><strong>QBluetoothLocalDevice类提供获取和设置本地蓝牙设备支持</strong></p>
<p><strong>QLowEnergyController类提供访问低功耗蓝牙的功能</strong></p>
<p>QLowEnergyController类充当低功耗蓝牙开发的入口。</p>
<p>低功耗蓝牙设备包含两种类型：外设型和中央型。每种支持不同的功能。外设型设备提供中央型设备所需的数据。例如湿度传感器检测冬景花园的水分湿度。诸如手机之类的设备可能会读取传感器的值，并将同一环境中更大背景下的所有传感器值显示给用户。在这种情况下，传感器是外围设备，手机充当中央设备。</p>
<p>createCentral()工厂方法创建中央型控制器。这样的对象本质上充当远程低能耗外围设备的占位符，支持服务发现和状态跟踪等功能。</p>
<p>在中心角色创建控制器对象后，第一步是通过connectToDevice ()建立连接。建立连接后，控制器的state () 将更改为QLowEnergyController::ConnectedState并发出connected () 信号。值得一提的是，某些平台（例如基于BlueZ的 Linux）无法将QLowEnergyController的两个连接实例维护到同一个远程设备。在这种情况下，第二次调用connectToDevice () 可能会失败。这种限制可能会在未来的某个阶段消失。disconnectFromDevice _() 函数用于断开现有连接。</p>
<p>建立连接后的第二步是发现远程外围设备提供的服务。这个过程通过discoverServices () 启动，并在discoveryFinished () 信号发出后完成。发现的服务可以通过services () 进行枚举。</p>
<p>最后一步是创建服务对象。createServiceObject () 函数充当每个服务对象的工厂，并期望服务 UUID 作为参数。调用上下文应该拥有返回的QLowEnergyService实例的所有权。</p>
<p>一旦控制器与远程低功耗蓝牙设备断开连接，以后从此控制器的连接创建的任何QLowEnergyService、QLowEnergyCharacteristic或QLowEnergyDescriptor实例都将变为无效。</p>
<p>外围角色的控制器是通过createPeripheral () 工厂方法创建的。这样的对象本身充当外围设备，支持广播服务等功能，并允许客户收到有关特征值更改的通知。</p>
<p>在外围角色中创建控制器对象后，第一步是填充通过调用addService () 提供给客户端设备的 GATT 服务集。之后，调用startAdvertising () 让设备广播一些数据，并且根据正在执行的广播类型，还监听来自 GATT 客户端的传入连接。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//QBluetoothDeviceInfo remoteDevice;</span></span><br><span class="line"><span class="comment">//remoteDevice为扫描到的将要连接的设备</span></span><br><span class="line">QLowEnergyController *m_control = <span class="keyword">new</span> <span class="built_in">QLowEnergyController</span>(remoteDevice, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">connect</span>(m_control, <span class="built_in">SIGNAL</span>(<span class="built_in">serviceDiscovered</span>(QBluetoothUuid)), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">BlueServiceDiscovered</span>(QBluetoothUuid)));</span><br><span class="line"></span><br><span class="line"><span class="comment">//正在运行的服务发现完成时发出此信号。</span></span><br><span class="line"><span class="built_in">connect</span>(m_control, <span class="built_in">SIGNAL</span>(<span class="built_in">discoveryFinished</span>()), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">BlueServiceScanDone</span>()));</span><br><span class="line"><span class="comment">//当控制器成功连接到远程Low Energy设备时，会发出此信号。</span></span><br><span class="line"><span class="built_in">connect</span>(m_control, <span class="built_in">SIGNAL</span>(<span class="built_in">connected</span>()), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">BlueDeviceConnected</span>()));</span><br><span class="line"><span class="comment">//当控制器从远程低功耗设备断开时发出此信号。</span></span><br><span class="line"><span class="built_in">connect</span>(m_control, <span class="built_in">SIGNAL</span>(<span class="built_in">disconnected</span>()), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">BlueDeviceDisconnected</span>()));</span><br><span class="line"><span class="built_in">connect</span>(m_control, <span class="built_in">static_cast</span>&lt;<span class="built_in">void</span>(QLowEnergyController::(QLowEnergyController::Error)&gt;(&amp;QLowEnergyController::error),[=](QLowEnergyController::Error error) &#123;</span><br><span class="line">	<span class="keyword">if</span> (error == QLowEnergyController::NoError)</span><br><span class="line">    &#123;</span><br><span class="line">    	ui.plainTextEdit-&gt;<span class="built_in">setText</span>(<span class="built_in">QSL</span>(<span class="string">&quot;没有发生错误&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (error == QLowEnergyController::UnknownError)</span><br><span class="line">    &#123;</span><br><span class="line">        ui.plainTextEdit-&gt;<span class="built_in">setText</span>(<span class="built_in">QSL</span>(<span class="string">&quot;出现未知错误&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (error == QLowEnergyController::UnknownRemoteDeviceError)</span><br><span class="line">    &#123;</span><br><span class="line">        ui.plainTextEdit-&gt;<span class="built_in">setText</span>(<span class="built_in">QSL</span>(<span class="string">&quot;无法找到传递给此类构造函数的远程Bluetooth Low Energy设备&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (error == QLowEnergyController::NetworkError)</span><br><span class="line">    &#123;</span><br><span class="line">    	ui.plainTextEdit-&gt;<span class="built_in">setText</span>(<span class="built_in">QSL</span>(<span class="string">&quot;尝试读取或写入远程设备失败&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (error == QLowEnergyController::InvalidBluetoothAdapterError)</span><br><span class="line">    &#123;</span><br><span class="line">    	ui.plainTextEdit-&gt;<span class="built_in">setText</span>(<span class="built_in">QSL</span>(<span class="string">&quot;传递给此类构造函数的本地蓝牙设备无法找到，或者没有本地蓝牙设备&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (error == QLowEnergyController::InvalidBluetoothAdapterError)</span><br><span class="line">    &#123;</span><br><span class="line">    	ui.plainTextEdit-&gt;<span class="built_in">setText</span>(<span class="built_in">QSL</span>(<span class="string">&quot;尝试连接到远程设备失败&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//else</span></span><br><span class="line">    <span class="comment">//	ui.plainTextEdit-&gt;setText(QSL(&quot;*****未知错误!******\n&quot;));</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接到远程蓝牙低功耗设备。</span></span><br><span class="line">m_control-&gt;<span class="built_in">connectToDevice</span>();</span><br></pre></td></tr></table></figure>

<p>connected()信号触发的槽函数（以上是BlueDeviceConnected()）立即调用QLowEnergyController::discoverServices()来开始发现连接的设备的服务。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">BlueDeviceConnected</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	m_control-&gt;<span class="built_in">discoverServices</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>当服务被选择后，相关的QLowEnergyService实例被创建来允许与其交互：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">QLowEnergyService *service = m_control-&gt;<span class="built_in">createServiceObject</span>(serviceUuid);</span><br><span class="line"><span class="keyword">if</span>(!service)&#123;</span><br><span class="line">    <span class="built_in">qWarning</span>()&lt;&lt;<span class="string">&quot;Cannot create service for uuid&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>服务对象提供所需的信号和函数来发现服务细节，读写特征值和描述符，并且接收数据更改通知。更新通知将被捕获，通过写值或由设备上的内部逻辑的更新可能触发。在最初的详细信息搜索中，服务的state()从DiscoveryRequired到DiscoveringServices，并最终以ServiceDiscovered结束。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">connect</span>(service, &amp;QLowEnergyService::stateChanged, <span class="keyword">this</span>, &amp;Device::serviceDetailsDiscovered);</span><br><span class="line">service-&gt;<span class="built_in">discoverDetails</span>();</span><br><span class="line"><span class="built_in">setUpdate</span>(<span class="string">&quot;Back\n(Discovering details...)&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>通过QLowEnergyService::characteristics()检索服务的特征值，并且通过QLowEnergyCharacteristic::descriptors()获取每个描述符。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> QList&lt;QLowEnergyCharacteristic&gt;chars = service-&gt;<span class="built_in">characteristics</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">const</span> QLowEnergyCharacteristic &amp;ch : chars)&#123;</span><br><span class="line">    <span class="keyword">auto</span> cInfo = <span class="keyword">new</span> <span class="built_in">CharacteristicInfo</span>(ch);</span><br><span class="line">    m_characterisitics.<span class="built_in">append</span>(cInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>































]]></content>
      <categories>
        <category>杂文集合</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>BLE</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt：Slots error prone警告</title>
    <url>/2021/11/Qt%EF%BC%9ASlots-error-prone%E8%AD%A6%E5%91%8A/</url>
    <content><![CDATA[<p>告警：</p>
<p>Slots named * are error prone [clazy-connect-by-name]</p>
<p>Qt 论坛回复：</p>
<p>So the clazy warning has warned you about <em>exactly</em> the issue you encountered: when you use “Go to slot” Qt uses an automated connection mechanism called <code>connectSlotsByName()</code> where it uses some conventions to match objects, signals and slots. As clazy reports, and as you have experienced: this is convenient but error prone. It’s very easy to make a mistake with this approach.</p>
<p>To do this properly, use manual signal-slot connections with new connect syntax, like so:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">connect</span>(toolButton, &amp;QPushButton::clicked,</span><br><span class="line">    <span class="keyword">this</span>, &amp;YourClassName::nameOfYourSlot);</span><br></pre></td></tr></table></figure>

<p>With this approach, your compiler will make sure that both objects, signal and slot are all correct.</p>
<p>通过 “Go to Slot” 自动生成的连接是有错误倾向的。如果之后在 Design 中修改了控件名称，该控件就连接不上信号了，但编译器并不会报错。</p>
<p>因此更好的做法是手动连接信号与槽。</p>
]]></content>
      <categories>
        <category>杂文集合</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt：创建QtDesigner自定义部件</title>
    <url>/2021/11/Qt%EF%BC%9A%E5%88%9B%E5%BB%BAQtDesigner%E8%87%AA%E5%AE%9A%E4%B9%89%E9%83%A8%E4%BB%B6/</url>
    <content><![CDATA[<p>Qt Designer 基于插件的架构使得它可以使用用户设计或者第三方提供的自定义部件，就像使用标准的 Qt 部件一样。自定义部件中的所有特性在 Qt Designer 中都是可用的，这包含了部件属性、信号和槽等。</p>
<ol>
<li><p>创建项目。新建项目，模板选择 “Other Project” 分类中的 “Qt Custom Designer Widget”，项目名称定位 mydesigner，控件类改为 MyDesign，然后在右侧指定图标文件的路径（不指定的话使用 Qt 默认图标），其他选项保持默认。后面步骤全部保持默认直到完成项目的创建。</p>
<p><strong>注意，在创建项目，选择编译 kit 时，选择 64位 msvc2019（我的 Qt Creator 是64位msvc2019编译的），因为后面生成的 dll 文件与编译套件相关，生成的 dll 文件版本如果与 Qt Creator、designer 不匹配，则部件无法加入。</strong></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/image-20211112154912482.png" alt="image-20211112154912482"></p>
</li>
<li><p>更改部件。可以通过修改 mydesign.h 和 mydesign.cpp（注意，在 mydesign 工程列表下的 mydesign 目录下，如下图），修改部件。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/image-20211112154244020.png" alt="image-20211112154244020"></p>
<p>进入 mydesign.cpp 文件修改：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mydesign.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QHBoxLayout&gt;</span></span></span><br><span class="line"></span><br><span class="line">MyDesign::<span class="built_in">MyDesign</span>(QWidget *parent) :</span><br><span class="line">    <span class="built_in">QWidget</span>(parent)</span><br><span class="line">&#123;</span><br><span class="line">    QPushButton *button1 = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="keyword">this</span>);</span><br><span class="line">    QPushButton *button2 = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="keyword">this</span>);</span><br><span class="line">    button1-&gt;<span class="built_in">setText</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    button2-&gt;<span class="built_in">setText</span>(<span class="string">&quot;Qt!&quot;</span>);</span><br><span class="line">    QHBoxLayout *layout = <span class="keyword">new</span> QHBoxLayout;</span><br><span class="line">    layout-&gt;<span class="built_in">addWidget</span>(button1);</span><br><span class="line">    layout-&gt;<span class="built_in">addWidget</span>(button2);</span><br><span class="line">    <span class="built_in">setLayout</span>(layout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里需要在 Qt Creator 左下角的目标选择器中将构建选项选择为 Release，因为只有 Release 版本的插件在 Qt Designer 中才可以使用。构建完成后 release 目录中已经生成了相应的 dll 文件。</p>
</li>
<li><p>在 Qt Designer 中使用插件。为了使 Qt Designer 可以自动检测到插件，需要将生成的 dll 文件复制到 Qt 安装目录的 plugins 目录下的 designer 目录中。我的路径为 D:\APPS\Qt\5.15.2\msvc2019_64\plugins\designer。这时在 D:\APPS\Qt\5.15.2\msvc2019_64\bin 目录下点击运行 desinger，可以发现底部已经有自定义的部件了，可以使用。</p>
<p>现在只能在 Qt Designer 中使用，却不能在 Qt Creator 的设计模式中使用，Adding Qt Desinger Plugins 关键字对应的文档中提到了这一点。这是因为现在使用的 Windows 版本的 Qt Creator 是使用 Microsoft Visual Studio 的编译器生成的，而在 Qt Creator 中编译项目使用的是 MinGW&#x2F;g++ 编译器，它们的 Build Keys（包含了体系结构、操作系统、编译器等信息，具体可以参见 Deploying Plugins 关键字）不同，所以生成的插件无法在 Qt Creator 中使用。</p>
<p>如果安装了 MSVC 版本的 Qt，则使用该版本编译插件时<strong>将生成的 dll 文件复制到 Qt Creator 安装目录中。</strong>重新启动 Qt Creator，在设计模式就可以看到自定义部件了。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>杂文集合</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt：cmake项目配置</title>
    <url>/2021/11/Qt%EF%BC%9Acmake%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="1-添加SQL支持"><a href="#1-添加SQL支持" class="headerlink" title="1.添加SQL支持"></a>1.添加SQL支持</h3><ol>
<li><p>添加组件</p>
<p>   添加 <code>find_package(Qt$&#123;QT_VERSION_MAJOR&#125; COMPONENTS Sql REQUIRED)</code></p>
<p>   或 <code>find_package(Qt5 REQUIRED COMPONENTS Core Quick Sql)</code></p>
</li>
<li><p>添加库</p>
<p>   在<code>target_link_libraries</code>中添加<code>Qt$&#123;QT_VERSION_MAJOR&#125;::Sql</code></p>
</li>
</ol>
<h3 id="2-添加资源文件"><a href="#2-添加资源文件" class="headerlink" title="2.添加资源文件"></a>2.添加资源文件</h3><p>本篇文章主要作为备份。</p>
<p>来源：博客<a href="https://blog.csdn.net/baidu_35557785/article/details/52072563">https://blog.csdn.net/baidu_35557785/article/details/52072563</a></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1 添加项目</span></span><br><span class="line">file(GLOB_RECURSE QRC_SOURCE_FILES $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/*.qrc)</span><br><span class="line"><span class="comment"># CMAKE_CURRENT_SOURCE_DIR是和cmakelist的路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2 添加资源文件</span></span><br><span class="line">set(QRC_SOURCE_FILES image.qrc)</span><br><span class="line">qt5_add_resources(QRC_FILES $&#123;QRC_SOURCE_FILES&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 添加库</span></span><br><span class="line">add_library($&#123;PROJECT_NAME&#125;</span><br><span class="line">$&#123;QRC_FILES&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4 添加到可行文件</span></span><br><span class="line">add_executable(main</span><br><span class="line">$&#123;QRC_FILES&#125;</span><br><span class="line">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/example/main.cpp )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：main是你的可执行文件，添加到上述的地方下面就可以了</span></span><br><span class="line"><span class="comment"># 取得时候，只需要右击然后粘贴路径到剪接版，就可以取到路径了</span></span><br></pre></td></tr></table></figure>



<hr>
<p>来源：博客<a href="https://blog.csdn.net/qq_33835370/article/details/120224455">https://blog.csdn.net/qq_33835370/article/details/120224455</a></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.5)</span><br><span class="line"> </span><br><span class="line">project(Test LANGUAGES CXX)</span><br><span class="line"><span class="comment"># 这里</span></span><br><span class="line">file(GLOB_RECURSE QRC_SOURCE_FILES $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/*.qrc)</span><br><span class="line"> </span><br><span class="line">set(CMAKE_INCLUDE_CURRENT_DIR ON)</span><br><span class="line">set(CMAKE_AUTOUIC ON)</span><br><span class="line">set(CMAKE_AUTOMOC ON)</span><br><span class="line">set(CMAKE_AUTORCC ON)</span><br><span class="line">set(CMAKE_CXX_STANDARD 11)</span><br><span class="line">set(CMAKE_CXX_STANDARD_REQUIRED ON)</span><br><span class="line"><span class="comment"># 这里</span></span><br><span class="line">set(QRC_SOURCE_FILES Resources.qrc)</span><br><span class="line"> </span><br><span class="line">find_package(Qt5 COMPONENTS Widgets REQUIRED)</span><br><span class="line"><span class="comment"># 这里</span></span><br><span class="line">qt5_add_resources(QRC_FILES $&#123;QRC_SOURCE_FILES&#125;)</span><br><span class="line"><span class="comment"># 这里</span></span><br><span class="line">SOURCE_GROUP(<span class="string">&quot;Resource Files&quot;</span> FILES $&#123;QRC_SOURCE_FILES&#125;)</span><br><span class="line">if(ANDROID)</span><br><span class="line">  add_library(Test SHARED</span><br><span class="line">    main.cpp</span><br><span class="line">    ui_mainwindow.h</span><br><span class="line">    mainwindow.cpp</span><br><span class="line">    mainwindow.h</span><br><span class="line">    mainwindow.ui</span><br><span class="line">  )</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">  add_executable(Test</span><br><span class="line">    main.cpp</span><br><span class="line">    <span class="comment"># 这里</span></span><br><span class="line">    $&#123;QRC_FILES&#125;</span><br><span class="line">    ui_mainwindow.h</span><br><span class="line">    mainwindow.cpp</span><br><span class="line">    mainwindow.h</span><br><span class="line">    mainwindow.ui</span><br><span class="line">  )</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"> </span><br><span class="line">target_link_libraries(Test PRIVATE Qt5::Widgets)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>杂文集合</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt：创建应用程序插件</title>
    <url>/2021/11/Qt%EF%BC%9A%E5%88%9B%E5%BB%BA%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>资料：Qt Creator快速入门</p>
<h2 id="创建应用程序插件"><a href="#创建应用程序插件" class="headerlink" title="创建应用程序插件"></a>创建应用程序插件</h2><p>创建一个插件时，要先创建一个接口，接口就是一个类，它只包含纯虚函数。插件类要继承自该接口。插件类存储在一个共享库中，因此可以在应用程序运行时进行加载。</p>
<p>创建一个插件包括以下几步：</p>
<ol>
<li>定义一个插件类，它需要同时继承自 QObject 类和该插件所提供的功能对应的接口类；</li>
<li>使用 Q_INTERFACES() 宏在 Qt 的元对象系统中注册该接口；</li>
<li>使用 Q_PLUGIN_METADATA() 宏导出该插件；</li>
<li>使用合适的 .pro 文件构建该插件；</li>
</ol>
<p>使用一个应用程序可以通过插件进行扩展要进行以下几步：</p>
<ol>
<li>定义一组接口（只有纯虚函数的抽象类）；</li>
<li>使用 Q_DECLARE_INTERFACE() 宏在 Qt 的元对象系统中注册该接口；</li>
<li>在应用程序中使用 QPluginLoader 来加载插件；</li>
<li>使用 qobject_cast() 来测试插件是否实现了给定的接口；</li>
</ol>
<p>下面通过创建一个过滤字符串中出现的第一个数字的插件来学习应用程序插件的创建过程。这里需要创建两个项目，一个项目用来生成插件，即 dll 文件；另一个项目是测试程序，用来使用插件。</p>
<h3 id="1-创建插件"><a href="#1-创建插件" class="headerlink" title="1.创建插件"></a>1.创建插件</h3><ol>
<li><p>创建插件类。新建空项目 Empty qmake Project，项目名称为 plugin，选择路径为 myplugin。建立好项目后向其中添加一个 C++ 类，类名为 RegExpPlugin，基类保持为空。</p>
</li>
<li><p>定义插件类。将 regexpplugin.h 文件中的内容更改如下：</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> REGEXPPLUGIN_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REGEXPPLUGIN_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;regexpinterface.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RegExpPlugin</span> : <span class="keyword">public</span> QObject, RegExpInterface</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">Q_OBJECT</span></span><br><span class="line"><span class="function">    <span class="title">Q_PLUGIN_METADATA</span><span class="params">(IID <span class="string">&quot;org.qter.Examples.myplugin.RegExpInterface&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">                      FILE <span class="string">&quot;myplugin.json&quot;</span>)</span></span></span><br><span class="line"><span class="function">    <span class="title">Q_INTERFACES</span><span class="params">(RegExpInterface)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span>:</span></span><br><span class="line"><span class="function">    QString regexp(const QString &amp;message);</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// REGEXPPLUGIN_H</span></span></span><br></pre></td></tr></table></figure>

<p> 为了使这个类作为一个插件，它需要同时继承自 QObject 和 RegExpInterface。RegExpInterface 是接口类，用来指明插件要时间的功能，其在 regexpinterface.h 文件中定义，这个文件在后面的测试程序项目中（<strong>该文件可以直接在插件项目中定义，后面测试程序拷贝一份即可</strong>）。Q_PLUGIN_METEDATA() 宏用于声明插件的元数据，其中必须知名 IID 标识符，标识符是一个字符串，必须保证它的唯一性；FILE 指定一个 JSON 格式的插件元数据文件，该参数是可选的，其命名一般使用项目名称即可，内容一般只包含一组大括号（<strong>那么插件元数据文件的作用是什么？</strong>）。这里还需要使用 Q_INTERFACES() 宏将这个接口注册到 Qt 的元对象系统中，告知 Qt 这个类实现了哪个接口。这里通过重写它来实现该插件具体的功能，就是将字符串中的第一个数字提取出来并返回。</p>
<p> 在目录 plugin 中新建一个 myplugin.json 文档，内容是一组大括号{}。</p>
</li>
<li><p>导出插件。将 regexpplugin.cpp 文件中的内容更改如下：</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;regexpplugin.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QRegExp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QtPlugin&gt;</span></span></span><br><span class="line"><span class="function">QString <span class="title">RegExpPlugin::regexp</span><span class="params">(<span class="type">const</span> QString &amp;message)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QRegExp <span class="title">rx</span><span class="params">(<span class="string">&quot;\\d+&quot;</span>)</span></span>;</span><br><span class="line">    rx.<span class="built_in">indexIn</span>(message);</span><br><span class="line">    QString str = rx.<span class="built_in">cap</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>更改项目文件。打开 plugin.pro 文件，将其内容更改如下：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">TEMPLATE = lib</span><br><span class="line">CONFIG += plugin</span><br><span class="line">INCLUDEPATH += ../regexpwindow  <span class="comment">#如果在本项目中定义了 regexpinterface.h（建议），则注释掉</span></span><br><span class="line">HEADERS = regexpplugin.h</span><br><span class="line">SOURCES = regexpplugin.cpp</span><br><span class="line">TARGET = regexpplugin</span><br><span class="line">DESTDIR = ../plugins</span><br></pre></td></tr></table></figure>

<p>这里使用 “TEMPLATE&#x3D;lib” 表明该项目要构建库文件；使用 “CONFIG +&#x3D; plugin” 告知 qmake 要创建一个插件；因为项目中使用了 regexpwindow 目录中的 regexpinterface.h 文件，所以将该目录的路径添加到 INCLUDEPATH 中（<strong>regexpwindow 是测试项目目录，如果直接在本项目中定义了 regexpinterface.h，则不需要包含此目录了</strong>）；TARGET 指定了产生的 dll 文件的名字；最后，使用 DESTDIR 指定了生成的 dll 文件所在的目录。</p>
<p>因为这个项目中使用了 regexpinterface.h 文件，而这个文件在另一个项目中，所以现在还无法构建该项目（<strong>如果项目已经定义了 regexpinterface.h 文件，则可以构建</strong>）。</p>
</li>
</ol>
<h3 id="2-使用插件扩展应用程序"><a href="#2-使用插件扩展应用程序" class="headerlink" title="2.使用插件扩展应用程序"></a>2.使用插件扩展应用程序</h3><ol>
<li><p>新建 Qt Widgets 应用。项目名称为 regexpwindow，选择路径时仍选择前面建立的 myplugin 目录。基类选择 QWidget，类名保持 Widget 不变。建立完成后，向该项目中添加新文件，模板选择 C++ 头文件，名称为 regexpinterface.h。</p>
</li>
<li><p>定义接口。将 regexpinterface.h 文件的内容更改如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> REGEXPINTERFACE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REGEXPINTERFACE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QString&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RegExpInterface</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">RegExpInterface</span>()&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> QString <span class="title">regexp</span><span class="params">(<span class="type">const</span> QString &amp;message)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Q_DECLARE_INTERFACE</span>(RegExpInterface, <span class="string">&quot;org.qter.Examples.myplugin.RegExpInterface&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// REGEXPINTERFACE_H</span></span></span><br></pre></td></tr></table></figure>

<p>在接口类中定义了插件要实现的函数，比如这里定义了 regexp() 函数，可以看到在前面的 RegExpPlugin 类中已经实现了该函数。这个类中只能包含纯虚函数。最后使用 Q_DECLARE_INTERFACE() 宏在 Qt 元对象系统中注册了该接口，其中第二个参数就是前面指定的 IID。</p>
</li>
<li><p>加载插件。先单机 widget.ui 文件进入设计模式，设计的界面如图所示。将其中显示“无”字的 Label 的 objectName 属性更改为 labelNum。然后进入 wiget.h 文件，先添加头文件 #inlcude “regexpinterface.h”，然后再 private 部分定义一个对象指针，再声明一个加载插件函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">RegExpInterface * regexpIntergace;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">loadPlugin</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/image-20211112115518432.png" alt="image-20211112115518432"></p>
<p>现在到 widget.cpp 文件中先添加头文件，包含：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPluginLoader&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMessageBox&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDir&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>然后再构造函数中调用加载插件函数，如果加载失败，则进行告警：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="built_in">loadPlugin</span>())&#123;</span><br><span class="line">    QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;Error&quot;</span>, <span class="string">&quot;Could not load the plugin&quot;</span>);</span><br><span class="line">    ui-&gt;lineEdit-&gt;<span class="built_in">setEnabled</span>(<span class="literal">false</span>);</span><br><span class="line">    ui-&gt;pushButton-&gt;<span class="built_in">setEnabled</span>(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面添加加载插件函数的定义：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Widget::loadPlugin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QDir <span class="title">pluginsDir</span><span class="params">(<span class="string">&quot;../plugins&quot;</span>)</span></span>;</span><br><span class="line">    foreach(QString fileName, pluginsDir.<span class="built_in">entryList</span>(QDir::Files))&#123;</span><br><span class="line">        <span class="function">QPluginLoader <span class="title">pluginLoader</span><span class="params">(pluginsDir.absoluteFilePath(fileName))</span></span>;</span><br><span class="line">        QObject *plugin = pluginLoader.<span class="built_in">instance</span>();</span><br><span class="line">        <span class="keyword">if</span>(plugin)&#123;</span><br><span class="line">            regexpIntergace = <span class="built_in">qobject_cast</span>&lt;RegExpInterface*&gt;(plugin);</span><br><span class="line">            <span class="keyword">if</span>(regexpIntergace)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里使用 QDir 类指定到存放 dll 文件的 plugins 目录，然后便利该目录，使用 QPluginLoader 类来加载插件，并使用 qobject_cast() 来测试插件是否时间了 RegExpInterface 接口。</p>
<p>最后到设计模式，转到“过滤”按钮的 clicked() 信号对应的槽，更改如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_pushButton_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString str = regexpIntergace-&gt;<span class="built_in">regexp</span>(ui-&gt;lineEdit-&gt;<span class="built_in">text</span>());</span><br><span class="line">    ui-&gt;labelNum-&gt;<span class="built_in">setText</span>(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>这里就是使用了 regexpInterface 接口的 regexp() 函数来获取 lineEdit 不见输入字符串中第一个出现的数字，然后在 labelNum 中显示出来。</strong></p>
</li>
<li><p>运行程序。先构建plugin项目，再运行 regexpwindow 项目。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/image-20211112120230955.png" alt="image-20211112120230955"></p>
</li>
</ol>
<p>到此为止，创建插件并在应用程序中使用插件的整个过程就介绍完了。<strong>这个例子是基于 Qt 的 Echo Plugin Example 示例程序的，可以在帮助中查看这个例子。Qt 中还有一个 Plug &amp; Paint Example 演示程序，这是一个比较综合的使用插件扩展应用程序的例子。</strong></p>
]]></content>
      <categories>
        <category>杂文集合</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL多表根据多字段连接</title>
    <url>/2022/02/SQL%E5%A4%9A%E8%A1%A8%E6%A0%B9%E6%8D%AE%E5%A4%9A%E5%AD%97%E6%AE%B5%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<p>根据A表中的不同字段，连接B表中的不同行。</p>
<p>以下例子，表x是8仓换电柜的信息，包含8个仓中的电池编号，表y是电池的信息，现在需要两个表部分信息合并，将x中的电池编号与y中的相同编号的电池数据并在一行。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">x.<span class="operator">*</span></span><br><span class="line">,y1.val6 <span class="keyword">as</span> soc1</span><br><span class="line">,y2.val6 <span class="keyword">as</span> soc2</span><br><span class="line">,y3.val6 <span class="keyword">as</span> soc3</span><br><span class="line">,y4.val6 <span class="keyword">as</span> soc4</span><br><span class="line">,y5.val6 <span class="keyword">as</span> soc5</span><br><span class="line">,y6.val6 <span class="keyword">as</span> soc6</span><br><span class="line">,y7.val6 <span class="keyword">as</span> soc7</span><br><span class="line">,y8.val6 <span class="keyword">as</span> soc8</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">DCWLW.dbo.newbox_b002</span><br><span class="line"><span class="keyword">where</span> nbox_b002_id <span class="keyword">in</span> </span><br><span class="line">(<span class="keyword">select</span> <span class="built_in">MAX</span>(nbox_b002_id) <span class="keyword">from</span> DCWLW.dbo.newbox_b002 <span class="keyword">group</span> <span class="keyword">by</span> device_code)</span><br><span class="line">)x</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> DCWLW.dbo.device_date y1</span><br><span class="line"><span class="keyword">on</span> x.door1_bat_code<span class="operator">=</span>y1.barcode</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> DCWLW.dbo.device_date y2</span><br><span class="line"><span class="keyword">on</span> x.door2_bat_code<span class="operator">=</span>y2.barcode</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> DCWLW.dbo.device_date y3</span><br><span class="line"><span class="keyword">on</span> x.door3_bat_code<span class="operator">=</span>y3.barcode</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> DCWLW.dbo.device_date y4</span><br><span class="line"><span class="keyword">on</span> x.door4_bat_code<span class="operator">=</span>y4.barcode</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> DCWLW.dbo.device_date y5</span><br><span class="line"><span class="keyword">on</span> x.door5_bat_code<span class="operator">=</span>y5.barcode</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> DCWLW.dbo.device_date y6</span><br><span class="line"><span class="keyword">on</span> x.door6_bat_code<span class="operator">=</span>y6.barcode</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> DCWLW.dbo.device_date y7</span><br><span class="line"><span class="keyword">on</span> x.door7_bat_code<span class="operator">=</span>y7.barcode</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> DCWLW.dbo.device_date y8</span><br><span class="line"><span class="keyword">on</span> x.door8_bat_code<span class="operator">=</span>y8.barcode</span><br></pre></td></tr></table></figure>

<p>以上的速度稍慢，不知有没有效率更高的方法</p>
]]></content>
      <categories>
        <category>杂文集合</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>git添加.gitignore</title>
    <url>/2022/07/git%E6%B7%BB%E5%8A%A0-gitignore/</url>
    <content><![CDATA[<p>转自 <a href="https://zhuanlan.zhihu.com/p/334908553">https://zhuanlan.zhihu.com/p/334908553</a></p>
<p>项目开发中使用Git作为版本管理工具时，有时并非在项目一开始就添加了.gitignore文件来管理Git忽略规则，或是在项目开发过程中添加或移除了忽略规则，这时由于Git在本地维护着一份遵从创建本地项目时的gitignore规则的Git缓存，因此会造成.gitignore文件不起作用的现象。</p>
<p>解决这个问题的方式就是清除掉本地项目的Git缓存，通过重新创建Git索引的方式来生成遵从新.gitignore文件中规则的本地Git版本，再将该Git版本提交到主干。</p>
<p>例如，如果先使用NPM创建了项目，然后才创建了如下内容的.gitignore文件，那么在提交时本地Git并不会忽略相应的文件和路径。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># .gitignore</span><br><span class="line"></span><br><span class="line">.DS_Store</span><br><span class="line">node_modules</span><br><span class="line">package-lock.json</span><br></pre></td></tr></table></figure>

<p>此时，可通过如下命令解决这个问题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.清除本地当前的Git缓存</span><br><span class="line">git rm -r --cached .</span><br><span class="line"></span><br><span class="line">2.应用.gitignore等本地配置文件重新建立Git索引</span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line">3.提交当前Git版本并备注说明</span><br><span class="line">git commit -m &quot;update .gitignore&quot;</span><br><span class="line"></span><br><span class="line">4.推送。推送后Git仓库中会删去.gitignore中忽略的文件</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>杂文集合</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt：应用程序无法运行</title>
    <url>/2022/02/Qt%EF%BC%9A%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8C/</url>
    <content><![CDATA[<h2 id="一、0xc000007b"><a href="#一、0xc000007b" class="headerlink" title="一、0xc000007b"></a>一、0xc000007b</h2><p>Qt创建的应用程序，直接运行时弹出错误窗口：应用程序无法正常启动0xc000007b</p>
<p>发现是64位机器，创建的Qt应用是32位，该换为64位编译即可。</p>
<p>应用打包：</p>
<p>release编译后，将exe文件移动到应用文件夹中，然后使用windeployqt打包：windeployqt.exe xxx.exe</p>
<h2 id="二、无法找到入口"><a href="#二、无法找到入口" class="headerlink" title="二、无法找到入口"></a>二、无法找到入口</h2><p>Qt创建的应用程序，在Qt Creator中运行时正常，在文件夹中点击运行时弹出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无法找到入口 ——无法定位程序输入点 XXXXX 于动态链接库 。。。</span><br></pre></td></tr></table></figure>

<p>同样使用windeployqt打包的程序也是如此。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">以上问题是选择编译生成的工具和在系统PATH下的Qt链接库不匹配导致的。</span><br><span class="line"></span><br><span class="line">如选择的是MinGW_64生成的程序，但系统PATH下Qt链接库是MSVC2019_64，或者系统PATH中的Qt链接库MSVC2019_64在MinGW_64之前，导致程序运行时链接到了不匹配的库文件，造成无法定位程序输入点。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>杂文集合</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>git配置</title>
    <url>/2022/05/git%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<hr>
<h3 id="1-更改remote地址"><a href="#1-更改remote地址" class="headerlink" title="1.更改remote地址"></a>1.更改remote地址</h3><p>git上传公钥后，每次git push 仍需要填写用户名与密码？</p>
<p>git的remote要使用ssh地址，而首次clone时使用了https地址，需要将remote地址改为ssh地址：</p>
<p><code>git remote set-url origin git@gitee.com:*****.git</code></p>
<p>当然，以上命令在git仓库迁移到新的地址时使用也有效</p>
<hr>
<h3 id="2-git-status中文显示"><a href="#2-git-status中文显示" class="headerlink" title="2.git status中文显示"></a>2.git status中文显示</h3><p>git status   中文显示为8进制数字</p>
<p>使用以下命令正常：</p>
<p><code>git config --global core.quotePath false</code></p>
<hr>
<h3 id="3-创建仓库"><a href="#3-创建仓库" class="headerlink" title="3.创建仓库"></a>3.创建仓库</h3><p>在服务器上创建git仓库，例如在&#x2F;root&#x2F;下创建books仓库：</p>
<p><code>git init --bare books</code></p>
]]></content>
      <categories>
        <category>杂文集合</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>odbc</title>
    <url>/2021/06/odbc/</url>
    <content><![CDATA[<h4 id="一、建立测试数据库和表"><a href="#一、建立测试数据库和表" class="headerlink" title="一、建立测试数据库和表"></a>一、建立测试数据库和表</h4><p>建表，设置登录账号密码等。</p>
<p>由于项目已有数据库，所以此步骤略过。</p>
<h4 id="二、设置-ODBC-数据源"><a href="#二、设置-ODBC-数据源" class="headerlink" title="二、设置 ODBC 数据源"></a>二、设置 ODBC 数据源</h4><p>搜索打开系统自带的 odbc 数据源，选择 系统 DSN，添加 SQL Server。</p>
<p>添加过程中，名称自取（例如：testlyl），服务器选择数据库的 IP，然后填写登录名（abc）、密码（def010）等。</p>
<h4 id="三、代码示例"><a href="#三、代码示例" class="headerlink" title="三、代码示例"></a>三、代码示例</h4><p>使用 visual stadio 2019 建立 C工程，代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sql.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sqlext.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sqltypes.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	SQLRETURN ret;</span><br><span class="line">	SQLHENV henv;</span><br><span class="line">	SQLHDBC hdbc;</span><br><span class="line">	SQLHSTMT hstmt;</span><br><span class="line"></span><br><span class="line">	ret = SQLAllocHandle(SQL_HANDLE_ENV, <span class="literal">NULL</span>, &amp;henv);<span class="comment">//申请环境句柄</span></span><br><span class="line">	ret = SQLSetEnvAttr(henv, SQL_ATTR_ODBC_VERSION, (SQLPOINTER)SQL_OV_ODBC3, SQL_IS_INTEGER);</span><br><span class="line">	ret = SQLAllocHandle(SQL_HANDLE_DBC, henv, &amp;hdbc);<span class="comment">//申请数据库连接句柄</span></span><br><span class="line"></span><br><span class="line">	ret = SQLConnect(hdbc, (SQLCHAR*)<span class="string">&quot;testlyl&quot;</span>, SQL_NTS, (SQLCHAR*)<span class="string">&quot;abc&quot;</span>, SQL_NTS, (SQLCHAR*)<span class="string">&quot;def010&quot;</span>, SQL_NTS);</span><br><span class="line">	<span class="comment">/*testlyl为配置的ODBC数据源名称，这里根据自己的配置进行修改*/</span></span><br><span class="line">	<span class="keyword">if</span> (!(ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;连接数据库失败!\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ret = SQLAllocHandle(SQL_HANDLE_STMT, hdbc, &amp;hstmt);</span><br><span class="line">	<span class="comment">/*执行sql语句*/</span></span><br><span class="line">	SQLCHAR sql1[] = <span class="string">&quot;use DCWLW&quot;</span>;</span><br><span class="line">	SQLCHAR sql2[] = <span class="string">&quot;SELECT [report_5001_id]\</span></span><br><span class="line"><span class="string">		, [report_str]\</span></span><br><span class="line"><span class="string">		, isnull([row_state],0) as row_state\</span></span><br><span class="line"><span class="string">		, [create_date]\</span></span><br><span class="line"><span class="string">		, [barcode]\</span></span><br><span class="line"><span class="string">		, [states]\</span></span><br><span class="line"><span class="string">		, [dy]\</span></span><br><span class="line"><span class="string">		, [dl]\</span></span><br><span class="line"><span class="string">		, [wdmax]\</span></span><br><span class="line"><span class="string">		, [wdmin]\</span></span><br><span class="line"><span class="string">		, [soc]\</span></span><br><span class="line"><span class="string">		, [err_str]\</span></span><br><span class="line"><span class="string">		, [err_str2]\</span></span><br><span class="line"><span class="string">		, [err_str3]\</span></span><br><span class="line"><span class="string">		, [err_str4]\</span></span><br><span class="line"><span class="string">		FROM[DCWLW].[dbo].[report_5001]\</span></span><br><span class="line"><span class="string">		where cast([dl] as decimal) &gt; 50.0 and create_date &gt; &#x27;2021&#x27;&quot;</span>;</span><br><span class="line">	ret = SQLExecDirect(hstmt, sql1, SQL_NTS);</span><br><span class="line">	ret = SQLExecDirect(hstmt, sql2, SQL_NTS);</span><br><span class="line">	<span class="keyword">if</span> (ret == SQL_SUCCESS || ret == SQL_SUCCESS_WITH_INFO)</span><br><span class="line">	&#123;</span><br><span class="line">		SQLCHAR str1[<span class="number">50</span>], str2[<span class="number">50</span>], str3[<span class="number">50</span>], str4[<span class="number">50</span>], str5[<span class="number">50</span>], str6[<span class="number">50</span>];</span><br><span class="line">		<span class="comment">//SQLINTEGER len_str1, len_str2, len_str3, len_str4, len_str5, len_str6;</span></span><br><span class="line">		SQLLEN len_str1, len_str2, len_str3, len_str4, len_str5, len_str6;</span><br><span class="line">		<span class="keyword">while</span> (SQLFetch(hstmt) != SQL_NO_DATA)</span><br><span class="line">		&#123;</span><br><span class="line">			SQLGetData(hstmt, <span class="number">1</span>, SQL_C_CHAR, str1, <span class="number">50</span>, &amp;len_str1);   <span class="comment">//获取第一列数据</span></span><br><span class="line">			SQLGetData(hstmt, <span class="number">2</span>, SQL_C_CHAR, str2, <span class="number">50</span>, &amp;len_str2);</span><br><span class="line">			SQLGetData(hstmt, <span class="number">3</span>, SQL_C_CHAR, str3, <span class="number">50</span>, &amp;len_str3);</span><br><span class="line">			SQLGetData(hstmt, <span class="number">4</span>, SQL_C_CHAR, str4, <span class="number">50</span>, &amp;len_str4);</span><br><span class="line">			SQLGetData(hstmt, <span class="number">5</span>, SQL_C_CHAR, str5, <span class="number">50</span>, &amp;len_str5);</span><br><span class="line">			SQLGetData(hstmt, <span class="number">6</span>, SQL_C_CHAR, str6, <span class="number">50</span>, &amp;len_str6);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%s\t%s\t%s\t%s\t%s\t%s\n&quot;</span>, str1, str2, str3, str4, str5, str6);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	SQLFreeHandle(SQL_HANDLE_DBC, hdbc);<span class="comment">//释放连接句柄</span></span><br><span class="line">	SQLFreeHandle(SQL_HANDLE_ENV, henv);<span class="comment">//释放环境句柄</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，出现错误提示：<code>（SQLCHAR*）</code> 无法与 <code>（SQLWCHAR*）</code> 兼容，需要将工程的<strong>属性</strong>由 <strong>unicode</strong> 改为 <strong>多字节字符集</strong>。</p>
<h4 id="四、最后"><a href="#四、最后" class="headerlink" title="四、最后"></a>四、最后</h4><p>后来使用了 ADO，odbc 就到这儿了。</p>
]]></content>
      <categories>
        <category>杂文集合</category>
      </categories>
      <tags>
        <tag>连接数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu开机错误</title>
    <url>/2021/08/ubuntu%E5%BC%80%E6%9C%BA%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<h2 id="1-开机画面"><a href="#1-开机画面" class="headerlink" title="1.开机画面"></a>1.开机画面</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ubuntu error:unknown filesystem</span><br><span class="line">grub rescue&gt;</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="2-跳到答案"><a href="#2-跳到答案" class="headerlink" title="2.跳到答案"></a>2.跳到答案</h2><p><a href="#j1">跳转到解决方法1</a></p>
<p><a href="#j2">跳转到解决方法2</a></p>
<hr>
<h2 id="3-过程1"><a href="#3-过程1" class="headerlink" title="3.过程1"></a>3.过程1</h2><p>在学习 linux 系统操作时，使用 fdisk 工具修改了 &#x2F;dev&#x2F;sda5 分区的文件系统，将其从 Linux 修改为了 Linux LVM<br>具体操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@xbc:/<span class="comment"># fdisk /dev/sda</span></span><br><span class="line"></span><br><span class="line">命令（输入 m 获取帮助）：t</span><br><span class="line">分区号（1,2,5, 默认 5）：5</span><br><span class="line">Hex 代码（输入 L 列出所有代码）：8e</span><br><span class="line">命令（输入 m 获取帮助）：w</span><br></pre></td></tr></table></figure>

<p>修改完后，当下并没有发生什么错误，后来也就没管。<br>因为是虚拟机，所以也没有关机过。后来系统更新，重启完后，就发现无法正常进入系统，进入开机引导：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">ubuntu error:unknown filesystem</span><br><span class="line">grub rescue&gt;</span><br></pre></td></tr></table></figure>

<p>在此模式下，输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grub rescue&gt; <span class="built_in">ls</span></span><br><span class="line">(hd0),(hd0,msdos5),(hd0,msdos1)</span><br><span class="line"></span><br><span class="line">grub rescur&gt; <span class="built_in">set</span></span><br><span class="line">cmdpath=hd0</span><br><span class="line">prefix=(hd0,msdos5)/boot/grub</span><br><span class="line">root=hd0,msdos5</span><br></pre></td></tr></table></figure>



<hr>
<p><strong>以下是我一开始查询到的解决方案</strong></p>
<h2 id="4-方案1"><a href="#4-方案1" class="headerlink" title="4.方案1"></a>4.方案1</h2><p><span id="j1">因为</span>是初次遇到，就去百度，多数回答都是 ls 以上三个序列，找到 Ubuntu 的安装分区：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> (hd0)</span><br><span class="line"><span class="built_in">ls</span> (hd0,msdos5)</span><br><span class="line"><span class="built_in">ls</span> (hd0,msdos1)</span><br></pre></td></tr></table></figure>
<p>其中一个有分区信息后，设置引导程序：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> root=hd0,msdosX    <span class="comment">#X为安装的分区</span></span><br><span class="line"><span class="built_in">set</span> prefix=(hd0,msdosX)</span><br></pre></td></tr></table></figure>
<p>然后输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">insmod normal</span><br><span class="line">normal</span><br></pre></td></tr></table></figure>

<p>选择 ubuntu，进入之后启动终端，更新 grub</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo update-grub</span><br><span class="line">sudo grub-install /dev/sda</span><br></pre></td></tr></table></figure>
<p>然而以上方案，我在第一步时就卡住了，ls 三个序列，打印的信息都是 unknown filesystem！<br>查看他们发生此情况的原因，大多都是在windows上进行了磁盘碎片整理之类的操作，导致找不到引导程序，因此才需要 ls 寻找后重新指定启动位置。</p>
<hr>
<h2 id="5-过程2"><a href="#5-过程2" class="headerlink" title="5.过程2"></a>5.过程2</h2><p>而我的系统产生此错误的原因可能是错误地修改了分区的文件系统，导致分区的引导程序损坏。<br>通过百度，看到两种进一步处理此问题的方案：</p>
<ol>
<li>在虚拟机上重新建立一个 ubuntu 系统，将原系统硬盘挂载到新系统中，然后进行修复</li>
<li>进入 BIOS，使用从光盘启动，进入试用系统后，进行修复</li>
</ol>
<p>选择方法1感觉太麻烦，而我刚好保存了 ubuntu 的镜像文件，因此尝试方法2。</p>
<p>在开机进入 BIOS 时尝试了几次，都没成功，于是查到</p>
<ul>
<li><p><strong>vmware 虚拟机进入 BIOS 的方法，通过 虚拟机-&gt;电源-&gt;打开电源时进入固件，顺利进入 BIOS</strong></p>
</li>
<li><p>在 BIOS 中将从光盘启动移动到硬盘上面，保存退出</p>
</li>
<li><p>如此顺利加载镜像文件后，进入安装界面，选择 <em>试用 ubuntu</em></p>
</li>
<li><p>首先我先尝试 <code>fsck -a /dev/sda5</code> 命令修复，结果报错</p>
</li>
<li><p>后 <code>fdisk /dev/sda</code>，将上边修改为 Linux LVM 的文件系统改回 Linux</p>
</li>
<li><p>检查超级块 <code>mke2fs -n /dev/sda5</code><br>重建超级块 <code>e2fsck -b 32768 /dev/sda5</code></p>
<p>以上命令也报出了错误：<code>e2fsck:超级块中的幻数有错~~~~</code></p>
</li>
</ul>
<p>没有头绪</p>
<hr>
<h2 id="6-方案2"><a href="#6-方案2" class="headerlink" title="6.方案2"></a>6.方案2</h2><p><span id='j2'>继续</span>查找，看到一条指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fsck -y /dev/sda5    <span class="comment">#其中 -y 参数指定对于出现问题的处理默认动作</span></span><br></pre></td></tr></table></figure>

<p>进行尝试，结果顺利进行了修复！</p>
<p>！！！这里我有点疑问，我一开时输入命令 <code>fsck -a /dev/sda5</code><br>翻阅书籍，-a 与 -y 都是 如果检测到错误，自动修复文件系统，为什么前者不行，难道是翻译问题？（待查）</p>
<p>总之修复完后，重启系统，顺利进入!</p>
<p>进入登陆界面前，图形界面中间有一条信息 <code>please remove the installation medium,then press enter</code></p>
<p>忽视后，进入登陆界面，顺利登陆</p>
<p>至此，以上问题解决。</p>
<hr>
<h2 id="7-结语"><a href="#7-结语" class="headerlink" title="7.结语"></a>7.结语</h2><p>此问题花费了我大约2个小时，耽误了读书时间，不过在解决问题时，查看了很多博客资料，也有很多收获</p>
<p>2个小时，顺利解决一个问题，好于读60页书，不算浪费时间。</p>
]]></content>
      <categories>
        <category>疑难杂症</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>linux查询系统信息</title>
    <url>/2021/08/linux%E6%9F%A5%E8%AF%A2%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/qq_31278903/article/details/83146031">https://blog.csdn.net/qq_31278903/article/details/83146031</a></p>
]]></content>
      <categories>
        <category>杂文集合</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>它们是什么？</title>
    <url>/2021/06/%E5%AE%83%E4%BB%AC%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    <content><![CDATA[<p>那些我们每天在使用的编程语言、脚本、框架、工具等，是否能准确描述它们的定义？</p>
<p>当有人问：它是什么？我们至少有一个标准的回答。</p>
<p>&#x3D;&#x3D;我准备把它做成一个计算机基础知识百科，时时自检&#x3D;&#x3D;</p>
<h5 id="1-什么是编程语言？"><a href="#1-什么是编程语言？" class="headerlink" title="1.什么是编程语言？"></a>1.什么是编程语言？</h5><p>编程语言（programming language）可以简单的理解为一种计算机和人都能识别的语言。一种计算机语言让程序员能够准确地定义计算机所需要使用的数据，并精确地定义在不同情况下所应当采取的行动。</p>
<h5 id="3-C是什么？"><a href="#3-C是什么？" class="headerlink" title="3.C是什么？"></a>3.C是什么？</h5><p>C语言是一门面向过程的、抽象化的通用程序设计语言。</p>
<p>广泛应用于底层开发。C语言能以简易的方式编译、处理低级存储器。C语言是仅产生少量的机器语言以及不需要任何运行环境支持便能运行的高效率程序设计语言。尽管C语言提供了许多低级处理的功能，但仍然保持着跨平台的特性，以一个标准规格写出的C语言程序可在包括类似嵌入式处理器以及超级计算机等作业平台的许多计算机平台上进行编译。</p>
<h5 id="4-C-是什么？"><a href="#4-C-是什么？" class="headerlink" title="4.C++是什么？"></a>4.C++是什么？</h5><p>C++是C语言的继承，它既可以进行<a href="https://baike.baidu.com/item/C%E8%AF%AD%E8%A8%80/105958">C语言</a>的过程化<a href="https://baike.baidu.com/item/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/223952">程序设计</a>，又可以进行以抽象数据类型为特点的基于对象的程序设计，还可以进行以继承和多态为特点的面向对象的程序设计。</p>
<p>C++擅长面向对象程序设计的同时，还可以进行基于过程的程序设计，因而C++就适应的问题规模而论，大小由之。</p>
<h5 id="5-Java是什么？"><a href="#5-Java是什么？" class="headerlink" title="5.Java是什么？"></a>5.Java是什么？</h5><p>Java是一种简单的，跨平台的，面向对象的，分布式的，解释的，健壮的安全的，结构的中立的，可移植的，性能很优异的多线程的，动态的语言。</p>
<h5 id="6-python是什么？"><a href="#6-python是什么？" class="headerlink" title="6.python是什么？"></a>6.python是什么？</h5><p>Python 是一个高层次的结合了解释性、编译性、互动性和面向对象的脚本语言。</p>
<h5 id="7-什么是数据库？"><a href="#7-什么是数据库？" class="headerlink" title="7.什么是数据库？"></a>7.什么是数据库？</h5><p>数据库是结构化信息或数据（一般以电子形式存储在计算机系统中）的有组织的集合，通常由 数据库管理系统 (DBMS) 来控制。</p>
<h5 id="8-sql是什么？"><a href="#8-sql是什么？" class="headerlink" title="8.sql是什么？"></a>8.sql是什么？</h5><p>SQL 是一种标准的数据库语言。</p>
<h5 id="9-mysql是什么？"><a href="#9-mysql是什么？" class="headerlink" title="9.mysql是什么？"></a>9.mysql是什么？</h5><p>MySQL是一个数据库管理系统，允许您管理关系数据库。它是Oracle支持的开源软件。</p>
<h5 id="10-sql-server是什么？"><a href="#10-sql-server是什么？" class="headerlink" title="10.sql server是什么？"></a>10.sql server是什么？</h5><p>SQL Server是由Microsoft开发和销售的关系数据库管理系统或RDBMS。</p>
<h5 id="11-什么是脚本？"><a href="#11-什么是脚本？" class="headerlink" title="11.什么是脚本？"></a>11.什么是脚本？</h5><p>又被称为扩建的语言, 或者动态语言, 是一种编程语言, 用来控制软件应用程序, 脚本通常是以文本 (ASCⅡ) 保存, 只是在被调用时进行解释或者编译。</p>
<p>脚本（Script）是一种批处理文件的延伸，是一种纯文本保存的程序，一般来说的计算机脚本程序是确定的一系列控制计算机进行运算操作动作的组合，在其中可以实现一定的逻辑分支等。 脚本简单地说就是一条条的文字命令，这些文字命令是可以看到的（如可以用记事本打开查看、编辑），脚本程序在执行时，是由系统的一个解释器，将其一条条的翻译成机器可识别的指令，并按程序顺序执行。 因为脚本在执行时多了一道翻译的过程，所以它比二进制程序执行效率要稍低一些。</p>
<h5 id="12-Javascript是什么？"><a href="#12-Javascript是什么？" class="headerlink" title="12.Javascript是什么？"></a>12.Javascript是什么？</h5><p>JavaScript 是一种脚本，一门编程语言，它可以在网页上实现复杂的功能，网页展现给你的不再是简单的静态信息，而是实时的内容更新，交互式的地图，2D&#x2F;3D 动画，滚动播放的视频等等。</p>
<h5 id="13-html是什么？"><a href="#13-html是什么？" class="headerlink" title="13.html是什么？"></a>13.html是什么？</h5><p>HTML 不是一门编程语言，而是一种用于定义内容结构的标记语言。HTML 由一系列的元素（elements）组成，这些元素可以用来包围不同部分的内容，使其以某种方式呈现或者工作。 </p>
<h5 id="14-css是什么？"><a href="#14-css是什么？" class="headerlink" title="14.css是什么？"></a>14.css是什么？</h5><p>层叠样式表(英文全称：Cascading Style Sheets)是一种用来表现HTML（标准通用标记语言的一个应用）或XML（标准通用标记语言的一个子集）等文件样式的计算机语言。CSS不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。 CSS 能够对网页中元素位置的排版进行像素级精确控制，支持几乎所有的字体字号样式，拥有对网页对象和模型样式编辑的能力。</p>
<h5 id="15-socket是什么？"><a href="#15-socket是什么？" class="headerlink" title="15.socket是什么？"></a>15.socket是什么？</h5><p>socket 的原意是“插座”，在计算机通信领域，socket 被翻译为“套接字”，它是计算机之间进行通信的一种约定或一种方式。通过 socket 这种约定，一台计算机可以接收其他计算机的数据，也可以向其他计算机发送数据。</p>
<p>socket是对TCP&#x2F;IP协议的封装，它的出现只是使得程序员更方便地使用TCP&#x2F;IP协议栈而已。socket本身并不是协议，它是应用层与TCP&#x2F;IP协议族通信的中间软件抽象层，是一组调用接口（TCP&#x2F;IP网络的API函数）</p>
]]></content>
      <categories>
        <category>杂文集合</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>函数参数及可变参</title>
    <url>/2021/10/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E5%8F%8A%E5%8F%AF%E5%8F%98%E5%8F%82/</url>
    <content><![CDATA[<p>首先了解一个新知识，函数的参数列表的地址是顺序排列的，以下代码验证这一知识。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func1</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*(&amp;a+<span class="number">1</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*(&amp;a+<span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func2</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*((<span class="type">char</span>*)&amp;a+<span class="keyword">sizeof</span>(a)));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*((<span class="type">char</span>*)&amp;a+<span class="keyword">sizeof</span>(a)*<span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    func1(<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>);<span class="comment">//打印1，4，6</span></span><br><span class="line">    func2(<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>);<span class="comment">//打印2，5，8</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由此来看可变参 <code>va_list,va_start,va_arg,va_end</code>，就可以更好的理解了。</p>
<p>在 stdarg.h 中，定义了这些宏</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> *va_list;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __va_argsiz(t) (((sizeof(t)+sizeof(int)-1)/sizeof(int))*sizeof(int))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> va_start(ap, pN) ((ap)=((va_list)(&amp;pN)+__va_argsiz(pN)))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> va_end(ap) ((void)(ap=(va+list)0))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> va_arg(ap, t) (((ap)=(ap)+__va_argsiz(t)),*((t*)(void*)((ap)-__va_argsiz(t))))</span></span><br></pre></td></tr></table></figure>

<p>转换下来，与示例程序类似，区别是取得变长参数地址不同，因为要进行字节对齐，在32位或64位机器上，sizeof(int) 都是 4：</p>
<p>$$<br>__va_argsiz(t) &lt;&#x3D;&gt; (\frac{sizeof(t)+sizeof(int)-1}{sizeof(int)}*sizeof(int))<br>$$</p>
<p>$$<br>va_start(ap, pN)&lt;&#x3D;&gt; (ap&#x3D;(char*)&amp;pN+\frac{sizeof(pN)+sizeof(int)-1}{sizeof(int)}*sizeof(int))<br>$$</p>
<p>使用的例子：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">VOID <span class="title function_">iot_debug_print</span><span class="params">(CHAR *fmt, ...)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> buff[<span class="number">2048</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    va_list args;</span><br><span class="line">    va_start(args, fmt);</span><br><span class="line">    vsnprintf(buff, <span class="number">2048</span>, fmt, args);</span><br><span class="line">    iot_uart_write(OPENAT_UART_USB, (UINT8*)buff, <span class="built_in">strlen</span>(buff));</span><br><span class="line">    va_end(args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>杂文集合</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>shell自动填写密码</title>
    <url>/2022/02/shell%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%86%99%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<p>每次开启虚拟机，都需要重置一下网络才能连接，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service network-manager restart</span><br></pre></td></tr></table></figure>

<p>每次手动输入有点麻烦，写一个脚本更方便一些，但脚本需要输入root密码，查了下可以使用sudo -S选项来解决，man sudo内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-S, --stdin</span><br><span class="line">                 Write the prompt to the standard error and read the password from the standard input</span><br><span class="line">                 instead of using the terminal device.</span><br></pre></td></tr></table></figure>

<p>因此脚本可以这样：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">echo &quot;123&quot; | sudo -S service network-manager restart</span><br></pre></td></tr></table></figure>

<hr>
<p>以上是一种方法，第二种方法，安装 expect，运行脚本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install expcet</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/expect</span></span><br><span class="line"></span><br><span class="line">set timeout 30</span><br><span class="line">set host &quot;118.xxx.xxx.xxx&quot;</span><br><span class="line">set username &quot;root&quot;</span><br><span class="line">set password &quot;12345677&quot;</span><br><span class="line"></span><br><span class="line">spawn ssh $username@$host</span><br><span class="line">expect &quot;*password*&quot; &#123;send &quot;$password\r&quot;&#125;</span><br><span class="line">interact</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>杂文集合</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>嵌入式芯片基础</title>
    <url>/2021/09/%E5%B5%8C%E5%85%A5%E5%BC%8F%E8%8A%AF%E7%89%87%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>以stm32f103c8t6为例：</p>
<p>内核：ARM 32位Cortex-M3 CPU，72MHz工作频率，是RISC处理器</p>
<hr>
<p>存储器：</p>
<p>ROM（flash）：64K字节，存储 Code 和 RO-data</p>
<p>RAM（sram）：20K字节，存储 RW-data 和 ZI-data</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/20190218114244769.png" alt="在这里插入图片描述"></p>
<p>flash里面的数据掉电可保存，sram中的数据掉电就丢失，sram的执行速度要快于flash，flash容量大于sram。<br>上方的最低内存地址，最高地址，都是在flash和sram中。<br>正常下载程序都是下载存储进flash里面。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Code:代码存储区</span><br><span class="line"></span><br><span class="line">RO-data:只读数据存储区，</span><br><span class="line">存储文字常量</span><br><span class="line"></span><br><span class="line">RW-data:读写数据存储区，</span><br><span class="line">存储包括栈区（stack）、堆区（heap）、全局变量区（静态区）（static）</span><br><span class="line"></span><br><span class="line">ZI-data:零初始化数据区</span><br><span class="line">//--------------------------------------------------------------</span><br><span class="line">全局变量存放在静态存储区,位置是固定的。 </span><br><span class="line">局部变量在栈空间,栈地址是不固定的。</span><br><span class="line">栈：就是那些由编译器在需要的时候分配，在不需要的时候自动清除的变量的存储区。里面的变量通常是局部变量、函数参数等。</span><br><span class="line">堆：就是那些由new分配的内存块，他们的释放编译器不去管，由我们的应用程序去控制，一般一个new就要对应一个delete。如果程序员没有释放掉，那么在程序结束后，操作系统会自动回收。</span><br><span class="line">自由存储区：就是那些由malloc等分配的内存块，他和堆是十分相似的，不过它是用free来结束自己的生命的。</span><br><span class="line">全局存储区（静态存储区）：全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域， 未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。程序结束后由系统释放。</span><br><span class="line">常量存储区：这是一块比较特殊的存储区，他们里面存放的是常量，不允许修改。</span><br></pre></td></tr></table></figure>
<p>使用mdk编译时，可以看到output：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">linking...</span><br><span class="line">Program Size: Code=16904 RO-data=268 RW-data=320 ZI-data=19368  </span><br></pre></td></tr></table></figure>

<hr>
<p>封装：LQFP64，薄型QFP（Low-profile Quad Flat Package），中文含义叫四方扁平式封装技术（Quad Flat Package）。引脚在外面露着，爬着。</p>
<p>其它封装：FBGA，是<em><strong>Fine-Pitch Ball Grid Array</strong></em>（意译为“<a href="https://baike.baidu.com/item/%E7%BB%86%E9%97%B4%E8%B7%9D%E7%90%83%E6%A0%85%E9%98%B5%E5%88%97/9241045">细间距球栅阵列</a>”）的缩写，是细间距球栅阵列，是一种在底部有焊球的面阵引脚结构。没有引脚，贴着。</p>
<hr>
<p>系统架构</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/image-20210929091554826.png" alt="image-20210929091554826"></p>
<hr>
<p>一个非常好的博客文章：<a href="https://www.cnblogs.com/yihuihong/p/4965997.html">https://www.cnblogs.com/yihuihong/p/4965997.html</a></p>
<p>在此备份👇：</p>
<ol>
<li>芯片结构组成图：</li>
</ol>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/615824-20151114225549759-412496293.jpg" alt="img"></p>
<ol start="2">
<li>STM32内部结构</li>
</ol>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/615824-20151114225819728-1602787293.jpg" alt="img"></p>
<ol start="3">
<li>Cortex-M3模块结构图</li>
</ol>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/615824-20151114230206103-764427193.jpg" alt="img"></p>
<ol start="4">
<li>STM3210X内部结构</li>
</ol>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/615824-20151114230423587-315199759.jpg" alt="img"></p>
<ol start="5">
<li>桥</li>
</ol>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/615824-20151114230556290-1068564531.png" alt="img"></p>
<hr>
<p><strong>四个主动单元 :</strong></p>
<p>​    M3内核的ICode总线(I-bus)、DCode总线(D-bus)、 系统总线(S-bus)、DMA(DMA1、DMA2、以太网DMA) </p>
<p><strong>四个被动单元</strong> :</p>
<p>​    内部SRAM、内部闪存、FSMC、AHB到APB桥 </p>
<p><strong>ICode总线 :</strong></p>
<p>​    将M3内核的指令总线与FLASH指令接口相连，用于指令预取</p>
<p><strong>DCode总线:</strong></p>
<p>​    将M3内核的数据总线与FLASH数据接口相连，常量加载和调试 </p>
<p><strong>系统总线 :</strong></p>
<p>将M3内核的系统总线与总线矩阵相连，协调内核与DMA访问 </p>
<p><strong>DMA总线:</strong> </p>
<p>将DMA的AHB主控接口与总线矩阵相连，协调CPU的DCode和DMA到SRAM、闪存、外设的访问</p>
<p><strong>总线矩阵:</strong></p>
<p>协调内核系统总线和DMA主控总线间的访问仲裁，仲裁采用轮换算法。</p>
<p>此总线矩阵由三个驱动部件(CPU 的 DCode、系统总线和 DMA 总线)和三个被动部件(闪存存储器接口、SRAM 和 AHB2APB 桥)构成。</p>
<p>AHB 外设通过总线矩阵与系统总线相连，允许 DMA 访问。</p>
<p><strong>AHB到APB桥 :</strong></p>
<p>两个AHB&#x2F;APB桥在AHB和两个APB总线间提供同步连接</p>
<p>APB1速度限于36MHz，APB2全速最高72MHz</p>
<hr>
<p>存储器映像<br><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/image-20210929163541040.png" alt="image-20210929163541040"></p>
<hr>
<p>时钟</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/image-20210929172247441.png" alt="image-20210929172247441"></p>
]]></content>
      <categories>
        <category>杂文集合</category>
      </categories>
      <tags>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>能力培养</title>
    <url>/2021/06/%E8%83%BD%E5%8A%9B%E5%9F%B9%E5%85%BB/</url>
    <content><![CDATA[<ol>
<li>发现问题</li>
<li>查阅文献（解决问题）</li>
<li>总结归纳</li>
<li>试验设计</li>
<li>组织实施</li>
<li>交流表达</li>
</ol>
]]></content>
      <categories>
        <category>杂文集合</category>
      </categories>
      <tags>
        <tag>杂文</tag>
      </tags>
  </entry>
  <entry>
    <title>理解JavaWeb工程</title>
    <url>/2021/08/%E7%90%86%E8%A7%A3JavaWeb%E5%B7%A5%E7%A8%8B/</url>
    <content><![CDATA[<p>struts2项目的基本框架，是一个三层结构。action从service接口得到数据负责处理业务与过滤业务，把数据给网页。service是定义接口，serviceimpl是定义接口的实现，是功能代码编写地方，它从daoimpl接口中得到数据，而dao是对数据库进行操作的代码。简而言之，action调用serviceimpl，service实现serviceimpl，serviceimpl调用daoimpl，dao实现daoimpl。</p>
<p>Struts的基层结构，jsp页面是表示层View， Action是业务逻辑即控制层Control，Dao、DaoImpl、Service、ServiceImpl都是数据访问曾的东西。一般性Service、ServiceImpl是连接 Action和Dao、DaoImpl的，一般性用Spring的注解在xml中，Dao、DaoImpl是最后操作数据库的，如果你用ibatis的话，用Service、ServiceImpl调用Dao、DaoImpl，然后数据库的操作语句的调用写在Dao、DaoImpl，最后真正数据库操作语句写在相应的xml中。</p>
]]></content>
      <categories>
        <category>杂文集合</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>设置hosts跳过DNS</title>
    <url>/2021/06/%E8%AE%BE%E7%BD%AEhosts%E8%B7%B3%E8%BF%87DNS/</url>
    <content><![CDATA[<p>使用 <a href="http://tool.chinaz.com/dns/">Dns检测|Dns查询 - 站长工具 (chinaz.com)</a> 查询要访问的网站</p>
<p>选择一个靠谱的ip</p>
<p>在 C:\Windows\System32\drivers\etc\hosts 文件添加 ip 与 域名</p>
<p>例如</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/image-20210618164259451.png" alt="image-20210618164259451"></p>
<p>在 hosts 文件后 添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">13.114.40.48 github.com</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>杂文集合</category>
      </categories>
  </entry>
  <entry>
    <title>中秋未圆</title>
    <url>/2021/09/%E4%B8%AD%E7%A7%8B%E6%9C%AA%E5%9C%86/</url>
    <content><![CDATA[<p>2013-09-19</p>
<p>据说今天的月亮最圆，<br>可我却看不到她的脸。<br>傻傻要和人共婵娟，<br>到哪里去体验思念、、</p>
<p>想要说些什么？<br>做一些浮夸的修饰？<br>想说给谁听？<br>表明自己多期待激动？</p>
<p>今夜我什么都不说，<br>让层层围猎的乌云去说，<br>让汹汹而来的秋风去说，<br>让涩涩垂落的雨点去说…<br>没人说的出的心情<br>没有人，包括你、</p>
<p>月亮无法慰疗情绪，<br>无奈低头出神地看<br>云的黑幕，<br>焦急等待却<br>可能是另一个天明：<br>悲哀的谢幕。</p>
<p>我眼中的月亮…<br>保持了昨天的颜色，<br>记忆中的形状，<br>多一个口子，<br>残缺 ，不全</p>
<p>因而<br>嫦娥借此逃离，<br>玉兔借此破碎，<br>吴刚弃斧<br>桂树凋零<br>寒宫黯淡</p>
<p>因而<br>传说并不灵验，<br>据说有时伤人…<br>八年实在不短，<br>足够人事凋零。。。</p>
<p>但但，而而<br>心碎成事实，<br>呻吟济何事！<br>到底是<br>人在窗前无味，<br>我在床上早睡。。。</p>
]]></content>
      <categories>
        <category>生活感想</category>
      </categories>
  </entry>
  <entry>
    <title>进程间通信：管道</title>
    <url>/2021/11/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%EF%BC%9A%E7%AE%A1%E9%81%93/</url>
    <content><![CDATA[<h3 id="一、非命名管道"><a href="#一、非命名管道" class="headerlink" title="一、非命名管道"></a>一、非命名管道</h3><p>非命名管道适用于父子进程之间通信。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">pid_t</span> result;</span><br><span class="line">	<span class="type">int</span> r_num;</span><br><span class="line">	<span class="type">int</span> pipe_fd[<span class="number">2</span>];</span><br><span class="line">	<span class="type">char</span> buf_r[<span class="number">100</span>],buf_w[<span class="number">100</span>];</span><br><span class="line">	<span class="built_in">memset</span>(buf_r,<span class="number">0</span>,<span class="built_in">sizeof</span>(buf_r));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">pipe</span>(pipe_fd)&lt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;create pipe fail&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	result = fork();<span class="comment">//)tu</span></span><br><span class="line">	<span class="keyword">if</span>(result &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;create sub procedure fail&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(result == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">close</span>(pipe_fd[<span class="number">1</span>]);</span><br><span class="line">		<span class="keyword">if</span>((r_num = <span class="built_in">read</span>(pipe_fd[<span class="number">0</span>],buf_r,<span class="number">100</span>)) &gt; <span class="number">0</span>)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;sub procedure %d cha, %s \n&quot;</span>,r_num,buf_r);</span><br><span class="line">		<span class="built_in">close</span>(pipe_fd[<span class="number">0</span>]);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">close</span>(pipe_fd[<span class="number">0</span>]);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;please input str \n&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,buf_w);</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">write</span>(pipe_fd[<span class="number">1</span>],buf_w,<span class="built_in">strlen</span>(buf_w))!= <span class="number">-1</span>)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;father write: %s\n&quot;</span>,buf_w);</span><br><span class="line">		<span class="built_in">close</span>(pipe_fd[<span class="number">1</span>]);</span><br><span class="line">		<span class="built_in">waitpid</span>(result,<span class="literal">NULL</span>,<span class="number">0</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="二、命名管道"><a href="#二、命名管道" class="headerlink" title="二、命名管道"></a>二、命名管道</h3><p>进程间通信之FIFO，在阻塞模式下，只有当读和写模式都打开时才返回，否则一直阻塞；</p>
<p>非阻塞模式下，当读端没打开，则打开写端无效，返回错误。</p>
<p>1端</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i,rfd,wfd,len=<span class="number">0</span>,fd_in;</span><br><span class="line">	<span class="type">char</span> str[<span class="number">32</span>];</span><br><span class="line">	<span class="type">int</span> flag,stdinflag;</span><br><span class="line">	fd_set write_fd,read_fd;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">timeval</span> net_timer;</span><br><span class="line">	rfd=<span class="built_in">open</span>(<span class="string">&quot;fifo2&quot;</span>,O_RDONLY);</span><br><span class="line">	wfd=<span class="built_in">open</span>(<span class="string">&quot;fifo1&quot;</span>,O_WRONLY);  </span><br><span class="line">	<span class="keyword">if</span>(rfd&lt;=<span class="number">0</span>||wfd&lt;=<span class="number">0</span>) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;not created!\n&quot;</span>);</span><br><span class="line">		<span class="built_in">mkfifo</span>(<span class="string">&quot;fifo1&quot;</span>,S_IWUSR|S_IRUSR|S_IRGRP|S_IROTH);</span><br><span class="line">		<span class="built_in">mkfifo</span>(<span class="string">&quot;fifo2&quot;</span>,S_IWUSR|S_IRUSR|S_IRGRP|S_IROTH);</span><br><span class="line">		wfd=<span class="built_in">open</span>(<span class="string">&quot;fifo1&quot;</span>,O_WRONLY);</span><br><span class="line">		rfd=<span class="built_in">open</span>(<span class="string">&quot;fifo2&quot;</span>,O_RDONLY);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;this is 1!\n&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">FD_ZERO</span>(&amp;read_fd);</span><br><span class="line">		<span class="built_in">FD_SET</span>(rfd,&amp;read_fd);</span><br><span class="line">		<span class="built_in">FD_SET</span>(<span class="built_in">fileno</span>(stdin),&amp;read_fd);</span><br><span class="line">		net_timer.tv_sec=<span class="number">5</span>;</span><br><span class="line">		net_timer.tv_usec=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">memset</span>(str,<span class="number">0</span>,<span class="built_in">sizeof</span>(str));</span><br><span class="line">		<span class="keyword">if</span>(i=<span class="built_in">select</span>(rfd+<span class="number">1</span>,&amp;read_fd,<span class="literal">NULL</span>,<span class="literal">NULL</span>,&amp;net_timer)&lt;=<span class="number">0</span>)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">FD_ISSET</span>(rfd,&amp;read_fd))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">read</span>(rfd,str,<span class="built_in">sizeof</span>(str));</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;--------------\n&quot;</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;2:%s\n&quot;</span>,str);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">FD_ISSET</span>(<span class="built_in">fileno</span>(stdin),&amp;read_fd))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;--------------\n&quot;</span>);</span><br><span class="line">			<span class="built_in">fgets</span>(str,<span class="built_in">sizeof</span>(str),stdin);</span><br><span class="line">			len=<span class="built_in">write</span>(wfd,str,<span class="built_in">strlen</span>(str));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">close</span>(rfd);</span><br><span class="line">	<span class="built_in">close</span>(wfd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2端</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i,rfd,wfd,len=<span class="number">0</span>,fd_in;</span><br><span class="line">	<span class="type">char</span> str[<span class="number">32</span>];</span><br><span class="line">	<span class="type">int</span> flag,stdinflag;</span><br><span class="line">	fd_set write_fd,read_fd;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">timeval</span> net_timer;</span><br><span class="line">	wfd=<span class="built_in">open</span>(<span class="string">&quot;fifo2&quot;</span>,O_WRONLY);</span><br><span class="line">	rfd=<span class="built_in">open</span>(<span class="string">&quot;fifo1&quot;</span>,O_RDONLY);</span><br><span class="line">	<span class="keyword">if</span>(rfd&lt;=<span class="number">0</span>||wfd&lt;=<span class="number">0</span>) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;not created!\n&quot;</span>);</span><br><span class="line">		<span class="built_in">mkfifo</span>(<span class="string">&quot;fifo1&quot;</span>,S_IWUSR|S_IRUSR|S_IRGRP|S_IROTH);</span><br><span class="line">		<span class="built_in">mkfifo</span>(<span class="string">&quot;fifo2&quot;</span>,S_IWUSR|S_IRUSR|S_IRGRP|S_IROTH);</span><br><span class="line">		rfd=<span class="built_in">open</span>(<span class="string">&quot;fifo1&quot;</span>,O_RDONLY);</span><br><span class="line">		wfd=<span class="built_in">open</span>(<span class="string">&quot;fifo2&quot;</span>,O_WRONLY);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;this is 2!\n&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">FD_ZERO</span>(&amp;read_fd);</span><br><span class="line">		<span class="built_in">FD_SET</span>(rfd,&amp;read_fd);</span><br><span class="line">		<span class="built_in">FD_SET</span>(<span class="built_in">fileno</span>(stdin),&amp;read_fd);</span><br><span class="line">		net_timer.tv_sec=<span class="number">5</span>;</span><br><span class="line">		net_timer.tv_usec=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">memset</span>(str,<span class="number">0</span>,<span class="built_in">sizeof</span>(str));</span><br><span class="line">		<span class="keyword">if</span>(i=<span class="built_in">select</span>(rfd+<span class="number">1</span>,&amp;read_fd,<span class="literal">NULL</span>,<span class="literal">NULL</span>,&amp;net_timer)&lt;=<span class="number">0</span>)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">FD_ISSET</span>(rfd,&amp;read_fd))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">read</span>(rfd,str,<span class="built_in">sizeof</span>(str));</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;--------------\n&quot;</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;2:%s\n&quot;</span>,str);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">FD_ISSET</span>(<span class="built_in">fileno</span>(stdin),&amp;read_fd))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;--------------\n&quot;</span>);</span><br><span class="line">			<span class="built_in">fgets</span>(str,<span class="built_in">sizeof</span>(str),stdin);</span><br><span class="line">			len=<span class="built_in">write</span>(wfd,str,<span class="built_in">strlen</span>(str));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">close</span>(rfd);</span><br><span class="line">	<span class="built_in">close</span>(wfd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>杂文集合</category>
      </categories>
      <tags>
        <tag>CC++</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>大话，纪念死去的网名</title>
    <url>/2021/09/%E5%A4%A7%E8%AF%9D%EF%BC%8C%E7%BA%AA%E5%BF%B5%E6%AD%BB%E5%8E%BB%E7%9A%84%E7%BD%91%E5%90%8D/</url>
    <content><![CDATA[<p>我，再也不是当年那个浪子大卫 ，不总是在乐逍遥了。<br>原来觉得零度极点很冷，以为深白色很白，结果证明我不懂<br>     摇身一变，就成了小泽征尔 ，想找个知己来豪饮，最后独自迷迷糊糊竟然有种英雄很 ，却不知道恨什么<br>    从此觉得能称得上酒的，唯有杜康，连忧愁也有了寄托，这样，后来不论听到什么都傻傻的大笑之了</p>
]]></content>
      <categories>
        <category>生活感想</category>
      </categories>
  </entry>
  <entry>
    <title>九月九日忆商中兄弟</title>
    <url>/2021/09/%E4%B9%9D%E6%9C%88%E4%B9%9D%E6%97%A5%E5%BF%86%E5%95%86%E4%B8%AD%E5%85%84%E5%BC%9F/</url>
    <content><![CDATA[<p>自从那基动人心的高考过后，自从踏上去大学的班车而来，不论愿不愿意，心中已产生真实客观的时差，源自空间但却由时间负担：商中到交大两小时,交大隔商中两小时。<br>突然今天是九月九号，也许也是人生的一个变历，注意到了这个以前不在意的节日。九月九日，王维在古老的时光隧道里，过他孤独的重阳，记忆他山东的兄弟。而现在我们，开始走入新的人生诗篇。虽然确实，往事如烟，谁无离散，但，能够在某个特别的日子，怀念自己一起陪伴过的人，走过的路，度过的时光，自然是必要的，也是极好的。<br>一起玩命的踢足球，疯狂的上网打游戏，还有悠闲时去哪里闲逛，说一些蛋疼的话，做一些蛋疼的事。目睹别人他妈追妹子，羡慕嫉妒恨，一颗心与胆蠢蠢欲动，却只能在QQ或者微信上聊的火热，有时竟2B到求**你懂的。高一时抱怨高二假多，高二时嘲笑高一可怜，高三无可奈何，只能挤出一丁点时间实现自己的游戏大业。信誓旦旦的说自己怎样怎样，绝不哪些哪些，到头来还不成空，自己留在心里唏嘘或者发笑。<br>现在终于从高考场滚出来了，打出樊笼，发现原来原来的自己是一个笑话。不过我们最爱看的就是笑话。<br>现在，上大学了，太好了！<br>现在，上大学了，悲剧了！<br>不过还是想说，上大学了，努力了！</p>
]]></content>
      <categories>
        <category>生活感想</category>
      </categories>
  </entry>
  <entry>
    <title>又中秋</title>
    <url>/2021/09/%E5%8F%88%E4%B8%AD%E7%A7%8B/</url>
    <content><![CDATA[<p>昨天晚上还没有睡<br>今天早上就已经醒来<br>眨眼之间直是中秋了——<br>一年几度的牢骚又不得不发<br>不发对不起自己的良心<br>岁岁中秋、今又中秋<br>中秋我们谈他些什么呢？<br>我不谈月饼，也不谈团圆<br>那也只能谈嫦娥——<br>说嫦娥吧，<br>嫦娥的事已经被说完<br>吴刚的斧子已经砍烂<br>连自己都已经化成灰烬<br>连月宫也已经消逝<br>嫦娥也已经远去<br>后羿也早已经在传说中被遗忘<br>那还说什么？<br>我不禁有些怅然唏嘘<br>这情绪不知道是不是故作的<br>反正有些假惺惺<br>弥漫心头<br>这就是不睡觉的恶果吗<br>我想到了几千年人类的发展<br>不得不说这头还真是跳跃<br>不过这想法还是有道理的<br>我是这样想的<br>也许人们早就思量过：<br>哎，很简单<br>几千年了<br>人们进步了<br>飞机大炮了<br>火箭飞船了<br>卫星登月了<br>人的想象丰富了<br>但我却觉得思想被禁锢了<br>原因呢<br>科学嘛<br>科学是幻想的牢笼啊<br>如笼罩在这片天地的乌云啊<br>我的想象的鱼儿<br>本来是可以自由遨游飞翔的<br>它却告诉我<br>你只能在水中游<br>你出水会死<br>你没有翅膀怎么能飞？<br>鲲不能变成鹏<br>因为它们都不存在<br>梦也不能化成蝴蝶<br>那不合道理<br>我真想喷一口唾沫<br>吐在这天上<br>当年我不懂事<br>让你教了我科学<br>现在我知道了这么多<br>却像是自己饮了毒药<br>喝的越多中毒越深<br>毒死了梦想中的自己<br>我不喜欢啊<br>我又不想自己强迫自己<br>胡乱编造一些让人惊叹惊奇的物事<br>让人感叹我的创造力、随便拍手<br>我要的是有感而发啊<br>就像是看到了梅子感到了口渴<br>看到美女感到尿急<br>现在你说那美女是化了妆的<br>不化妆不能看<br>我想说去你妈的<br>不告诉我你会死？<br>我也不想自己骗自己<br>装作自己都是有感而发、体悟至斯<br>虽然先前的情绪有故作的成分<br>但我是有底线的<br>我也是有尊严的<br>而且我也不懂就算我装成那样<br>到底还有没有纯正的古人一样的战斗力<br>真是苦恼！<br>索性不想了睡觉</p>
]]></content>
      <categories>
        <category>生活感想</category>
      </categories>
  </entry>
  <entry>
    <title>岁月2013</title>
    <url>/2021/09/%E5%B2%81%E6%9C%882013/</url>
    <content><![CDATA[<p>  每天快乐一点，看花花草草长绿了笑一笑，看鸟儿飞过叫声清脆开心一下，看天空明朗白云悠悠心情敞开一点，就这样，就很好。<br>   在人有限的时间里，做喜欢的事越多，活着也越有意义。越懂得自己最想干什么，做下去，人生就没什么再可抱怨。</p>
<p>人为什么总是害怕痛苦，逃避痛苦，痛苦有那有意义的么可怕？我也未曾经历，也许我已忘记，但不论我是否经历过，我都认为那样的经历是有价值的，我假想那种痛彻心扉的感觉，是那么的刺激，与众不同，难以忘怀，让我在这多数千篇一律的日子中可以长久记忆。我也不管我是否会沉浸在那样的哀痛中，还是从中超脱，那是不重要的事。<br>                             ——4.7</p>
<p>不要嘲笑聪明的人做笨的事，也不怕做蠢事，聪明人做笨事是可贵的，笨人做笨事是应该的，笨的人做聪明的事太不自量力，结果就是愚蠢。愚蠢的人做聪明事是开窍在一时，做蠢事可以谅解。普通人做聪明事要么即将进化，要么就是用心不良，用心不良的人大多能做出聪明一点点的事，不过也很有限。聪明人有一半用心不良，蠢人很坏没关系，不过一匹夫。普通人发坏成不了大麻烦，聪明人一使坏就不那么聪明了，开始退化。但如果聪明人不认为自己是在干坏事，那就麻烦了。<br>大多数人在聪明与愚蠢之间徘徊。                            ——4.8</p>
<p>天朗气清，惠风和畅，正是学习的大好时间，抓紧了。岁月如一缕阳光，人们是沉湎在其中的孩子，在沙滩上奔跑嬉戏，不知不觉天就黑了，而孩子们也完成了一座座梦的城堡，在日暮下屹立。                        ——4.9</p>
<p>岁月也阻拦不住鎏金的阳光穿透云层，围城也留不住醇美的花香越过垣墙。因为有人在，路上阻尼便有天大，你终会来。<br>你把通往九天的束缚打破，放下一跳长梯，直通上凌霄宝殿<br>你将东海的水引向每一座山后，每当我爬上一座山，总能见到一片海<br>你为我插上一对银光闪耀的翅膀，任我俯视荆棘幽谷，驰骋天空<br>你把未来装饰成彩色的天堂花园，耐心等待，准备犒赏载梦归来的我<br> 是你，悄无声息下化作我的朝思暮想、魂牵梦绕、忧思难忘<br>乘着夜色弥散进我的梦嬴，由我的牵肠挂肚，扮作一段往事，是你                                       ——4.10</p>
<p>在绿茵 笼罩的走廊踱步，心情寄托在眼前明净的空气，充盈青草味的呼吸，让人心旷神怡。我可以给记忆剥离颜色，变成黑白，亦可将它染成水彩，想象那么美，诱我身不由己的沉迷。                                                   ——4.11</p>
<p>流年能带走人的思虑，梦想也随风而逝，那么留下的只应是一具残骸，笼罩的只应是一片悲哀。<br>岁月雕刻人的模子 ，假使刻得老了，把一种稳重镶嵌进去，那么它会变成一座雕塑吧，任风雨侵袭却不变质。        ——4.12</p>
<p>快乐发自心中，但微笑却来自表面，人可以强迫自己笑，但快不快乐，要看自己愿不愿意。     ——4.13</p>
<p>人生中有许多的不该错过。但错过了也没关系。要到达预期的站，错过也是一种美丽。     ——4.14<br>自谦是人更好的认识自己。细雨微风冲淡了夜色，湿润了月光，凄凉了时间，让一缕忧思飘散进人的梦里。<br>上善若水，低头是一种智慧。向日葵始终低着头来追逐阳光，而不是扬起头懒惰的接受日浴，是因为抬高头颅意味着露水无法流出，潮湿花葵，滋长细菌以致腐坏！很多植物低着头，从而不易折断，而且也无鸟类的着力点，从而保护了自己。刚强处下，柔弱处上，至刚易折，上善若水。              ——4.15 </p>
<p>勿以外表看人，人有很多感官，只凭眼睛有失偏颇。      ——4.16</p>
<p>再多的抱怨，也挽回不了损失的时间<br>把别人都想美一点，这样自己就不会太美了<br>给自己一个理由开心，让嫉恨没有理由<br>别在意别人怎么看自己，做错了就错了，一错再错也没关系 ，只要不妨害他人，就行<br>大行不顾细谨 ，可以宽容自己本性的弱点，也可以说是弊病，因为我就是这么一个人，不为谁而改变<br>别急着说话，要动脑筋，别说脏话，尤其是在干净人面前<br>                                          ——4</p>
<p>圆有棱角之争<br>人应有不同的侧面<br>不是圆的天下<br>傲慢与偏见<br>人应有角，世界才宽<br>我就是我，是不一样的水果<br>何方圆之能周兮！<br>不规则，是不一样的美<br>海纳百川<br>八仙桌，没有圆<br>敢走直线，世界才远<br>——4.22</p>
<p>人要不发泄，毛病会憋出来              ——4.23</p>
<p>勿记得失，珍惜即是 ——4.24</p>
<p>此诚危急存亡之秋也<br>电风扇的叶子不停轮转 ，将桌上散乱的试卷扬起，教室外面金黄的空气，热情地抚摸着每个行人的脸。她错乱的以为这样算是安慰，她痴痴想着有人会感激她，会为她歌唱。人人脸上弥漫着焦急，或者困意，无奈地用手遮挡黑色头发，没人愿意看那团伙一眼，已经遗忘，已经诅咒。我感谢她，不因为她的温热直至酷热，因为她带来的光明，能驱散抑郁在心头的乌云。               ——5.20</p>
<p>蝉：要活多久才算老去？我只鸣叫这个夏季，我的歌声，让天空绚烂，空气嘶哑<br>      十七年的蛰伏还不算长，我愿再鸣叫一个时辰<br>     一秒钟的记忆也不算短暂<br>                   ——5 </p>
<p>在一个荒凉的午后<br>我突然醒来<br>太阳西沉之时，空气冷却<br>我的心更迷惘<br>在阳光耀眼的早晨<br>我从床上慢慢爬起<br>恋恋不舍地放下沉醉一宿的梦境<br>去面对毫无起色的日子<br> ——7？ </p>
]]></content>
      <categories>
        <category>生活感想</category>
      </categories>
  </entry>
  <entry>
    <title>日记</title>
    <url>/2021/09/%E6%97%A5%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>2015-09-27<br>昨天晚上还没有睡<br>今天早上就已经醒来<br>眨眼之间直是中秋了——<br>一年几度的牢骚又不得不发<br>不发对不起自己的良心<br>岁岁中秋、今又中秋<br>中秋我们谈他些什么呢？<br>我不谈月饼，也不谈团圆<br>那也只能谈嫦娥——<br>说嫦娥吧，<br>嫦娥的事已经被说完<br>吴刚的斧子已经砍烂<br>连自己都已经化成灰烬<br>连月宫也已经消逝<br>嫦娥也已经远去<br>后羿也早已经在传说中被遗忘<br>那还说什么？<br>我不禁有些怅然唏嘘<br>这情绪不知道是不是故作的<br>反正有些假惺惺<br>弥漫心头<br>这就是不睡觉的恶果吗<br>我想到了几千年人类的发展<br>不得不说这头还真是跳跃<br>不过这想法还是有道理的<br>我是这样想的<br>也许人们早就思量过：<br>哎，很简单<br>几千年了<br>人们进步了<br>飞机大炮了<br>火箭飞船了<br>卫星登月了<br>人的想象丰富了<br>但我却觉得思想被禁锢了<br>原因呢<br>科学嘛<br>科学是幻想的牢笼啊<br>如笼罩在这片天地的乌云啊<br>我的想象的鱼儿<br>本来是可以自由遨游飞翔的<br>它却告诉我<br>你只能在水中游<br>你出水会死<br>你没有翅膀怎么能飞？<br>鲲不能变成鹏<br>因为它们都不存在<br>梦也不能化成蝴蝶<br>那不合道理<br>我真想喷一口唾沫<br>吐在这天上<br>当年我不懂事<br>让你教了我科学<br>现在我知道了这么多<br>却像是自己饮了毒药<br>喝的越多中毒越深<br>毒死了梦想中的自己<br>我不喜欢啊<br>我又不想自己强迫自己<br>胡乱编造一些让人惊叹惊奇的物事<br>让人感叹我的创造力、随便拍手<br>我要的是有感而发啊<br>就像是看到了梅子感到了口渴<br>看到美女感到尿急<br>现在你说那美女是化了妆的<br>不化妆不能看<br>我想说去你妈的<br>不告诉我你会死？<br>我也不想自己骗自己<br>装作自己都是有感而发、体悟至斯<br>虽然先前的情绪有故作的成分<br>但我是有底线的<br>我也是有尊严的<br>而且我也不懂就算我装成那样<br>到底还有没有纯正的古人一样的战斗力<br>真是苦恼！<br>索性不想了睡觉</p>
</blockquote>
<blockquote>
<p>2015-10-12<br>我心永恒！</p>
</blockquote>
<blockquote>
<p>2015-10-13<br>谷深藏幽草，山高林木遥。<br>间遇虫蛇走，时闻百兽嚎。<br>朝暮常相参，旦夕炎霜交。<br>风云有不测，南天雾缭绕。<br>云间惊雷震，顿起风雨潇。<br>俄而天愈狂，树木尽倾倒。<br>四荒剧滔流，生灵一合扫。<br>云雨未落尽，炎光烈日照。<br>靖安三日后，草长犹前朝。<br>万世一如斯，长生待天老。<br>天南不见人，唯有鬼魂飘。<br>异士忘生死，终年享寂寥。</p>
</blockquote>
<blockquote>
<p>2015-10-25<br>肩担潇雨<br>披挂邪风<br>发湿路远<br>雾澜阴云掩日<br>露珠薄暮侵寒<br>寒霜冷气<br>森森入骨<br>被清梦残</p>
</blockquote>
<blockquote>
<p>2015-10-28<br>纷纷红尘纷纷雨<br>落不尽三千天河水<br>洗不完世间铅华与尘埃<br>滚滚狂风滚滚雷<br>数不清万般过眼云<br>撼不动人世沧桑与陵谷<br>阳光浮华<br>一片悲欢场<br>在此碌碌过才知<br>活着是最一般的事<br>喝一壶酒尝一把醉<br>敬一番轮回与青春<br>想过往放肆与浪荡不曾<br>此刻不要留一点遗憾</p>
</blockquote>
<blockquote>
<p>2015-11-19<br>额。。。嗯，<br>窗外槐树的黄叶一直摇动<br>不知道是烟还是雾<br>应该是水汽吧 很浓<br>从看不到的烟囱冒出来<br>厚厚的水汽让我在温暖的室内想到了冷<br>我穿的有点多<br>坐在椅子上有点无聊<br>我敲打键盘时听到了水声<br>洗手间水管中掉下来的<br>同时寝室的门吱吱地不时响起<br>头顶楼上椅子磕地的声音<br>身后舍友神经地叫喊，噪音<br>门外楼道小声的呢喃<br>和一声一声的脚步<br>摩托车在远处街道嗡嗡而过<br>外面操场的嚎叫<br>除此之外没什么特别</p>
</blockquote>
<blockquote>
<p>2016-02-27 憎恨回廊<br>幽灵在我耳边愤怒的吼着：“你能感受得到吗？想要哭却找不到眼睛，想要喊却找不到嘴唇。想要愤怒却找不到脸庞，想要悲伤却找不到心脏。”<br>“夺走我身体的恶魔，我愿意用灵魂去诅咒！”</p>
</blockquote>
<blockquote>
<p>2016-02-27 歪理邪说<br>此时，在我身后远远一个人影正藏在树干后，暗暗看着我的动作。<br>（注意，上句以及本文中的所有未带引号的我，都只是一个称谓，与刘易斯·飞同指一人。这就像一个人，有人可以叫他大飞，有人可以叫他飞哥，有人可以叫他阿飞，有人可以叫他一娃，有人可以叫他椅子，“我”当然也可以叫他我，同样你也可以叫他别的。因此，上句中描述到一个人影私藏在我背后时，我肯定是不知道的，这点毋庸置疑。好了，言尽于此。另外，关于以上言论，合情合理，拒绝吐槽。嘿嘿。）</p>
</blockquote>
<blockquote>
<p>2016-03-03<br>狂暴的音乐<br>躁动的心跳<br>波动的空气<br>灼热的气氛</p>
</blockquote>
<blockquote>
<p>2016-03-07<br>时而迷茫无助，时而寂寞孤独，时而向往漂泊，时而希冀宁静</p>
</blockquote>
<blockquote>
<p>2016-03-25<br>超因果率<br>想象一下你是一本书的 主角，你正在经历一件件这样的事。<br>原本正面对你说话的一个有些阴郁，但也仅仅是阴郁的，年轻人，他正在跟你说着话，他的表情诡异莫测，但语言很有礼貌，他说到什么东西，神情稍稍一变，当你正要接话的时候，突然，眼前画风一换，对面这个年轻人突然给你一种时间流逝的感觉，口中血液缓缓流出，发出“嗬嗬”的嘶哑声音，面目狰狞，目光恐惧，他的身体上忽然多出一道巨大的伤口，甚至连衣服也不知在何时换了颜色，他踉跄倒地，鲜血直流，没过一会便不再呼吸。<br>这种离奇的事情你会经历很多次，每次遇到这样的事都很突然，没有任何前兆。<br>对面正跟你说话的人或许会突然死去，或者会突然消失，而且今后你将不会再遇见，或者突然间变成一个白发沧桑的迟暮老人，或者眼前女孩突然成为你的妻子，身边还拉着刚满一月的孩子，笑容满面地看着你，而你此时却还才十几二十岁，在此之前从未见过她，或者忽然间凭空出现一个自称你的孩子的人，而且对待你真的如同对待父亲一样，或者有时候你会突然受伤，生命垂危但刚好有解救自己的法子… …<br>这些事发生了很多次，你已不在惊奇，而是开始思考事情缘何至此。<br>你发现自己就像一本书的主角，身边的人和事原本按照一切正常的脚步走着，忽然，到一个时间点上，有一个神秘人，这个神秘人就像是正在看书的娇蛮读者，或是故意逗弄你的恶魔，他抽走了一个事件的许多情节，将一个事件以后将发生的场景，提前插入了现在的时间，正好像他只想看到那段，就那样做了，完全不考虑这事情是否合理。他蛮横地逻辑这样说道：哼，这件事发展下去也就那样，那就直接把结果拿过来好了，不用在发生中间那些繁琐的情节！<br>可惜你全然不知道中间忽略了什么，而你又错失了多少至关重要的信息，你无比迷茫，不知道接下去该干什么。<br>失因果迷宫<br>假如你正在解一道谜题，谜题的主人正是把你放入这个谜题的人，他不想看你解决的那样潇洒容易，于是提高了题目难度，所幸他只是想增加解题的难度，而不是制造一个无解的题目。你无法斥责他的奸诈狡猾，只能凭借自己原本的思维与推理走出这个迷宫，只能用无数次的试探来打开困局，搜寻一出出遗失的线索。<br>这就像原本你只是走在一条直直的没有岔道也没有弯路的隧道，突然，有人不想你走的那么顺遂，所以他把直道扭曲，多增加了许多岔口，而且他把你正走的这条道的对面换成一个通往未知地点的隧道，于是原本轻松简单的旅途结束了，毫无办法的你必须一步步地探寻，有可能到达了一个隧道的顶端，才发现是错的，只能够原路折返，有可能你无比倒霉，试了所有的通道后，才发现最后一个才是正确的。<br>你必须根据你一路走过所得到的线索，选出最有可能优先抵达的路径。</p>
</blockquote>
<blockquote>
<p>2016-03-20<br>我欲乘风度日<br>无奈断腿残肢<br>心闻彼岸悬崖<br>又道白日呆痴</p>
</blockquote>
<blockquote>
<p>2016-04-06<br>雾的丛林，春雨落尽，樱花跌下尘土，铺满走道，像是仙女飘然而过的花廊。<br>彼时天清气爽，犹驻扎树上的花瓣滴下露珠，暗自摇曳。<br>花叶清新纯净，空气清晰明净，除却残存的湿润意味，一切都显得分外可人。</p>
</blockquote>
<blockquote>
<p>2016-04-06<br>风云变，杀气荡，乾坤转，阴魂扬</p>
</blockquote>
<blockquote>
<p>2016-04-07<br>樱花花期长久，久到都忘了开的时间。<br>当花瓣慢慢开始洒落一地，鲜艳欲滴，就突然想起–<br>花谢花飞花满天，红消香断有谁怜？<br>又有人道：落红不是无情物，化作春泥更护花…<br>嗯，有人感叹为何要把花瓣扫走？<br>看粉色落花染红樱花道，那一刻竟觉回到少年时。</p>
</blockquote>
]]></content>
      <categories>
        <category>生活感想</category>
      </categories>
  </entry>
  <entry>
    <title>开发CAN上位机</title>
    <url>/2022/05/%E5%BC%80%E5%8F%91CAN%E4%B8%8A%E4%BD%8D%E6%9C%BA/</url>
    <content><![CDATA[<p>首先，用C++实现这个上位机不是什么难事，主要是记录一下遇到的额外问题。</p>
<p>因为需要使用动态链接库，一开始以为是Qt不熟练，使用动态链接库的方式有问题，但尝试许久还是无法解决。</p>
<p>在运行程序时，Qt程序直接中断，错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The program has unexpectedly finished. </span><br><span class="line">The process was ended forcefully.</span><br></pre></td></tr></table></figure>

<p>不知道是什么原因。</p>
<p>因此在vs2019上重新尝试，报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">应用程序无法正常启动(0xc0150002)</span><br></pre></td></tr></table></figure>

<p>搜索</p>
<p>，网络上有牛人博客解释这个问题，</p>
<p>在计算机管理》事件查看器》Windows日志》应用程序中</p>
<p>查看错误信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">“D:\workspace\c++\cantest\x64\Debug\ControlCAN.dll”的激活上下文生成失败。 找不到从属程序集 Microsoft.VC90.MFC,processorArchitecture=&quot;amd64&quot;,publicKeyToken=&quot;1fc8b3b9a1e18e3b&quot;,type=&quot;win32&quot;,version=&quot;9.0.21022.8&quot;。 请使用 sxstrace.exe 进行详细诊断。</span><br></pre></td></tr></table></figure>



<p>说明是链接库加载的问题，ControlCAN.dll的依赖 Microsoft.VC90.MFC，该程序包含在 VC++ 2008 sp1 runtime，因此需要安装此环境。在软件管家里搜索，发现一个游戏环境程序集合安装包，该包中有vc08x64.exe，安装后，程序即可正常运行。</p>
<p>好几个小时的迷茫就这么简单的解决了。</p>
<p>但是有个疑问是，为何厂家的例程可以正常运行？</p>
<p>写到这里，突然想起有一项还没试过。即是编译完程序后，不在Qt或vs2019里运行，直接在编译目录里运行，不知道是否正常？</p>
<hr>
<p>总结以上经历，此次遇到的问题耗费了我差不多六七个小时，但最终解决时，才发现这并不是一个多难得问题。那时间用在了哪？在Qt上。</p>
<p>实际上如果我已经安装了VC++2008 sp1 runtime，那么从我写代码一开始，这个问题就不会发生。</p>
<p>但我没有安装，此问题发生了。</p>
<p>我首先将怀疑归到Qt调用动态链接库的方式上，因为我对Qt也是个初学者，在遇到问题时首先是对自己的不自信，Qt是否是这样调用链接库的，这样调用对不对？</p>
<p>我将大部分的时间耗费到了调用链接库的方式上，但这样的尝试其实一开始是必须的，但四五个小时就没有意义了。钻了牛角尖。</p>
<p>我对Qt并不熟悉，所以再多尝试也只是去碰运气，下一次没准就能正常运行了呢？</p>
<p>长时间的失败使我意识到是该换个熟悉的工具试试了，果然用vs2019后，虽然也不成功，但它给出了与Qt不一样的错误提示，根据此错误提示，我知道接下来该怎么做。</p>
<p>问题就在使用vs2019后的不到半小时解决了，这让人开心，但同时也让我郁闷。</p>
<p>也许这就是学习一样新的东西所要付出的一些代价吧。</p>
<p>浪费了时间只为得到一个经验教训。</p>
<p>在使用新工具遇到无法解决的问题时，不妨先回头用熟悉的工具去验证，找到问题的真正原因，避免白白浪费时间。</p>
]]></content>
      <categories>
        <category>生活感想</category>
      </categories>
  </entry>
  <entry>
    <title>杂耍2013</title>
    <url>/2021/09/%E6%9D%82%E8%80%8D2013/</url>
    <content><![CDATA[<p>寄悟空<br>腾云驾雾，实非常人能悟，却留用空空无处<br>七十二变，纵有通天本事，难逃紧箍<br>定海神针，海内真奇物<br>悲来了，果由你阻，可能把秋心拦住？</p>
<p>园门两松峙，中间一闲人</p>
<p>风入松云舞婆娑<br>雨滴天碧逗微波<br>魂散血融缚不住<br>却令逝水轻流过</p>
<p>天寒落梨花<br>天晚尽归鸦<br>西风不禁烈<br>天下皆冻杀</p>
<p>气高任缥缈<br>此身唯逍遥<br>不法今古人<br>何道是常道<br>但走非常道</p>
<p>相识纵满天下<br>知己能有几人！</p>
<p>苦乐为何，细雨清风也能惹人<br>喜乐多因利己而起！<br>忿怒由来，却常于他人喜乐<br>果因他人喜乐乎？也不过是自己心妒<br>你好于我，我便不乐<br>你忽略我，我便不乐<br>你不同于我，我便不乐<br>这是为何?<br>人人知其不对，人人常于无意间如是<br>几人注意过？<br>昔者长矣，来者奈何？<br>往者难追，明日怎度？<br>无闷酒以解忧，乏善听者旁侧<br>叹胶胶旁人，谁知我心<br>哀皓月隐匿，无有人同伤</p>
<p>凤头麟子值多少，秋高唱秋晚，了<br>龙王未泣眼中泪，雨停作凉亭，好<br>清心便不爱卓煜，侬却爱谁人，巧<br>只道嘴中尽胡言，痴心竟一片，老 </p>
<p>苍茫对皓月，且把酒一二<br>壮气掣宝剑，复吟诗两三<br>狂笑一声， 愿此生不如意<br>长啸一声，凭傲气上九天</p>
<p>何处不成诗？只需心意适<br>即就尽落荒，余也能抒怀</p>
<p>浩宇飞白雪 ，苍茫鸟鸣绝<br>大雾盖四野，灯笼不眠夜</p>
<p>涛涛水奔向上天  滚滚江涌往东南</p>
<p>当无可奈何之事不能再扰乱内心的安静与美好，<br>这无可奈何之事也就无可奈何了</p>
<p>我也知道不该高兴，<br>我也知道不该发笑<br>不该不悲伤<br>我也确实想要痛苦<br>我拉扯面部的肌肉<br>但它实在做不出要哭的样子<br>我的心是冰冷沉静的<br>好似再不会被情绪左右<br>我的表情背叛了我的意志<br>感觉迟钝？真情不露？<br>没有共鸣<br>任由我狠狠自责<br>难堪？羞燥？耻辱？<br>我没有所有感觉<br>表情背叛、无耻情态</p>
<p>得意是种状态<br>失意是种痕迹<br>我愿永远处在失意中<br>诅咒命运？<br>自虐？<br>还真是！<br>享受心痛</p>
<p>我自以为是的眼睛<br>最是愚蠢</p>
<p>云山苍苍，江水泱泱<br>先生之风，山高水长<br> 范仲淹先生</p>
<p>我高兴地狂奔  ，像那远古的人群<br>黑夜封尽一切  ，却让明月窜入天空<br>是不小心？</p>
<p>关汉卿 仿一枝花<br>我是个蒸不干，散不光，消不尽，吹不乱亮灿灿一缕白云悠悠<br>凭生来就做得他大傻子，真呆子，痴小子，疯汉子，牛癫子，二杆子飘飘笨主头<br>我走的是那独木桥，逛的是那黄泉路，折的是无名花，唱的是信步游，喝的是独孤酒<br>我也爱爬山，爱游戏，爱读书爱睡觉，爱玩闹，爱花草，爱家乡，爱踢球<br>任神把我关了禁闭青了脸面没了言语，冷了心肠限了自由，提两根拳头发一声吼，管什么头破血流<br>便是那魑魅魍魉偷寿数，双肩没了首，气掩河山，躯壳抽身溜，也仍自悠悠<br>终究是头犟牛，到死也不撒开手。二哪？为是我这才姓是真性刘！</p>
<p>闲来无事浇菜园，喜摸瓜<br>闲来无事乘阴凉，乐赏花<br>闲来无事弄悲剧，慢沏茶<br>闲来无事看树林，忽闻鸦<br>闲来无事逛小河，轻堆沙<br>闲来无事玩河水，不见虾<br>闲来无事望青山，痴想她</p>
<p>如果忘了，也就别再记起<br>凉了，一枕热场 作了冷的汤<br>碎了，欢快的筵席摔落了我的觞<br>算了，还是安分点守着我那闲置的狂</p>
<p>我是一颗墙头草，随着风左右倒<br>别人喜欢我就对他好，忽略我就和他不理闹<br>人生多悲催，像一支羽毛飞<br>跌跌宕宕起起伏伏千万里，还要攀高附枝，最终摔成一撮灰</p>
<p>荒楛的丘山<br>是人失落的骸骨<br>有人从中获取豪放，畅饮欢笑<br>有人看到一潭死水，捡起悲哀<br>有人看到汪洋<br>寂静是寂寞的死水，引发多少孤独<br>我内心却时时翻滚波浪<br>思想脱缰而走<br>无限狂野奔放<br>在寂静中<br>我心翱翔</p>
<p>我还是我<br>我只是我<br>我若骗了我<br>我还是什么？</p>
<p>从今振翅各自飞，只愿有日回首，不忘故人！</p>
<p>记得当年 小儿时，和友一起发疯跑<br>记得当年 小儿时，无忧无虑发狂笑<br>记得当年 小儿时，兄弟打架他乱叫<br>记得当年 小儿时，哥哥姐姐一起闹<br>记得当年 小儿时，高高兴兴上学校<br>记得当年 小儿时，心思空空不无聊<br> 想想当初 初中时，颠三倒四瞎学习<br> 想想当初 初中时，快快乐乐玩游戏<br> 想想当初 初中时，拳打脚踢靠力气<br> 想想当初 初中时，头脑简单伤不起<br> 想想当初 初中时，好哥们们影不离<br> 想想当初 初中时， 老师同学好兄弟<br>如今却已 高中了，形单影只似我身<br>如今却已 高中了，心中烦闷无处呻<br>如今却已 高中了，老师个个都是神<br>如今却已 高中了，火不焚人人自焚<br>如今却已 高中了，却恋少年顽童心<br>如今却已 高中了，而今只知我是真<br>如今却已 高中了，欲把外物贬作尘<br>如今却已 高中了，为何心中是孤魂</p>
<p>   活着<br>————你面向光明的时候，黑暗自然就抛向了背后————<br>暗夜下的楼，看不见的手，寂寞的走道，我是谁的囚<br>厕所宿舍，排泄休息，行尸走肉<br>风风火火六点的钟声，敲响了黎明，带来了黑夜<br>肆无忌惮的吞咽，满脸的食物，睁大了的眼，一串标点符号<br>书声琅琅，出乎我口，入乎人耳，存乎谁心？<br>我是时间的窃贼，偷来了一生，又要用一生来赔偿？<br>为我保持缄默，招呼远处的那片青山，不想要难过<br>又逃不出寂寞，愁何多？<br>笔直的小路，夕阳的余晖，覆盖一片城<br>转一转身，但别停步<br>你踩到了自己的影子<br>爱或不爱的，正面反面都爱或不爱<br>坚强的我，是我，不是谁的敌人<br>岁月不会哭，岁月也不是骗子</p>
<p>我是模糊家，奉行不求甚解主义！！！</p>
<p>总想活得像诗，过的像散文<br>结果只发现最多只能给自己打上三十八分<br>若要给活着一个区间<br>二到正无穷算不算好，真想知道<br>我想要却不能<br>可恶的现实！<br>生活太多烦恼，我又多愁善感<br>不敢胡作非为，又不甘规规矩矩<br>如果这世界变得天真<br>哪里会有那么多破事</p>
<p>想要未来，就别把现在变成噩梦<br>心里有块石头，插上翅膀也飞不起来</p>
<p>一切的困苦，都是自己的谎言，<br>岁月的玩笑<br>习惯了书写空灵，便无意识的排斥烟火<br>活在幻想中，一切美好</p>
<p>喜欢风，喜欢呼啸着的声响<br>向往奔跑的生活</p>
<p>孤独的自己是狂妄的<br>孤独的自己是自恋的<br>孤独的自己又是悲观的<br>孤独的自己难以捉摸<br>不是正常人</p>
<p>为什么要把哀伤的情绪写下去呢?<br>我不应该记载快乐吗？</p>
<p>雨啊！为何你下的那么持久呢？<br>你冷了人的骨头<br>你把我的心纠的作响<br>阴云下你比冬雪还可怖啊<br>面颊，衣物，血肉<br>都渗透，冰冷<br>死尸、阴魂<br>黑暗<br>你让我联想出了这么些糟糕的东西！</p>
<p>我用纸团砸你，命它触及你的额头<br>我是为了寻求回报，然后把嘴弯成一道弧<br>此生我有三个愿望：你，快乐，剩下一个还未知<br>你还未知，而我并不着急<br>因为这是我的一生<br>我明白上天有它自己的打算<br>但快乐的决定权在我<br>我把它丢在字里行间<br>埋藏在与人的相处<br>弥散在周围的空气<br>它常溜出我指间<br>躲到清澈的水下<br>跳跃在高高的树上<br>附着在蒲公英的翅膀<br>飘散成花香<br>滑出我鼻孔<br>闯进我的胸肺膛<br>在我的脑海里游走<br>它明白我的所思所想<br>恰如其分的占据我的一席之地<br>就像现在<br>对不起<br>我跑题了<br>不过你应该知道我有多在意你了吧</p>
<p>记住<br>人之所以误入迷途<br>不是因为无知<br>而是因为自已为知</p>
<p>嬉鹊语伙伴，洞开心扉可畅言<br>人生得知己，指示胸襟何阻拦<br>妄自而嗟叹，跌足不语伊人愁<br>天涯庶几而无愧，俯首低吟逍遥游</p>
<p>有时候很理智，有时很糊涂<br>在理智时明白自己，糊涂时否认自己，和别人的评价<br>没有一种状态可以持续存在<br>于我来说<br>这是个压缩状态的问题<br>当别人表达不满时，我很可能已经糊涂<br>谨慎</p>
<p>有人沉浸在自己的可悲可笑中，多么可怖</p>
<p>当年见你，如见春风；<br>今日见你，如见众生。 ——顾厌<br>当年见你，如见春风；<br>今日见你，一见钟情。 ——刘义</p>
<p>乡村<br>风<br>摇摆着，梨花落<br>雨<br>吹打着，屋墙鸣<br>泥泞的黄土路<br>印着<br>庄稼人的辛苦<br>叮咚的盛雨盆<br>响着<br>孩童们的欢笑<br>烟筒里的炊烟<br>打落尘埃<br>屋里的农妇们正<br>迎着<br>丈夫的微笑</p>
<p>随笔<br>繁星落了千万里<br>风儿摇摆着叶落<br>天空里乌云遮住了<br>熟睡的小月儿<br>唯有犀利的雨<br>飘过一丝温暖</p>
<p>索假乐<br>晴空万里无云，孤雀飞寻<br>人影零零急急回；<br>绿林百间穿声，独鼠飞窜<br>心意索索烦烦乱；<br>往日闹市繁杂，犹我心乱，惟我心孤；<br>此间景色正好，独我会意，只我一人。</p>
<p>雄<br>天空悠悠，游云展绸；山野青青，心也倾倾。<br>人间百态，惊世不骇；已脱世俗，再不哀愁。<br>却忆武侯，惜上心头；叹满心野，无人可解。<br>心绪如麻，思绪不拔；满心欢喜，已成灰矣。<br>漫野杂兰，不胜心烦；流水潺潺，泪眼潸潸。<br>知心挚友，君子所求；相遇之偶，更复何有。<br>独雁南飞，故霞北归；何时展望，梦中成真。<br>野花烂漫，独树翩翩；猛虎下山，雄鹰展翅。<br>普天之大，鄱阳舟下；今日之愁，明日不忧。</p>
<p>那天是片茫茫的雪，我向前走了两步，却不见身后的脚印，我迷失在白中</p>
]]></content>
      <categories>
        <category>生活感想</category>
      </categories>
  </entry>
  <entry>
    <title>牢骚</title>
    <url>/2021/09/%E7%89%A2%E9%AA%9A/</url>
    <content><![CDATA[<p>去哪里？<br>昨日之事不必回首，今日之日好多烦忧。迷惘懒惰围绕沉痛之心打转，明日之路到底通向何方？<br>鲜花易落，青春易老，岁月叱咤离去。站在老家染着灰色记忆脏乱的楼上，看西边群山徬的落日与彩霞，将天空浸上一半红。走在田间的水泥和土的路，时而有暖风踱过，有一丝凉意。走到河里，河水浸过脚背，河边有小孩、妈妈、姐姐，还有漂亮女孩，河水时缓时急流过。一天如此，像个弃婴，被遗落街头。<br>我无法悉数那些破旧的日子，藏了什么悲哀无聊的情绪。只觉得是否我还能忍受明天还那样的一成不变，疑惑，失望，恐惧，还有一些焦虑。沉重的压抑感使生活变了形，幻生梦死的人苦作笑脸，笑作苦状。我没法摸得着生命的轨迹，一颗心徒然地跳着，忠诚地安然作他的奴隶，双眼模糊，看不清未来的路。<br>到哪里去呢，我禁不住嘴唇无力地喃喃。。。<br>2013年7月3日</p>
<p>在一个荒凉的午后<br>我突然醒来<br>太阳西沉之时 空气冷却<br>而我的心也更加迷茫</p>
<p>在阳光耀眼的早晨<br>我从床上慢慢爬起<br>恋恋不舍放下沉醉一宿的梦境<br>去面对毫无起色的日子</p>
<p>这是高中时的一点回忆，代表那些颓丧的心情。可惜，再也写不出来了。<br>初中时写日记，高中时写周记，大学写……</p>
]]></content>
      <categories>
        <category>生活感想</category>
      </categories>
  </entry>
  <entry>
    <title>每逢佳节必赋诗</title>
    <url>/2021/09/%E6%AF%8F%E9%80%A2%E4%BD%B3%E8%8A%82%E5%BF%85%E8%B5%8B%E8%AF%97/</url>
    <content><![CDATA[<p>嗯，每逢佳节必赋诗<br>2015-11-11<br>——纵饮狂歌爱单身<br>——纪念二十周年双十一庆典<br>——为所有单身的人们和程序猿们（什么？你不是单身？滚粗，不是单身你也配叫程序猿？不是单身你也配叫程序猿？不是单身你也配叫程序猿？程序猿是多么高贵的职业，多么高贵，你也配）欢呼!</p>
<p>跟着这个节奏，就跟着我一起来！</p>
<p>一整夜不睡觉，想睡也睡不着，我亢奋的大脑，是一个一个的问号？？？？？</p>
<p>一整夜不睡觉，音乐声在咆哮，这是我的生活，不用谁替我烦恼！！！！！！</p>
<p>单身有什么不对？单身有什么不好？到处都是教条，我只想写一堆狂草</p>
<p>零点钟声响起，还有什么迟疑，跟这节奏一起来，狂吼乱叫</p>
<p>1<del>2</del>3~~~~狂吼乱叫！把面具都摘掉！</p>
<p>1<del>2</del>3~~~~狂蹦乱跳！为单身叫好！</p>
<p>君不见三千繁华东流水，时复喧嚣时寂寥</p>
<p>君不见万丈红尘悲哀事，徒留佳人长啼血</p>
<p>春秋何其短，佳人岂易得？</p>
<p>人生一目过，何处觅知音？</p>
<p>佳人难得知音少，何不对影成三人！</p>
<p>纷纷人世无数景，争可因情弃良宵！</p>
<p>良宵多欢乐，只献孤单人</p>
<p>孤单人不眠，独坐享墨夜</p>
<p>在无尽的黑夜，单身的人是一盏盏耀眼的明灯，舍弃爱<del>成就未来</del></p>
<p>在无尽的黑夜，所有人都要被毁灭，至少我还是单身，还为我而感动~</p>
<p>烦恼？忘不掉？我从来不害怕，情人间的争吵，哀嚎，谁听得到</p>
<p>囚牢？脱离不了？我活的很潇洒，义无反顾的单行轨道，谁还能逃</p>
<p>夜空中谁还在等待？为爱？</p>
<p>我只为睡过明天十二点半的闹钟</p>
<p>黑夜中谁还在叹息？瘆的慌</p>
<p>我只会在黑夜中无忧游戏到天亮</p>
<p>看日出日落月圆月缺，单身的人好多愁善感</p>
<p>潮起潮落看人世间，单身的人独一无二</p>
<p>单身夜晚格外寂静</p>
<p>无论开始怎么辗转反侧总能成眠</p>
<p>单身空气格外冷清</p>
<p>每个早晨都能有自由洁净的呼吸</p>
<p>单身、单身、单身、</p>
<p>单身没有难过的回忆</p>
<p>单身没有走快的年轮</p>
<p>单身烟花不易冷、人世不易分</p>
<p>单身雨雪菲菲，单身冬雷震震，单身尝遍世间最离奇的景，看遍世间最真的人</p>
<p>情歌请别唱，唱罢愈难忘，世间多少歌，蕴含苦与涩</p>
<p>不爱不失去，不情不别离，一份爱值一份苦，一份相思换一份不屑一顾</p>
<p>风尘之中不惟爱，更有激情在其中，旦夕作了爱情囚，回首再望憾终生</p>
<p>单身之我任性狂，单身之我更放荡，情绪煮一篇文章，随着我任意释放</p>
<p>拿着情人节省得几个钱，单身之夜不醉不还</p>
<p>呼朋唤友同庆祝，单身之夜不醉不欢</p>
<p>狂歌饮酒笑成泪，直祭寂寞注孤生</p>
<p>醉卧青春不夜城，不去问处处霓虹</p>
]]></content>
      <categories>
        <category>生活感想</category>
      </categories>
  </entry>
  <entry>
    <title>登高</title>
    <url>/2021/09/%E7%99%BB%E9%AB%98/</url>
    <content><![CDATA[<p>一晌秋风紧，七子指龟山。</p>
<p>临行说壮语，定越高上岗。</p>
<p>一路且言笑，看过我母校。</p>
<p>悠哉慢慢行，走尽高楼空。</p>
<p>入得公园来，留连回忆深。</p>
<p>数载一别过，还是旧颜色？</p>
<p>当年壮志情，今朝何请命？</p>
<p>蜕去思念衣，且让他们去。</p>
<p>玩转乐极尽，上得望江桥。</p>
<p>美哉拱下景，小儿戏水中。</p>
<p>徐徐缓缓进，悠悠闲闲行。</p>
<p>到得山脚下，笑我迷路途。</p>
<p>猥琐不堪言，先来登山也。</p>
<p>三下五除二，飞身向仙台。</p>
<p>楼塔风中耸，行人树下凉。</p>
<p>未上高峰颠，望尽山城色。</p>
<p>休息只片刻，满志征山顶。</p>
<p>炮哥满脸忧，归家心思急。</p>
<p>如受戴宗学，如驾列子车。</p>
<p>身似飘渺仙，一步欲上天。</p>
<p>不睬大老龟，早登高峰上。</p>
<p>山景方正好，只是山风凉。</p>
<p>灯火罩满城，光羞云间月。</p>
<p>了尽映杰意，留连归非己。</p>
<p>下得山上来，七人平分去。</p>
<p>迤逦归回来，不知炮哥生？</p>
<p>各自料以回，我慢续其意。</p>
<p>等高未赋诗，才情不得已。</p>
<p>笑我临行言，诸君先罚干。</p>
]]></content>
      <categories>
        <category>生活感想</category>
      </categories>
  </entry>
  <entry>
    <title>诗人</title>
    <url>/2021/09/%E8%AF%97%E4%BA%BA/</url>
    <content><![CDATA[<blockquote>
<p>2013-02-21</p>
</blockquote>
<p>诗人啊！<br>  那个孤独的诗人<br>他伫立在灵魂的高地<br>他的衣带迎风飘扬<br>我却拖着沉重的行囊<br>我却走在失望的路上 </p>
<p>我是那么脆弱<br>随风而动<br>剩下点点勉强的安慰<br>还在心中痛苦挣扎<br>这挣扎  没有狂躁<br>有坟墓一样的死寂 </p>
<p>所幸那里有盏太阳<br>虽然掀不开厚厚的云<br>但那一丝希望<br> 足够慰藉<br>我亘古而来的感伤 </p>
]]></content>
      <categories>
        <category>生活感想</category>
      </categories>
  </entry>
  <entry>
    <title>C++不完整的类型</title>
    <url>/2021/08/C-%E4%B8%8D%E5%AE%8C%E6%95%B4%E7%9A%84%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<blockquote>
<p>一个不常见的错误，源于不规范的写法。</p>
</blockquote>
<p>版权声明：本文为CSDN博主「清河两岸」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_36038987/article/details/77747507">https://blog.csdn.net/qq_36038987/article/details/77747507</a></p>
<p>————————————————</p>
<p>在讲述柔性数组成员之前，首先要介绍一下不完整类型（incomplete type）。不完整类型是这样一种类型，它缺乏足够的信息例如长度去描述一个完整的对象。</p>
<p>incomplete types (types that describe objects but lack information needed to determine their sizes).</p>
<p><strong>前向声明就是一种常用的不完整类型。</strong></p>
<p>**C++错误–不允许使用不完整的类类型– **</p>
<p>在一个文件中定义了一个类CLASS A，在另一个文件中使用时说不允许使用不完整的类型。使用方法如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">CLASS  A;</span><br><span class="line"></span><br><span class="line">CLASS B&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	A *point;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>分析问题：使用该类的文件看不到该类。</p>
<p>解决问题：将类的<strong>定义</strong>放到.h头文件中，在使用该类的文件中#include该头文件。</p>
]]></content>
      <categories>
        <category>疑难杂症</category>
      </categories>
      <tags>
        <tag>CC++</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo配置杂疑</title>
    <url>/2022/05/Hexo%E9%85%8D%E7%BD%AE%E6%9D%82%E7%96%91/</url>
    <content><![CDATA[<hr>
<h3 id="1-修改文件名称大小写"><a href="#1-修改文件名称大小写" class="headerlink" title="1.修改文件名称大小写"></a>1.修改文件名称大小写</h3><p>Hexo博客框架，修改tag或文件大小写，发布后发现大小写并未改变？</p>
<p>网上的解决方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改.deploy_git.git目录下的config，</span><br><span class="line">将</span><br><span class="line">ignorecase = true 改为 false</span><br></pre></td></tr></table></figure>


<p>我的工程下没有.deploy_git.git目录，但有.deploy_git目录，目录下有.git目录，还有本应在public下生成的博客目录。</p>
<p><strong>按照以上方法修改config后，发现仍未解决，只有将.deploy_git目录下的除.git外的文件删除后方可</strong>。</p>
<hr>
<h3 id="2-警告LF-gt-CRLF"><a href="#2-警告LF-gt-CRLF" class="headerlink" title="2.警告LF-&gt;CRLF"></a>2.警告LF-&gt;CRLF</h3><p>Hexo Git部署警告<code>warning： LF will be replaced by CRLF</code>的去除方法。</p>
<p>在windows下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">warning: LF will be replaced by CRLF in xxx.html.</span><br></pre></td></tr></table></figure>

<p>这是因为Git将LF替换为CRLF，使用以下命令禁止此功能：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global core.autocrlf false</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-butterfly主题添加备案信息"><a href="#3-butterfly主题添加备案信息" class="headerlink" title="3.butterfly主题添加备案信息"></a>3.butterfly主题添加备案信息</h3><p>进入 Butterfly 主题目录，打开 <code>layout/includes/footer.pug</code> 文件，在末尾添加如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if theme.ICP.enable</span><br><span class="line">  .icp</span><br><span class="line">    a(href=theme.ICP.url)</span><br><span class="line">      if theme.ICP.icon</span><br><span class="line">        img.icp-icon(src=url_for(theme.ICP.icon))</span><br><span class="line">      span=theme.ICP.text</span><br><span class="line">if theme.NSP.enable</span><br><span class="line">  .icp</span><br><span class="line">    a(href=theme.NSP.url)</span><br><span class="line">      if theme.NSP.icon</span><br><span class="line">        img.icp-icon(src=url_for(theme.NSP.icon))</span><br><span class="line">      span=theme.NSP.text</span><br></pre></td></tr></table></figure>

<p>修改butterfly配置文件_config.yml，在footer setting下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ICP:</span><br><span class="line">  enable: true  # 是否启用ICP</span><br><span class="line">  url: http://www.beian.miit.gov.cn/  # 点击后的链接地址</span><br><span class="line">  text: 京ICP备xxxx  # 备案号</span><br><span class="line">  icon:    # 图标</span><br><span class="line">NSP:</span><br><span class="line">  enable: true   # 是否启用NSP</span><br><span class="line">  url: http://www.beian.gov.cn/  # 点击后的链接地址</span><br><span class="line">  text: 京公网安备 xxxxx号    # 公安备案号</span><br><span class="line">  icon: http://www.beian.gov.cn/img/new/gongan.png  # 图标</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-Hexo增加搜索功能"><a href="#4-Hexo增加搜索功能" class="headerlink" title="4.Hexo增加搜索功能"></a>4.Hexo增加搜索功能</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 安装搜索：在Hexo根目录下执行命令：</span><br><span class="line">   npm install hexo-generator-searchdb --save</span><br><span class="line"></span><br><span class="line">2. 配置Hexo的_config.yml文件，新增search：</span><br><span class="line">   search:</span><br><span class="line">     path: search.xml</span><br><span class="line">     field: post</span><br><span class="line">     format: html</span><br><span class="line">     limit: 10000</span><br><span class="line"></span><br><span class="line">3. 在主题配置文件_config.yml中，修改local_search为true</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>疑难杂症</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt中文显示</title>
    <url>/2021/08/Qt%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA/</url>
    <content><![CDATA[<h3 id="中文显示"><a href="#中文显示" class="headerlink" title="中文显示"></a>中文显示</h3><ul>
<li><p>编码：utf-8</p>
</li>
<li><p>line Ending：Unix(LF)</p>
</li>
<li><p>语法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1</span></span><br><span class="line">QString::<span class="built_in">fromLocal8Bit</span>(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="built_in">QStringLiteral</span>(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> execution_character_set(<span class="string">&quot;utf-8&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4</span></span><br><span class="line"><span class="built_in">QLabel</span>(<span class="string">u8&quot;你好&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="不同编译器"><a href="#不同编译器" class="headerlink" title="不同编译器"></a>不同编译器</h3><p>对MinGw，不用处理即可显示中文</p>
<p>对VS2019，需要以上处理</p>
]]></content>
      <categories>
        <category>疑难杂症</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL缩减表大小</title>
    <url>/2021/09/SQL%E7%BC%A9%E5%87%8F%E8%A1%A8%E5%A4%A7%E5%B0%8F/</url>
    <content><![CDATA[<p>有些表时间长了，历史数据不用，可以将其备份到其它表中，以减小其大小</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">into</span> [DCWLW].[dbo].cmd_log_bak210501</span><br><span class="line"><span class="keyword">from</span> [DCWLW].[dbo].cmd_log</span><br><span class="line"><span class="keyword">where</span> create_date <span class="operator">&lt;</span> <span class="string">&#x27;2021-05-01&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> [DCWLW].[dbo].cmd_log</span><br><span class="line"><span class="keyword">where</span> create_date <span class="operator">&lt;</span> <span class="string">&#x27;2021-05-01&#x27;</span>;</span><br></pre></td></tr></table></figure>



<p>更好的方法还待探究。</p>
<p>最好是设置表能自动备份过期数据。</p>
]]></content>
      <categories>
        <category>疑难杂症</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL去重查询</title>
    <url>/2021/07/SQL%E5%8E%BB%E9%87%8D%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<p><strong>查询一个表，返回的结果中若某一字段有重复的行，只保留一行数据。（保留的数据要求是所有行中某一字段的最值）</strong></p>
<hr>
<p>例子：</p>
<p>表 score：</p>
<table>
<thead>
<tr>
<th align="center">id</th>
<th align="center">time</th>
<th align="center">name</th>
<th align="center">math</th>
<th align="center">cs</th>
<th align="center">physics</th>
<th align="center">chemistry</th>
<th align="center">biology</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">2021-07-11</td>
<td align="center">Lucy</td>
<td align="center">80</td>
<td align="center">90</td>
<td align="center">34</td>
<td align="center">45</td>
<td align="center">43</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">2021-09-22</td>
<td align="center">Lucy</td>
<td align="center">77</td>
<td align="center">89</td>
<td align="center">54</td>
<td align="center">56</td>
<td align="center">67</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">2020-04-12</td>
<td align="center">Kaven</td>
<td align="center">87</td>
<td align="center">34</td>
<td align="center">34</td>
<td align="center">26</td>
<td align="center">87</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">2021-08-22</td>
<td align="center">Hyke</td>
<td align="center">65</td>
<td align="center">78</td>
<td align="center">34</td>
<td align="center">56</td>
<td align="center">67</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">2020-05-17</td>
<td align="center">Kaven</td>
<td align="center">78</td>
<td align="center">97</td>
<td align="center">67</td>
<td align="center">97</td>
<td align="center">56</td>
</tr>
</tbody></table>
<p><strong>目标是查询 score 中学生最近的一次成绩记录</strong></p>
<p>查询结果理应如下：</p>
<table>
<thead>
<tr>
<th align="center">id</th>
<th align="center">time</th>
<th align="center">name</th>
<th align="center">math</th>
<th align="center">cs</th>
<th align="center">physics</th>
<th align="center">chemistry</th>
<th align="center">biology</th>
</tr>
</thead>
<tbody><tr>
<td align="center">2</td>
<td align="center">2021-09-22</td>
<td align="center">Lucy</td>
<td align="center">77</td>
<td align="center">89</td>
<td align="center">54</td>
<td align="center">56</td>
<td align="center">67</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">2021-08-22</td>
<td align="center">Hyke</td>
<td align="center">65</td>
<td align="center">78</td>
<td align="center">34</td>
<td align="center">56</td>
<td align="center">67</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">2020-05-17</td>
<td align="center">Kaven</td>
<td align="center">78</td>
<td align="center">97</td>
<td align="center">67</td>
<td align="center">97</td>
<td align="center">56</td>
</tr>
</tbody></table>
<p>有两种方法可以进行查询：</p>
<ul>
<li><p>根据行号去重</p>
<ul>
<li><p>对表 score 分区后排序，取排序后的第 1 行数据</p>
</li>
<li><p>partition by关键字是分析性函数的一部分，它和聚合函数（如group by）不同的地方在于它能返回一个分组中的多条记录，而聚合函数一般只有一条反映统计值的记录，</p>
<p>partition by用于给结果集分组，如果没有指定那么它把整个结果集作为一个分组。</p>
<p>partition by 与group by不同之处在于前者返回的是分组里的每一条数据，并且可以对分组数据进行排序操作。后者只能返回聚合之后的组的数据统计值的记录。</p>
</li>
<li><p><strong>经典用法：</strong><code>ROW_NUMBER() OVER(partition by 分组列 order by 排序列) </code></p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> </span><br><span class="line">(<span class="keyword">select</span> <span class="operator">*</span>,<span class="built_in">row_number</span>() <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> name <span class="keyword">order</span> <span class="keyword">by</span> <span class="type">time</span> <span class="keyword">desc</span>) Suquence <span class="keyword">from</span> score) s </span><br><span class="line"><span class="keyword">where</span> s.Suquence<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>group by 查询</p>
<ul>
<li><p>使用 group by 时，如果决定保留行的字段的值在表中是唯一的，则可以直接使用（如 id，<strong>假设</strong> 每个学生的数据在表中的 id 与时间的大小顺序一致，即时间越近，id 越大）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> score <span class="keyword">where</span> id <span class="keyword">in</span> </span><br><span class="line">(<span class="keyword">select</span> <span class="built_in">max</span>(id) <span class="keyword">from</span> score <span class="keyword">group</span> <span class="keyword">by</span> name)</span><br></pre></td></tr></table></figure>
</li>
<li><p>但实际上假设是特殊的，一般情况 id 与字段大小无关联的话，需要多表查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.<span class="operator">*</span> <span class="keyword">from</span> score <span class="keyword">as</span> a <span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">(<span class="keyword">select</span> <span class="built_in">max</span>(<span class="type">time</span>) <span class="keyword">as</span> <span class="type">time</span>,name <span class="keyword">from</span> score <span class="keyword">group</span> <span class="keyword">by</span> name) <span class="keyword">as</span> b</span><br><span class="line"><span class="keyword">on</span> a.time<span class="operator">=</span>b.time <span class="keyword">and</span> a.name<span class="operator">=</span>b.name</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>疑难杂症</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt无法定位程序输入点</title>
    <url>/2021/09/Qt%E6%97%A0%E6%B3%95%E5%AE%9A%E4%BD%8D%E7%A8%8B%E5%BA%8F%E8%BE%93%E5%85%A5%E7%82%B9/</url>
    <content><![CDATA[<h3 id="先背一遍Qt代码："><a href="#先背一遍Qt代码：" class="headerlink" title="先背一遍Qt代码："></a>先背一遍Qt代码：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMainWindow&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    QMainWindow mw;</span><br><span class="line">    mw.<span class="built_in">show</span>();</span><br><span class="line">    app.<span class="built_in">exec</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="编译生成"><a href="#编译生成" class="headerlink" title="编译生成"></a>编译生成</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">qmake -project QT+=widgets</span><br><span class="line">qmake</span><br><span class="line">make</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="运行错误"><a href="#运行错误" class="headerlink" title="运行错误"></a>运行错误</h3><p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/image-20210926164814895.png" alt="image-20210926164814895"></p>
<p>出现以上问题，是动态链接库被污染了，某些程序中也包含Qt5Core.dll文件，且在Path相对考前的位置，因此调用时会找错地方。</p>
<p>解决：把Qt官方路径放到Path前列。</p>
]]></content>
      <categories>
        <category>疑难杂症</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows Terminal 下中文乱码</title>
    <url>/2021/07/Windows-Terminal-%E4%B8%8B%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</url>
    <content><![CDATA[<p>从网络上搜索到的方法：</p>
<p>在 Git 安装路径下，找到 etc 目录的 bash.bashrc 文件，加入下面几行解决了</p>
<blockquote>
<p>export LANG&#x3D;”zh_CN.UTF-8”<br>export LC_ALL&#x3D;”zh_CN.UTF-8”</p>
</blockquote>
<p>经过上面配置后，git-bash 显示正确了</p>
<p><strong>但 windows powerShell 用 vim 打开文件后，中文仍旧是乱码。</strong></p>
]]></content>
      <categories>
        <category>疑难杂症</category>
      </categories>
      <tags>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>js浮点数处理</title>
    <url>/2021/10/js%E6%B5%AE%E7%82%B9%E6%95%B0%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h2 id="1-参考"><a href="#1-参考" class="headerlink" title="1.参考"></a>1.参考</h2><p><a href="https://cloud.tencent.com/developer/ask/180535">https://cloud.tencent.com/developer/ask/180535</a></p>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/cloud.tencent.com_developer_ask_180535%20(3).png" alt="cloud.tencent.com_developer_ask_180535 (3)"></p>
<h2 id="2-正确示例"><a href="#2-正确示例" class="headerlink" title="2.正确示例"></a>2.正确示例</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fnumb = <span class="title class_">Math</span>.<span class="property">PI</span>;</span><br><span class="line"><span class="keyword">const</span> fstr = fnumb.<span class="title function_">toString</span>();</span><br><span class="line"></span><br><span class="line">#浮点数转字节数组</span><br><span class="line"><span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">4</span>);  <span class="comment">//双精度为8</span></span><br><span class="line"><span class="keyword">const</span> uf8 = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(buffer);</span><br><span class="line"><span class="keyword">const</span> f32 = <span class="keyword">new</span> <span class="title class_">Float32Array</span>(buffer);</span><br><span class="line">f32[<span class="number">0</span>] = fnumb;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uf8);</span><br><span class="line"></span><br><span class="line">#字节数组转浮点数</span><br><span class="line">uf8[<span class="number">0</span>] = <span class="number">219</span>;</span><br><span class="line">uf8[<span class="number">1</span>] = <span class="number">15</span>;</span><br><span class="line">uf8[<span class="number">2</span>] = <span class="number">73</span>;</span><br><span class="line">uf8[<span class="number">3</span>] = <span class="number">64</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f32);</span><br><span class="line"></span><br><span class="line">#浮点数转字符串数组</span><br><span class="line"><span class="number">1.</span>先将浮点数转为字节数组</span><br><span class="line"><span class="number">2.</span>再将字节数组<span class="title function_">toString</span>()</span><br><span class="line"></span><br><span class="line">#字符串相关操作与上类似</span><br></pre></td></tr></table></figure>



<h2 id="3-保留小数位数"><a href="#3-保留小数位数" class="headerlink" title="3.保留小数位数"></a>3.保留小数位数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="title class_">Math</span>.<span class="property">PI</span>;</span><br><span class="line"></span><br><span class="line">n = n.<span class="title function_">toFixed</span>(<span class="number">5</span>); <span class="comment">//保留5位小数</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>疑难杂症</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql小白</title>
    <url>/2021/08/mysql%E5%B0%8F%E7%99%BD/</url>
    <content><![CDATA[<h2 id="1-自动安装-mysql-后不知道登录密码？"><a href="#1-自动安装-mysql-后不知道登录密码？" class="headerlink" title="1.自动安装 mysql 后不知道登录密码？"></a>1.自动安装 mysql 后不知道登录密码？</h2><p>在 ubuntu 下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo cat /etc/mysql/debian.cnf</span><br></pre></td></tr></table></figure>



<h2 id="2-密码如何修改？"><a href="#2-密码如何修改？" class="headerlink" title="2.密码如何修改？"></a>2.密码如何修改？</h2><p>MySQL 8.0 后 修改密码与之前不同，</p>
<p>8.0 之前修改方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update user set authentication_string=password(&#x27;123456&#x27;) </span><br><span class="line">where user=&#x27;root&#x27; and Host=&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure>

<p>8.0 版本修改方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure>

<p>修改完后记得刷新：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>



<h2 id="3-mysql配置文件怎么写？"><a href="#3-mysql配置文件怎么写？" class="headerlink" title="3.mysql配置文件怎么写？"></a>3.mysql配置文件怎么写？</h2><p>参考链接：<a href="https://www.cnblogs.com/langdashu/p/5889352.html">https://www.cnblogs.com/langdashu/p/5889352.html</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim <span class="variable">$HOME</span>/.my.cnf    <span class="comment">#注意，文件名为 .my.cnf，不是 .my.conf，手残写错后找了1个小时</span></span><br><span class="line"><span class="comment">#内容：</span></span><br><span class="line">[client]</span><br><span class="line">password = 123456</span><br><span class="line"><span class="comment">#当然，配置文件还可以更多，按照需求写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#登录</span></span><br><span class="line">mysql -u root </span><br></pre></td></tr></table></figure>



<h2 id="4-MySQL-忘记密码怎么办？"><a href="#4-MySQL-忘记密码怎么办？" class="headerlink" title="4.MySQL 忘记密码怎么办？"></a>4.MySQL 忘记密码怎么办？</h2><p>对MySQL5.7有效，其它版本没试过。在Ubuntu系统下。</p>
<ol>
<li>停止服务：&#x2F;etc&#x2F;init.d&#x2F;mysql stop</li>
<li>安全启动，跳过授权表：mysqld_safe –user&#x3D;mysql –skip-grant-tables –skip-networking &amp;</li>
<li>登录：mysql -uroot -p 不输入密码进入</li>
<li>重设密码：参考<strong>问题2：密码如何修改</strong></li>
<li>退出重启：&#x2F;etc&#x2F;init.d&#x2F;mysql restart</li>
</ol>
]]></content>
      <categories>
        <category>疑难杂症</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>mcu烧录报错汇总</title>
    <url>/2021/07/mcu%E7%83%A7%E5%BD%95%E6%8A%A5%E9%94%99%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<p>[TOC]</p>
<p><em>以下报错发生在使用 keil 时</em></p>
<hr>
<h3 id="1-cannot-access-memory"><a href="#1-cannot-access-memory" class="headerlink" title="1. cannot access memory"></a>1. cannot access memory</h3><h3 id="2-Flash-Download-failed"><a href="#2-Flash-Download-failed" class="headerlink" title="2. Flash Download failed"></a>2. Flash Download failed</h3><p>以上两个错误是我同时遇到的，该错误发生的具体情况：</p>
<p><em>在一开始时，单片机是能够正常烧录的，之后修改代码，重新烧录过程中，可能是 JLink 接线松动或 JLink 供电不稳定，导致烧录失败，继续烧录，会出现重新更新 JLink 固件的情况，在有一次更新固件之后，再进行烧录，就持续报出以上两个错误。</em></p>
<p>该问题经过搜索，可能与两个因素有关：1.烧录速率，2.烧录时复位。</p>
<p>在我将 SWD 烧写频率降至 200K，并在烧录时手动按复位键后，烧录成功。</p>
<h3 id="3-Can-not-attach-to-CPU"><a href="#3-Can-not-attach-to-CPU" class="headerlink" title="3.Can not attach to CPU"></a>3.Can not attach to CPU</h3><p>JLink info:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* JLink Info: InitTarget() start</span><br><span class="line">* JLink Info: Can not attach to CPU. Trying connect under reset.</span><br><span class="line">* JLink Info: Connecting to CPU via connect under reset failed.</span><br><span class="line">* JLink Info: InitTarget() end</span><br></pre></td></tr></table></figure>

<p>第一种可能：jtag 或 swd 口被复用了，烧录时就需要复位芯片以使引脚回到复位后功能，即重新回到 jtag 或 swd 功能，如果板子烧录口上有RST，则按照提示设置复位后连接即可，如果没有则在点击烧录按钮前按下板子复位键，出现烧录进度条后松开</p>
<p>第二种可能：板子上只有 swd 烧录口，设置 Debug 选项时没选择 swd。此情况是我在删除了 .uvoptx  文件后发生，删除该文件后 Debug 配置被还原成默认 jtag 烧录方式了</p>
<p>第三种可能：原因还未知，但换了一个工具可以成功烧录，怀疑是原工具也有问题（但工具之后又能正常使用）</p>
<h3 id="4-调试退出时卡死"><a href="#4-调试退出时卡死" class="headerlink" title="4.调试退出时卡死"></a>4.调试退出时卡死</h3><p>根据网上的说法，在中文路径下，退出调试时，只要工程有<strong>断点</strong>，必定卡死，如果退出调试时<strong>清除所有断点</strong>，即使工程路径存在中文，也不会卡死。</p>
<p>英文路径下卡死可能跟之前存在的配置文件有关。</p>
<p>解决方法：</p>
<ol>
<li>工程路径不要有任何中文</li>
<li>如果执行完步骤1还是卡死：则将工程目录下的 <code>Project.uvoptx</code> 文件删除，然后重新编译整个工程。Keil会自动生成一份新的<code>.uvoptx</code>文件的。</li>
</ol>
<p>删除 <code>.uvoptx</code> 后的其它影响：</p>
<ol>
<li>注意重新编译后需要重新配置 <em>Debug</em></li>
<li>调试时变量不实时变化，需要勾选 <em>View-&gt;Periodic Window Update</em></li>
</ol>
<h3 id="5-STM32F103C8T6移植FreeRTOS内存不足的问题"><a href="#5-STM32F103C8T6移植FreeRTOS内存不足的问题" class="headerlink" title="5.STM32F103C8T6移植FreeRTOS内存不足的问题"></a>5.STM32F103C8T6移植FreeRTOS内存不足的问题</h3><p>错误信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">linking...</span><br><span class="line">.\output\MB_CODE.axf: Error: L6406E: No space in execution regions with .ANY selector matching heap_4.o(.bss).</span><br><span class="line">.\output\MB_CODE.axf: Error: L6406E: No space in execution regions with .ANY selector matching can.o(.bss).</span><br><span class="line">.\output\MB_CODE.axf: Error: L6406E: No space in execution regions with .ANY selector matching startup_stm32f10x_md.o(STACK).</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">.\output\MB_CODE.axf: Error: L6407E: Sections of aggregate size 0x9f04 bytes could not fit into .ANY selector(s).</span><br><span class="line">Not enough information to list image symbols.</span><br><span class="line">Not enough information to list load addresses in the image map.</span><br></pre></td></tr></table></figure>



<p>芯片官网的架构图上是 SRAM 是 10Kb，按照芯片手册来说应该是 20Kb。</p>
<p>在 FreeRTOSConfig.h 配置文件中有设置 RTOS 要使用的内存大小，用 configTOTAL_HEAP_SIZE 宏定义的。</p>
<p>将 configTOTAL_HEAP_SIZE 宏修改为 10K</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> configTOTAL_HEAP_SIZE					((size_t)(10*1024)) </span></span><br></pre></td></tr></table></figure>



<h3 id="6-Contents-mismatch"><a href="#6-Contents-mismatch" class="headerlink" title="6.Contents mismatch"></a>6.Contents mismatch</h3><p><em>Contents mismatch at: 08000000H (Flash&#x3D;FFH Required&#x3D;00H) ! Too many errors to display !</em></p>
<p>错误信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Contents mismatch at: 08000000H  (Flash=FFH  Required=00H) !</span><br><span class="line">Contents mismatch at: 08000001H  (Flash=FFH  Required=04H) !</span><br><span class="line">Contents mismatch at: 08000002H  (Flash=FFH  Required=00H) !</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Contents mismatch at: 08000063H  (Flash=FFH  Required=08H) !</span><br><span class="line">Too many errors to display ! </span><br></pre></td></tr></table></figure>
<p>出现此种情况，网上有两个说法：</p>
<ol>
<li>检查复位电路，download 复位选项设置为正常</li>
<li>芯片全擦除</li>
</ol>
<p>个人遇到这个问题，烧录时设置为芯片全擦除，成功。</p>
<h3 id="7-J-Link烧录，检测不到芯片"><a href="#7-J-Link烧录，检测不到芯片" class="headerlink" title="7.J-Link烧录，检测不到芯片"></a>7.J-Link烧录，检测不到芯片</h3><p>该问题与博客<a href="https://blog.csdn.net/Jun626/article/details/80686263%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%80%E8%87%B4%E3%80%82">https://blog.csdn.net/Jun626/article/details/80686263的情况一致。</a></p>
<p>描述：</p>
<p>在我将工程移到另一个电脑后，烧录时出现了检测不到芯片的情况。</p>
<p>详情：</p>
<p>工程移动到另一个电脑后，打开，keil弹出了一个提示框，让选择芯片：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- J-link Vxxx Device Selection --</span><br><span class="line">The selected device &quot;XXXXXXX&quot; is unknown to this version of the jlink-software.</span><br><span class="line"></span><br><span class="line">Please make sure ....</span><br></pre></td></tr></table></figure>

<p>就是说让重新选择芯片型号，我因为用的MXD2660，是ARMM0的因此就直接选了ARMM0。</p>
<p>然后就烧录不进程序，查看Debug，发现检测不到芯片。</p>
<p>解决方法：</p>
<p>网上查找刚好发现上述博客与我遭遇一致，原因是芯片型号选错了，MXD2660应该选Cortex-M0+。</p>
<p>将JlinkSetting.ini删除后，重新选择型号即可。</p>
]]></content>
      <categories>
        <category>疑难杂症</category>
      </categories>
      <tags>
        <tag>mcu烧录</tag>
      </tags>
  </entry>
  <entry>
    <title>端口占用问题</title>
    <url>/2021/08/%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>今天学习 libevent 时，运行例程 hello world，结果死活 bind 失败，例程中的端口号是 9905，查询端口也没有被占用，有点奇怪。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -ano|findstr &quot;9905&quot;</span><br></pre></td></tr></table></figure>



<p>后来跑以前的程序测试，发现自己之前用的端口 1234 可以绑定上，把例程中的端口换成 1234 后，又能绑定上了。</p>
<p>用网络调试助手测试，作为 TCP Server，端口号选择 9905，9906，9900，<del>等，都连接不上，但 1234 可以，11111 可以，10100可以</del></p>
<p>以上端口都未被占用，但一个区间内（9000左右）的端口号都无法使用，具体原因是什么，希望以后能找到答案。</p>
<p>插眼！</p>
]]></content>
      <categories>
        <category>疑难杂症</category>
      </categories>
      <tags>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh连接问题</title>
    <url>/2021/09/ssh%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="ssh连接虚拟机上的ubuntu失败"><a href="#ssh连接虚拟机上的ubuntu失败" class="headerlink" title="ssh连接虚拟机上的ubuntu失败"></a>ssh连接虚拟机上的ubuntu失败</h2><ul>
<li>在windows上使用putty无法连上虚拟机，提示连接被拒绝。</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/image-20210914182259322.png" alt="image-20210914182259322"></p>
<ul>
<li>查看端口号以及防火墙，都已经打开</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/ssh-2.png" alt="ssh-2"></p>
<ul>
<li>windows能ping通虚拟机，但telnet无法连接</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/ssh-1.png" alt="ssh-1"></p>
<ul>
<li>另外，虚拟机上，普通用户 <code>ssh localhost</code> 正常，root用户无法连接，显示权限不足。</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/ssh.png" alt="ssh"></p>
<ul>
<li>虚拟机网络选择桥接模式</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/image-20210914182512984.png" alt="image-20210914182512984"></p>
<h2 id="换另一个虚拟机"><a href="#换另一个虚拟机" class="headerlink" title="换另一个虚拟机"></a>换另一个虚拟机</h2><p>回到家中，用另个电脑测试，（上个是笔记本，家里是台式机）。</p>
<p>台式机，windows 用 telnet 虚拟机上的 ubuntu 仍旧失败（是端口23没开），但是 ssh 可以正常连接台式机上的 ubuntu，也可以连接笔记本上的 ubuntu。</p>
<p>笔记本上的 windows 可以 ssh 上 台式机上的 ubuntu，笔记本上的 Ubuntu 也可以连上台式机上的 ubuntu。</p>
<p>笔记本上的 windows 仍旧不可以 ssh 连接本机上的 ubuntu！！！👈👈👈👈更新，在写下这句之后又测试了一次，又可以连接了！！！</p>
<h2 id="为什么？？？"><a href="#为什么？？？" class="headerlink" title="为什么？？？"></a>为什么？？？</h2><p>对比前后之间的差别，能想到的首先的一个：网络。</p>
<p>公司和家中的wifi不同，并且在公司时，将虚拟机的 ip 固定为了 192.168.1.128.</p>
<p>回到家中之后变更为动态 ip。（去公司后再测）</p>
<hr>
<p>后续：</p>
<p>固定ip改成动态ip，在公司后测试正常了。</p>
]]></content>
      <categories>
        <category>疑难杂症</category>
      </categories>
      <tags>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>缩减SQLServer数据库日志</title>
    <url>/2021/09/%E7%BC%A9%E5%87%8FSQLServer%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<p>最近查看服务器运行情况，发现磁盘剩余容量每过一日就会缩小一大截，<br>眼看就不够数据库备份文件的大小了，必须处理！</p>
<p>一开始以为是服务器上后台应用产生的日志太多，但也不至于那么夸张啊？<br>每天减小几个G！</p>
<p>检查了一遍服务器中的文件的大小，发现数据库的一个文件占到了300+G的空间。<br>文件名：DCWLW_Log.ldf，跟它一块的一个文件：DCWLW.mdf，也占到40+G的空间。</p>
<p>其中，DCWLW.mdf是数据文件，DCWLW_Log.ldf是数据库的事务日志。</p>
<p>数据文件不能动，但日志文件倒是可以删除的。</p>
<h2 id="方案1：分离数据库"><a href="#方案1：分离数据库" class="headerlink" title="方案1：分离数据库"></a>方案1：分离数据库</h2><p>在网上查询如何缩小数据库日志的方法，发现有几种，其中最推荐的一种是</p>
<ul>
<li>先分离数据库</li>
<li>删除日志文件</li>
<li>再附加数据库，附加时找不到数据库日志，所以选择删除，管理软件会自动生成新的日志</li>
</ul>
<p>但分离数据库，首先数据库得没有客户端连接，因为本例中的服务器在生产环境中，因此不能草率地断开连接。</p>
<p>本来想着是不是等半夜夜深人静之时，再进行此操作，可是考虑到晚上可能因为懒而搞不了，所以还是再看看还有没有别的好方法。</p>
<p>在过程中，发现很多例子中 SHRINKFILE 函数用来缩减文件大小，因此查询它用法，发现microsoft官网中在 DBCC SHRINKFILE 一节中本来就有缩减日志的例子！！！</p>
<p>使用例子后确实完美解决了日志过大的问题，将332G日志收缩到了1M。</p>
<p>此次实践再次提醒了自己，遇到任何问题，最好的解答永远在官网！<br>（当然，如果没有一开始的查询，甚至我都不知道 SHRINKFILE 这个词）</p>
<p>如果想深入的学习，或要处理一些复杂的问题，查看官网资料永远是第一选择。</p>
<h2 id="方案2：官网例子"><a href="#方案2：官网例子" class="headerlink" title="方案2：官网例子"></a>方案2：官网例子</h2><p>附上官网上的例子：<br>地址:<br><a href="https://docs.microsoft.com/zh-cn/sql/t-sql/database-console-commands/dbcc-shrinkfile-transact-sql?view=sql-server-ver15">https://docs.microsoft.com/zh-cn/sql/t-sql/database-console-commands/dbcc-shrinkfile-transact-sql?view=sql-server-ver15</a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">--将数据文件收缩到指定的目标大小</span></span><br><span class="line"><span class="comment">--以下示例将 UserDB 用户数据库中名为 DataFile1 的数据文件的大小收缩到 7 MB。</span></span><br><span class="line">USE UserDB;  </span><br><span class="line">GO  </span><br><span class="line">DBCC SHRINKFILE (DataFile1, <span class="number">7</span>);  </span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="comment">--将日志文件收缩到指定的大小</span></span><br><span class="line"><span class="comment">--以下示例将 AdventureWorks 数据库中的日志文件收缩到 1 MB。 若要允许 DBCC SHRINKFILE 命令收缩文件，首先需要通过将数据库恢复模式设置为 SIMPLE 来截断该文件。</span></span><br><span class="line">USE AdventureWorks2012;  </span><br><span class="line">GO  </span><br><span class="line"><span class="comment">-- Truncate the log by changing the database recovery model to SIMPLE.  </span></span><br><span class="line"><span class="keyword">ALTER</span> DATABASE AdventureWorks2012  </span><br><span class="line"><span class="keyword">SET</span> RECOVERY SIMPLE;  </span><br><span class="line">GO  </span><br><span class="line"><span class="comment">-- Shrink the truncated log file to 1 MB.  </span></span><br><span class="line">DBCC SHRINKFILE (AdventureWorks2012_Log, <span class="number">1</span>);  </span><br><span class="line">GO  </span><br><span class="line"><span class="comment">-- Reset the database recovery model.  </span></span><br><span class="line"><span class="keyword">ALTER</span> DATABASE AdventureWorks2012  </span><br><span class="line"><span class="keyword">SET</span> RECOVERY <span class="keyword">FULL</span>;  </span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line"><span class="comment">--截断数据文件</span></span><br><span class="line"><span class="comment">--需要查询 sys.database_files 目录视图以获得数据文件的 file_id。</span></span><br><span class="line">USE AdventureWorks2012;  </span><br><span class="line">GO  </span><br><span class="line"><span class="keyword">SELECT</span> file_id, name  </span><br><span class="line"><span class="keyword">FROM</span> sys.database_files;  </span><br><span class="line">GO  </span><br><span class="line">DBCC SHRINKFILE (<span class="number">1</span>, TRUNCATEONLY);</span><br><span class="line"></span><br><span class="line"><span class="comment">--清空文件</span></span><br><span class="line"><span class="comment">--下面的示例展示了如何清空文件，这样文件就能从数据库中删除。 为了方便此示例进行展示，先创建包含数据的数据文件。</span></span><br><span class="line">USE AdventureWorks2012;  </span><br><span class="line">GO  </span><br><span class="line"><span class="comment">-- Create a data file and assume it contains data.  </span></span><br><span class="line"><span class="keyword">ALTER</span> DATABASE AdventureWorks2012   </span><br><span class="line"><span class="keyword">ADD</span> FILE (  </span><br><span class="line">    NAME <span class="operator">=</span> Test1data,  </span><br><span class="line">    FILENAME <span class="operator">=</span> <span class="string">&#x27;C:\t1data.ndf&#x27;</span>,  </span><br><span class="line">    SIZE <span class="operator">=</span> <span class="number">5</span>MB  </span><br><span class="line">    );  </span><br><span class="line">GO  </span><br><span class="line"><span class="comment">-- Empty the data file.  </span></span><br><span class="line">DBCC SHRINKFILE (Test1data, EMPTYFILE);  </span><br><span class="line">GO  </span><br><span class="line"><span class="comment">-- Remove the data file from the database.  </span></span><br><span class="line"><span class="keyword">ALTER</span> DATABASE AdventureWorks2012  </span><br><span class="line">REMOVE FILE Test1data;  </span><br><span class="line">GO</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其它的一些语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">--查询日志文件名</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> [DB]..sysfiles   </span><br><span class="line"><span class="keyword">where</span> charindex(<span class="string">&#x27;LDF&#x27;</span>,filename)<span class="operator">&gt;</span><span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>疑难杂症</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>SQL Server</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云服务器故障</title>
    <url>/2021/11/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%85%E9%9A%9C/</url>
    <content><![CDATA[<p>2021-11-23，今日在拷贝文件准备搭建测试服务器时，突然发生无法登录网站的情况。</p>
<p><strong>详情：</strong></p>
<p>准备搭建测试服务器，因此从原服务器上拷贝一份文件，原服务器上的程序同时在运行中。</p>
<ul>
<li><p>拷贝的时候，对文件夹打包压缩，有些文件提示正在被其它程序使用，一般是日志文件，忽视掉继续压缩；</p>
</li>
<li><p>在拷贝过程中，删除了一些过期的日志文件；</p>
</li>
<li><p>由于嫌拷贝文件太慢，想着能不能通过网络传输。当时脑子一糊，寻思测试服务器会不会和当前服务器在一个局域网里，查看了内网 IP ，两个 IP 的最后一个字段一个 51，一个 52，当即认为两个服务器在同一个局域网里，大喜，于是开启网络共享，准备从局域网传输文件。然而开启后另一边一查，不对，找不到，于是检查发现网络共享竟打不开，只好作罢。</p>
</li>
</ul>
<p>在上述一番操作下，终于群里面有人报说网站无法登录，本来寻思重启一下 tomcat 就能解决，之后重启数次， tomcat 倒是能正常启动，但网站依旧无法打开，然后就抓瞎了。</p>
<p><strong>解决：</strong></p>
<p>赶紧找张总晓磊帮忙，开始分析是端口被占用，于是关闭了 IIS 服务，随后又检查 tomcat 配置，以及证书是否过期等，均无法解决。我亦纳闷我在拷贝文件时，不曾更改过那些文件，难道是我记错了？</p>
<p>最后赶到张总公司，另一位张总海波帮忙分析文件，找了一会，猜测是否是防火墙的原因，于是关闭防火墙，果然，网站能够登录了！</p>
<p><strong>疑问：</strong></p>
<p>因为拷贝文件时并未碰防火墙，而在此之前网站是正常运行的，由是猜测难道是因为我开启网络共享触发了防火墙的某些策略，导致关闭了端口？此事现在打个疑问，后面慢慢寻找原因。</p>
<p><strong>最后：</strong></p>
<p>因为是关闭了防火墙，网站才正常运行了，但防火墙一直关闭总是不安全，因此要找在防火墙打开时运行的方法，需要看一看进出站规则哪里要配置。</p>
]]></content>
      <categories>
        <category>疑难杂症</category>
      </categories>
      <tags>
        <tag>云服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>逐层构造二叉树</title>
    <url>/2021/04/%E9%80%90%E5%B1%82%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<h2 id="逐层构造二叉树"><a href="#逐层构造二叉树" class="headerlink" title="逐层构造二叉树"></a>逐层构造二叉树</h2><p>刷leetcode时，测试用例输入一般都是一个元组，而二叉树的输入是按照元组顺序从上到下、从左到右逐层构造的。</p>
<p>为了方便本地测试，现在来实现这一构造方式吧！</p>
<p>首先二叉树数据结构定义：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode* left;</span><br><span class="line">    TreeNode* right;</span><br><span class="line">    <span class="built_in">TreeNode</span>() : <span class="built_in">val</span>(<span class="number">0</span>), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x, TreeNode* left, TreeNode* right) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(left), <span class="built_in">right</span>(right) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="1-用整数数组构造一个满二叉树"><a href="#1-用整数数组构造一个满二叉树" class="headerlink" title="1. 用整数数组构造一个满二叉树"></a><span id="j1">1. 用整数数组构造一个满二叉树</span></h3><p>首先，我们先看一个以整数数组<code>[0,1,2,3,4,5,6,7,8,9,10,11]</code>构造的满二叉树的结构：</p>
<pre class="mermaid">graph TB
0((0))
0 --> 1((1))
0 --> 2((2))
1 --> 3((3))
1 --> 4((4))
2 --> 5((5))
2 --> 6((6))
3 --> 7((7))
3 --> 8((8))
4 --> 9((9))
4 --> 10((10))
5 --> 11((11))</pre>

<p><font color=red>注意</font><font color=blue>，上图中圆圈中的值同样对应数组的下标，不论数组的值怎么变，数组下标在树中的位置不变。</font></p>
<p>由此可知，在构造该二叉树时：</p>
<p><em>1. 节点的左子树顶点序号是奇数</em><br><em>2. 节点的右子树顶点序号是偶数</em><br><em>3. 根节点序号与子节点的序号的关系：<code>root = (n - 1) / 2</code>，比如子节点（5，6）对应根节点是2。</em></p>
<p><strong>编程的思路与广度优先遍历类似</strong></p>
<p><font color=blue>广度优先遍历</font>的思路是：创建一个容器保存需要遍历的节点，当访问到该节点时，将它的左右子节点加入容器。</p>
<p><font color=blue>广度优先遍历</font>步骤以上图举例：</p>
<ol>
<li><p>首先将根节点0加入容器；</p>
</li>
<li><p>访问容器，输出节点0，将节点0的左右子节点1、2加入容器（若子节点为空则不添加）；</p>
</li>
<li><p>继续访问容器，输出节点1，将1的左右子节点3、4加入容器；</p>
</li>
<li><p>继续访问容器，输出节点2，将2的左右子节点5、6加入容器；</p>
</li>
<li><p>重复直到访问完容器中每一个节点。</p>
</li>
</ol>
<p><strong><font color=blue>逐层构造步骤：</font></strong></p>
<ol>
<li>创建一个节点并加入容器，若该节点为第一个创建的节点，作为二叉树的根节点；</li>
<li>创建一个节点并加入容器，找到父节点指向该节点（从根节点开始构造，树的所有节点都保存在容器中）；</li>
<li>父节点序号：<code>root = (n - 1) / 2</code>；</li>
<li>子节点序号：奇数则是左子节点，偶数则是右子节点；</li>
<li>重复直到构造完列表中的数。</li>
</ol>
<h4 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">biTreeInit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;vi)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = vi.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    vector&lt;TreeNode*&gt;vt;  <span class="comment">//保存节点的容器</span></span><br><span class="line"></span><br><span class="line">    TreeNode* node; <span class="comment">//根节点</span></span><br><span class="line">    TreeNode* t;	<span class="comment">//临时节点</span></span><br><span class="line">    node = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> root = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">        t = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(vi[i]);</span><br><span class="line">        vt.<span class="built_in">push_back</span>(t);	<span class="comment">//每一个创建的节点都将加入容器</span></span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) node = t; <span class="comment">//保存根节点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">1</span>) vt[root]-&gt;left = t; <span class="comment">//奇数对应左子树</span></span><br><span class="line">        <span class="keyword">else</span> vt[root]-&gt;right = t;	<span class="comment">//偶数对应右子树</span></span><br><span class="line"></span><br><span class="line">        i++;</span><br><span class="line">        root = (i - <span class="number">1</span>) / <span class="number">2</span>; <span class="comment">//根据子序号获得父序号</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="2-字符串数组构造二叉树，其中null表示空节点"><a href="#2-字符串数组构造二叉树，其中null表示空节点" class="headerlink" title="2.字符串数组构造二叉树，其中null表示空节点"></a>2.字符串数组构造二叉树，其中null表示空节点</h3><p>方法与<a href="#j1">1.整数数组构造</a>相似，区别是：</p>
<ol>
<li><p>将字符串转化为整数；</p>
</li>
<li><p>如果节点为空节点，则不加入容器；</p>
</li>
</ol>
<p>先看一个由字符串数组<code>[&quot;0&quot;,&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;null&quot;,&quot;5&quot;,&quot;null&quot;,&quot;7&quot;,&quot;8&quot;,&quot;9&quot;,&quot;10&quot;,&quot;11&quot;]</code>构造的二叉树：</p>
<pre class="mermaid">graph TB
0((0-0))
0 --> 1((1-1))
0 --> 2((2-2))
1 --> 3((3-3))
1 --> a((null-4))
2 --> 5((5-5))
2 --> b((null-6))
3 --> 7((7-7))
3 --> 8((8-8))
5 --> 9((9-9))
5 --> 10((10-10))
7 --> 11((11-11))</pre>

<p><font color=blue>图中，“-”前的值表示字符串对应的数值，“-”后的值为对应的数组下标。</font></p>
<p>节点null实际并不存在，只是为了便于观察数组与树的关系而画出来了。</p>
<p>根据<a href="#j1">1.整数数组构造</a>的思路，我们在构造过程中会逐步将每个节点的序号加入容器，最后得到的容器为<code>[0,1,2,3,4,5,6,7,8,9,10,11]</code>，其中<code>[4,6]</code>对应空节点。</p>
<p>观察上图，我们发现：</p>
<p><em>1. 子树顶点序号的奇偶特点并未发生改变；</em><br><em>2. 根节点前每多出 <code>x</code> 个空节点，根节点序号与子树序号的关系：<code>root = (n - 1) / 2</code>，<code>root</code>要多 <code>x</code>;</em></p>
<p>若将空节点的序号加入容器，则根据子节点序号计算根节点序号的方式就复杂许多，而若我们不将空节点加入容器，则最后得到的容器为<code>[0,1,2,3,5,7,8,9,10,11]</code>。</p>
<pre class="mermaid">graph TB
0((0-0))
0 --> 1((1-1))
0 --> 2((2-2))
1 --> 3((3-3))
1 --> a((null))
2 --> 5((5-4))
2 --> b((null))
3 --> 7((7-5))
3 --> 8((8-6))
5 --> 9((9-7))
5 --> 10((10-8))
7 --> 11((11-9))</pre>


<p>根据<code>root = (n - 1) / 2</code>对二叉树的节点验证：</p>
<p>对节点（9，10）计算得到4，容器下标4对应的节点为5，是（9，10）的根节点，符合。</p>
<p>对节点（11）计算得到5，容器下标5对应的节点为7，是（11）的根节点，符合。</p>
<p>因此在不将空节点加入容器时，不需要改变表达式就能正确构造。</p>
<p><em>观察树图，由于空节点并没有子节点，因此字符串数组中空节点的子节点位置被后面的节点占据。如果空节点不加入容器，空节点位置被后面节点占据，则空节点后面的根节点与它们的子节点的关系恰好不变。</em></p>
<h4 id="代码如下：-1"><a href="#代码如下：-1" class="headerlink" title="代码如下："></a>代码如下：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">TreeNode* <span class="title">biTreeInit</span><span class="params">(vector&lt;string&gt;vs)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = vs.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    vector&lt;TreeNode*&gt;vt;  <span class="comment">//保存节点的容器</span></span><br><span class="line"></span><br><span class="line">    TreeNode* node; <span class="comment">//根节点</span></span><br><span class="line">    TreeNode* t;	<span class="comment">//临时节点</span></span><br><span class="line">    node = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> root = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">        t = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span> (vs[i] != <span class="string">&quot;null&quot;</span>) &#123;</span><br><span class="line">            <span class="type">int</span> t_i = <span class="built_in">atoi</span>(vs[i].<span class="built_in">c_str</span>());</span><br><span class="line">            t = <span class="keyword">new</span> <span class="built_in">TreeNode</span>(t_i);</span><br><span class="line">            vt.<span class="built_in">push_back</span>(t);	<span class="comment">//每一个创建的节点都将加入容器</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) node = t; <span class="comment">//保存根节点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">1</span>) vt[root]-&gt;left = t; <span class="comment">//奇数对应左子树</span></span><br><span class="line">        <span class="keyword">else</span> vt[root]-&gt;right = t;	<span class="comment">//偶数对应右子树</span></span><br><span class="line"></span><br><span class="line">        i++;</span><br><span class="line">        root = (i - <span class="number">1</span>) / <span class="number">2</span>; <span class="comment">//根据子序号获得父序号</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法题解</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
        <tag>编程</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>1Q3-92.反转链表2</title>
    <url>/2021/03/1Q3-92-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A82/</url>
    <content><![CDATA[<h3 id="leetcode-92-反转链表2"><a href="#leetcode-92-反转链表2" class="headerlink" title="leetcode 92.反转链表2"></a>leetcode 92.反转链表2</h3><p>给你单链表的头节点 head 和两个整数 left 和 right ，其中 left &lt;&#x3D; right 。请你反转从位置 left 到位置 right 的链表节点，返回 反转后的链表 。</p>
<blockquote>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/reverse-linked-list-ii">https://leetcode-cn.com/problems/reverse-linked-list-ii</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<h5 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h5><p>链表：</p>
<pre class="mermaid">graph LR
0 --> 1
1 --> 2
2 --> 3
3 --> 4
4 --> 5
5 --> 6
6 --> 7
7 --> 8
8 --> 9</pre>


<p>反转位置3到7，反转后的链表为：</p>
<pre class="mermaid">graph LR
0 --> 1
1 --> 2
2 --> 7
7 --> 6
6 --> 5
5 --> 4
4 --> 3
3 --> 8
8 --> 9</pre>


<p>由上图可知，先将链表切割成0到2，3到7，8到9，反转链表3到7，然后重新链接即可。<br>切割链表：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//head是链表头节点，left表示反转的左端，right表示反转的右端</span></span><br><span class="line">ListNode* leftNode = head;</span><br><span class="line">ListNode* middleNode;</span><br><span class="line">ListNode* rightNode;</span><br><span class="line">ListNode* tNode;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= right; ++i)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; left) leftNode = leftNode-&gt;next;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(i == left) &#123;</span><br><span class="line">        middleNode = leftNode-&gt;next;</span><br><span class="line">        leftNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        tNode = middleNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(i &lt; right)&#123;</span><br><span class="line">        tNode = tNode-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(i == right)&#123;</span><br><span class="line">        rightNode = tNode-&gt;next;</span><br><span class="line">        tNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时各节点情况如下：</p>
<pre class="mermaid">graph BT
leftNode --> 2
middleNode --> 3
tNode --> 6
rightNode --> 7</pre>


<p>对以<em>middleNode</em>开始，以<em>tNode</em>结束的链表进行反转。</p>
<p>从前往后一次遍历反转链表，步骤：</p>
<ol>
<li><p>保存当前节点的子节点指针</p>
</li>
<li><p>当前节点作为头节点，当前节点指向头节点</p>
</li>
<li><p>更新头节点指针，指向当前节点</p>
</li>
<li><p>更新当前节点指针，指向子节点</p>
</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ListNode* pre = <span class="literal">NULL</span>;</span><br><span class="line">ListNode* cur = middleNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(cur != <span class="literal">NULL</span>)&#123;</span><br><span class="line">    ListNode* next = cur-&gt;next;</span><br><span class="line">    cur-&gt;next = pre;</span><br><span class="line">    pre = cur;</span><br><span class="line">    cur = next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>反转完成后，原头节点指针<em>middleNode</em>指向尾节点，原尾节点指针<em>tNode</em>指向头节点。</p>
<p>将<em>leftNode</em>节点指向<em>middleNode</em>节点，<em>tNode</em>节点指向<em>rightNode</em>节点即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">leftNode-&gt;next = tNode;</span><br><span class="line">middleNode-&gt;next = rightNode;</span><br></pre></td></tr></table></figure>

<p>最后<em>head</em>指向的链表即完成了反转。</p>
]]></content>
      <categories>
        <category>算法题解</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>leetcode</tag>
        <tag>每日三题</tag>
        <tag>链表</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb开发预备</title>
    <url>/2021/04/JavaWeb%E5%BC%80%E5%8F%91%E9%A2%84%E5%A4%87/</url>
    <content><![CDATA[<h3 id="1-安装必备软件"><a href="#1-安装必备软件" class="headerlink" title="1.安装必备软件"></a>1.安装必备软件</h3><ul>
<li>下载当前最新版 jdk，版本：<a href="https://download.oracle.com/otn-pub/java/jdk/16.0.1+9/7147401fd7354114ac51ef3e1328291f/jdk-16.0.1_windows-x64_bin.exe">jdk-16.0.1_windows-x64_bin.exe</a>。</li>
<li>下载 IDE，由于当时没注意，下载的是 eclipse 普通版本，<a href="https://ftp.jaist.ac.jp/pub/eclipse/technology/epp/downloads/release/2021-03/R/eclipse-java-2021-03-R-win32-x86_64.zip">eclipse-java-2021-03-R-win32-x86_64.zip</a>，给后面配置造成了很多麻烦，如果是开发 javaweb 的话，最好还是安装企业版。</li>
<li>下载 tomcat，在官网找到当前的最新版下载： <a href="https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-10/v10.0.5/bin/apache-tomcat-10.0.5-windows-x64.zip">apache-tomcat-10.0.5-windows-x64.zip</a>。</li>
<li>由于要使用 mysql 数据库，因此需要下载数据库连接器 jar 包： <a href="https://repo1.maven.org/maven2/mysql/mysql-connector-java/8.0.24/mysql-connector-java-8.0.24.jar">mysql-connector-java-8.0.24.jar</a>，使用其它数据库，需要安装相关 jar。</li>
</ul>
<h3 id="2-配置-Java-环境变量"><a href="#2-配置-Java-环境变量" class="headerlink" title="2.配置 Java 环境变量"></a>2.配置 Java 环境变量</h3><ul>
<li>配置 <code>path</code>，通常在安装时就会自动配置，例如 <code>C:\Program Files\Common Files\Oracle\Java\javapath</code>，也可将 jdk 的 bin 目录增加到该变量中。</li>
<li>配置 <code>JAVA_HOME</code>，设置成 jdk 的安装目录，Eclipse&#x2F;NetBeans&#x2F;Tomcat 等软件就是通过搜索 <code>JAVA_HOME</code> 变量来找到并使用安装好的 jdk。</li>
<li>配置 <code>CLASSPATH</code>，将需要使用的 jar 包路径配置到该变量下。</li>
</ul>
<h3 id="3-使用-eclipse-部署-tomcat"><a href="#3-使用-eclipse-部署-tomcat" class="headerlink" title="3.使用 eclipse 部署 tomcat"></a>3.使用 eclipse 部署 tomcat</h3><ul>
<li><p>配置 Server Runtime：窗口工具栏依次选择 <font color=orange>Window&#x2F;Preferences&#x2F;Server&#x2F;Runtime Environments</font>，添加新的环境，因为是 tomcat 服务器，因此选择 Apache，根据本机 tomcat 的安装版本，配置路径。</p>
<ul>
<li>若未找到相应版本，前往窗口工具栏依次选择 <font color=orange>Help&#x2F;Install New Software</font>，下拉 Work with，选择自己的安装源，然后选择 <code>Web, XML, Java EE and OSGi Enterprise Development</code> 下的 <code>JST Server Adapters</code> 和 <code>JST Server Adapters Extensions</code> 进行安装（安装条在软件下方）。</li>
</ul>
</li>
<li><p>配置 web 开发项目：窗口工具栏依次选择 <font color=orange>File&#x2F;New&#x2F;Dynamic Web Project</font>，在生成的项目路径 <code>webapp</code>下新建 <font color=pink>index.jsp</font> 文件，右键项目名称，选择 <code>Run As/Run on Server</code> ，即可看到效果。</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">        &lt;title&gt;欢迎页面&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        欢迎使用eclipse部署Tomcat。</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-添加-Java-程序"><a href="#4-添加-Java-程序" class="headerlink" title="4.添加 Java 程序"></a>4.添加 Java 程序</h3><ul>
<li><p>在源码目录（如：src&#x2F;main&#x2F;java）下，新建 Class，添加 java 代码。java 文件会同步到下方的  tomcat 同名目录中。</p>
</li>
<li><p>在 <code>WEB-INF/web.xml</code> 中，添加相关配置，例子如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置在 web-app 标签内--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--此例中 java 文件名为 HelloWrold.java，package 名称为 tomcat10 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>tomcat10.HelloWorld<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/HelloWorld<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>右键项目 <code>Run As/Run on Server</code> 后，将自动运行。</p>
</li>
</ul>
<h4 id="连接mysql数据库"><a href="#连接mysql数据库" class="headerlink" title="连接mysql数据库"></a>连接mysql数据库</h4><ul>
<li>将数据库连接文件（mysql-connector-java-8.0.24.jar）放在项目中的 lib 目录下（可自行创建），右键该文件选择 <code>Build Path/Add to Build Path</code>。</li>
<li><font color=red>注意</font>，将该文件同时复制一份到 tomcat 安装目录的 lib 目录下，否则<font color=red>运行时 tomcat 找不到该包</font>。</li>
</ul>
]]></content>
      <categories>
        <category>项目开发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>编程</tag>
        <tag>总结</tag>
        <tag>开发环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Java后台维护</title>
    <url>/2022/02/Java%E5%90%8E%E5%8F%B0%E7%BB%B4%E6%8A%A4%E6%89%80%E9%81%87%E4%B9%8B%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>一个 Java 小白维护一套没有文档的，代码凌乱的 Java 后台系统，遇到一些新手问题这里记录。</p>
<h3 id="一、更新jar包"><a href="#一、更新jar包" class="headerlink" title="一、更新jar包"></a>一、更新jar包</h3><p>在更新 Java 后端程序时，需要修改一个 JAR 包里面的文件，替换里面的部分内容。</p>
<p>使用 <code>jar -xvf xxx.jar</code> 解压到当前文件夹，文件夹包含 META-INF&#x2F;MANIFEST.MF 和其它要打包的文件。</p>
<p>替换要修改的文件后，使用 <code>jar -cvfm xxx.jar META-INF/MANIFEST.MF xx</code> 打包，其中 xx 表示其它要打包的文件。</p>
<p>MANIFEST.MF</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">Manifest-Version</span>: <span class="string">1.0</span></span><br><span class="line"><span class="attr">Ant-Version</span>: <span class="string">Apache Ant 1.6.1</span></span><br><span class="line"><span class="attr">Specification-Title</span>: <span class="string">DCWLW</span></span><br><span class="line"><span class="attr">Class-Path</span>: <span class="string">conn.jar commons-codec-1.3.jar commons-dbcp-1.2.2.jar comm</span></span><br><span class="line"> <span class="attr">ons-lang-2.4.jar</span> <span class="string">commons-lang3-3.2.jar commons-logging-1.0.4.jar comm</span></span><br><span class="line"> <span class="attr">ons-pool-1.3.jar</span> <span class="string">dom4j.jar httpclient-4.5.6.jar httpcore-4.4.11.jar j</span></span><br><span class="line"> <span class="attr">dom-1.0.jar</span> <span class="string">jtds-1.2.jar log4j-1.2.14.jar ojdbc14.jar msutil.jar slf4</span></span><br><span class="line"> <span class="attr">j-api-1.6.6.jar</span> <span class="string">slf4j-log4j12-1.6.6.jar sqljdbc4.jar</span></span><br><span class="line"><span class="attr">Created-By</span>: <span class="string">xinli.zhangxlei</span></span><br><span class="line"><span class="attr">Specification-Version</span>: <span class="string">1.0</span></span><br><span class="line"><span class="attr">Main-Class</span>: <span class="string">com.servs.main.ServiceInit</span></span><br></pre></td></tr></table></figure>
<p><strong>更新：</strong>在Linux下更简单的方法是，复制更改的文件，连同其路径，使用命令<code>jar uf</code>命令进行更新。</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jar uf WLWServ.jar com/servs/main/HandlerTest.class</span><br></pre></td></tr></table></figure>



<h3 id="二、查看数据库配置"><a href="#二、查看数据库配置" class="headerlink" title="二、查看数据库配置"></a>二、查看数据库配置</h3><p>在迁移服务后，需要修改数据库配置文件到当前使用的数据库，因此要改变其 IP 地址，为此找了好一会，最后仔细观察 log，才发现配置文件所在位置在 conn.jar 文件中，将其修改后重新打包。</p>
<p>db.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#This is DataBase config files.</span></span><br><span class="line"><span class="comment">#Please copy to &quot; tomcat\conf &quot; file.properties</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># postgresql</span></span><br><span class="line"><span class="comment"># user=xx</span></span><br><span class="line"><span class="comment"># password=yyyyy</span></span><br><span class="line"><span class="comment"># drivers=org.postgresql.Driver</span></span><br><span class="line"><span class="comment"># url=jdbc:postgresql://192.168.3.198:5432/radius</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># sqlserver2000 -dts</span></span><br><span class="line"><span class="comment">#user=xx</span></span><br><span class="line"><span class="comment">#password=yyyyy</span></span><br><span class="line"><span class="comment">#drivers=net.sourceforge.jtds.jdbc.Driver</span></span><br><span class="line"><span class="comment">#url=jdbc:jtds:sqlserver://xx.xx.xxx.xx:1433/PHBase;SelectMethod=cursor</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#sqlserver2005 -2.0  localhost</span></span><br><span class="line"><span class="attr">user</span>=<span class="string">xx</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">yyyyy</span></span><br><span class="line"><span class="attr">drivers</span>=<span class="string">com.microsoft.sqlserver.jdbc.SQLServerDriver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:sqlserver://xx.xx.xxx.xx;database=DCWLW;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#other</span></span><br><span class="line"><span class="attr">MaxConnectionCount</span>=<span class="string">60</span></span><br><span class="line"><span class="attr">MaxIdleCount</span>=<span class="string">3</span></span><br><span class="line"><span class="attr">MaxWait</span>=<span class="string">1000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#MinConnectionCount=2</span></span><br><span class="line"><span class="comment">#ManageType=0</span></span><br></pre></td></tr></table></figure>



<h3 id="三、防火墙"><a href="#三、防火墙" class="headerlink" title="三、防火墙"></a>三、防火墙</h3><p>早前在搬迁一些云服务器文件时，突然发现网站无法访问，最后查清是防火墙的问题，关闭防火墙后服务恢复正常。在搬迁服务器文件过程中，<strong>唯一有过的可疑操作是打开过网络共享</strong>，并共享了一个文件夹（该操作没有成功，可能阿里云服务器禁止网络共享），尚未清楚该操作是否与防火墙的策略有何关联。</p>
<h3 id="四、tomcat添加SSL认证"><a href="#四、tomcat添加SSL认证" class="headerlink" title="四、tomcat添加SSL认证"></a>四、tomcat添加SSL认证</h3><p>之前的网站未经过 SSL 认证，没有 HTTPS 加密，微信小程序是不支持没有 HTTPS 加密的地址的，因此需要进行 SSL 认证。因为使用的阿里云服务器，阿里云有该服务。阿里云提供免费证书，申请配置完域名后，放到 <strong>tomcat 根目录 cert</strong> 文件夹下。</p>
<p>证书目录：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/image-20211130095508197.png" alt="image-20211130095508197"></p>
<p>修改 conf&#x2F;server.xml 文件，配置 https 所用端口 443</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">&quot;8005&quot;</span> <span class="attr">shutdown</span>=<span class="string">&quot;SHUTDOWN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.startup.VersionLoggerListener&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.core.AprLifecycleListener&quot;</span> <span class="attr">SSLEngine</span>=<span class="string">&quot;on&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.core.JasperListener&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">GlobalNamingResources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Resource</span> <span class="attr">name</span>=<span class="string">&quot;UserDatabase&quot;</span> <span class="attr">auth</span>=<span class="string">&quot;Container&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">type</span>=<span class="string">&quot;org.apache.catalina.UserDatabase&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">description</span>=<span class="string">&quot;User database that can be updated and saved&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">factory</span>=<span class="string">&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">pathname</span>=<span class="string">&quot;conf/tomcat-users.xml&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">GlobalNamingResources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;80&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">maxHttpHeaderSize</span>=<span class="string">&quot;8192&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">maxThreads</span>=<span class="string">&quot;150&quot;</span> <span class="attr">minSpareThreads</span>=<span class="string">&quot;25&quot;</span> <span class="attr">maxSpareThreads</span>=<span class="string">&quot;75&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableLookups</span>=<span class="string">&quot;false&quot;</span>  <span class="attr">acceptCount</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span> <span class="attr">disableUploadTimeout</span>=<span class="string">&quot;true&quot;</span> </span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span>  <span class="attr">URIEncoding</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8443&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;org.apache.coyote.http11.Http11Protocol&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">maxThreads</span>=<span class="string">&quot;150&quot;</span> <span class="attr">SSLEnabled</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scheme</span>=<span class="string">&quot;https&quot;</span> <span class="attr">secure</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">clientAuth</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sslProtocol</span>=<span class="string">&quot;TLS&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;443&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">SSLEnabled</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">scheme</span>=<span class="string">&quot;https&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">secure</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">keystoreFile</span>=<span class="string">&quot;D:\apache-tomcat-7.0.65\cert\5568913_liyunlong.xdt-iot.com.pfx&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">keystoreType</span>=<span class="string">&quot;PKCS12&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">keystorePass</span>=<span class="string">&quot;r0ftyhrF&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">clientAuth</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">SSLProtocol</span>=<span class="string">&quot;TLSv1+TLSv1.1+TLSv1.2&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">ciphers</span>=<span class="string">&quot;TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA256&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8009&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;AJP/1.3&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;localhost&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.realm.LockOutRealm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">resourceName</span>=<span class="string">&quot;UserDatabase&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Realm</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> <span class="attr">directory</span>=<span class="string">&quot;logs&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">prefix</span>=<span class="string">&quot;localhost_access_log.&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;.txt&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">pattern</span>=<span class="string">&quot;%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	  <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;liyunlong.xdt-iot.com&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;&quot;</span> <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">&quot;&quot;</span> <span class="attr">docBase</span>=<span class="string">&quot;D:\apache-tomcat-7.0.65\webapps_xassp\DCWLW&quot;</span> <span class="attr">reloadable</span>=<span class="string">&quot;true&quot;</span> &gt;</span> </span><br><span class="line">          <span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">&quot;/upload&quot;</span> <span class="attr">docBase</span>=<span class="string">&quot;D:\uploads&quot;</span>  <span class="attr">reloadable</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">&quot;/download&quot;</span> <span class="attr">docBase</span>=<span class="string">&quot;D:\apache-tomcat-7.0.65\webapps_xassp\download&quot;</span>  <span class="attr">reloadable</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> <span class="attr">directory</span>=<span class="string">&quot;logs&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">prefix</span>=<span class="string">&quot;localhost_access_log.&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;.txt&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">pattern</span>=<span class="string">&quot;%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="五、java程序未释放临时文件"><a href="#五、java程序未释放临时文件" class="headerlink" title="五、java程序未释放临时文件"></a>五、java程序未释放临时文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@lyl-linux:WLWpack$ ps -ef | grep WLWServ</span><br><span class="line">root     27719     1  5 14:10 ?        00:00:54 java -jar -Xms1536m -Xmx2046m -XX:PermSize=128M -XX:MaxPermSize=256M /opt/Xassp/DCServer/WLWServ.jar</span><br><span class="line">root     30118 28413  0 14:26 pts/2    00:00:00 grep --color=auto WLWServ</span><br><span class="line">root@lyl-linux:WLWpack$ ls -l /proc/27719/fd</span><br><span class="line">total 0</span><br><span class="line">lr-x------ 1 root root 64 May 11 14:10 0 -&gt; /dev/null</span><br><span class="line">l-wx------ 1 root root 64 May 11 14:10 1 -&gt; /opt/Xassp/DCServer/DC.log</span><br><span class="line">lr-x------ 1 root root 64 May 11 14:10 10 -&gt; /dev/urandom</span><br><span class="line">lr-x------ 1 root root 64 May 11 14:10 100 -&gt; /usr/java/jdk1.8.0_151/jre/lib/jce.jar</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:10 101 -&gt; socket:[65960083]</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:10 102 -&gt; socket:[65958648]</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:10 103 -&gt; socket:[65958649]</span><br><span class="line">*</span><br><span class="line">*</span><br><span class="line">*</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:11 849 -&gt; socket:[65962399]</span><br><span class="line">lr-x------ 1 root root 64 May 11 14:10 85 -&gt; /tmp/jar_cache1697996469127696081.tmp (deleted)</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:11 850 -&gt; socket:[65956493]</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:11 851 -&gt; socket:[65956497]</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:11 852 -&gt; socket:[65956667]</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:11 853 -&gt; socket:[65962423]</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:11 855 -&gt; socket:[65962615]</span><br><span class="line">lr-x------ 1 root root 64 May 11 14:10 86 -&gt; /tmp/jar_cache7396855417572440361.tmp (deleted)</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:11 860 -&gt; socket:[65967045]</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:11 861 -&gt; socket:[65966819]</span><br><span class="line">lr-x------ 1 root root 64 May 11 14:10 87 -&gt; /tmp/jar_cache5532799349897305199.tmp (deleted)</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:20 871 -&gt; socket:[65968386]</span><br><span class="line">lr-x------ 1 root root 64 May 11 14:10 88 -&gt; /tmp/jar_cache3266479730475853680.tmp (deleted)</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:20 880 -&gt; socket:[65968209]</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:20 884 -&gt; socket:[65967056]</span><br><span class="line">lr-x------ 1 root root 64 May 11 14:10 89 -&gt; /tmp/jar_cache8112640596215738372.tmp (deleted)</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:20 894 -&gt; socket:[65972740]</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:20 895 -&gt; socket:[65972730]</span><br><span class="line">lr-x------ 1 root root 64 May 11 14:10 9 -&gt; /dev/random</span><br><span class="line">lr-x------ 1 root root 64 May 11 14:10 90 -&gt; /tmp/jar_cache5110604533158166258.tmp (deleted)</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:20 900 -&gt; socket:[65972734]</span><br><span class="line">lr-x------ 1 root root 64 May 11 14:10 91 -&gt; /tmp/jar_cache7000421609336413492.tmp (deleted)</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:20 915 -&gt; socket:[65969067]</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:20 917 -&gt; socket:[65966968]</span><br><span class="line">lr-x------ 1 root root 64 May 11 14:10 92 -&gt; /tmp/jar_cache6363263715093382132.tmp (deleted)</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:22 920 -&gt; socket:[65972778]</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:22 922 -&gt; socket:[65972339]</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:22 923 -&gt; socket:[65968715]</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:22 924 -&gt; socket:[65967706]</span><br><span class="line">lr-x------ 1 root root 64 May 11 14:10 93 -&gt; /tmp/jar_cache733013011657608974.tmp (deleted)</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:24 931 -&gt; socket:[65972801]</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:24 932 -&gt; socket:[65972824]</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:24 933 -&gt; socket:[65969142]</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:25 934 -&gt; socket:[65972838]</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:25 935 -&gt; socket:[65974276]</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:25 936 -&gt; socket:[65974298]</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:25 937 -&gt; socket:[65974306]</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:25 938 -&gt; socket:[65972881]</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:25 939 -&gt; socket:[65972882]</span><br><span class="line">lr-x------ 1 root root 64 May 11 14:10 94 -&gt; /tmp/jar_cache4426843942519086123.tmp (deleted)</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:25 940 -&gt; socket:[65972885]</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:25 941 -&gt; socket:[65974317]</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:25 942 -&gt; socket:[65972914]</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:25 943 -&gt; socket:[65974398]</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:25 944 -&gt; socket:[65972940]</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:25 945 -&gt; socket:[65974409]</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:25 946 -&gt; socket:[65972959]</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:25 947 -&gt; socket:[65973448]</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:25 948 -&gt; socket:[65974430]</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:25 949 -&gt; socket:[65974440]</span><br><span class="line">lr-x------ 1 root root 64 May 11 14:10 95 -&gt; /tmp/jar_cache6962183311593254185.tmp (deleted)</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:25 950 -&gt; socket:[65974476]</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:25 951 -&gt; socket:[65974480]</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:25 952 -&gt; socket:[65974506]</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:25 953 -&gt; socket:[65974524]</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:25 954 -&gt; socket:[65973053]</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:25 955 -&gt; socket:[65974549]</span><br><span class="line">lr-x------ 1 root root 64 May 11 14:10 96 -&gt; /tmp/jar_cache3916538713653732339.tmp (deleted)</span><br><span class="line">lr-x------ 1 root root 64 May 11 14:10 97 -&gt; /usr/java/jdk1.8.0_151/jre/lib/resources.jar</span><br><span class="line">l-wx------ 1 root root 64 May 11 14:10 98 -&gt; /root/keep/DC_400.log</span><br><span class="line">lrwx------ 1 root root 64 May 11 14:10 99 -&gt; socket:[65958644]</span><br></pre></td></tr></table></figure>

<p>以上，使用<code>ps -ef | grep WLWServ</code>查看WLWServ程序的进程号，然后用<code>ls -l /proc/27719/fd</code>查看进程占用的文件，发现很多线程使用deleted的文件。</p>
]]></content>
      <categories>
        <category>项目开发</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb项目理解</title>
    <url>/2022/02/JavaWeb%E9%A1%B9%E7%9B%AE%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="〇、项目中使用到的具体技术："><a href="#〇、项目中使用到的具体技术：" class="headerlink" title="〇、项目中使用到的具体技术："></a>〇、项目中使用到的具体技术：</h3><ol>
<li>jsp</li>
<li>Servlet</li>
<li>Tomcat</li>
<li>structs2</li>
<li>Ajax</li>
<li>Session和Cookie</li>
<li>SQL Server</li>
</ol>
<h3 id="一、jsp"><a href="#一、jsp" class="headerlink" title="一、jsp"></a>一、jsp</h3><p>参考博客：<a href="https://blog.csdn.net/qq_43318391/article/details/111005214">https://blog.csdn.net/qq_43318391/article/details/111005214</a></p>
<p>JSP（JavaServer Pages）是html的一种拓展，其特点是能够在页面中嵌入Java代码，在浏览器加载页面的时候执行这些java代码，以此实现与服务器端的业务交互，进而生成<strong>动态</strong>的网页。</p>
<h3 id="二、Servlet"><a href="#二、Servlet" class="headerlink" title="二、Servlet"></a>二、Servlet</h3><p>Servlet运行在服务端的Java小程序，是sun公司提供的一套规范（接口），用来处理客户端请求、响应给浏览器的动态资源。</p>
<p>Servlet的实质就是java代码，通过java的API动态地向客户端输出内容。</p>
<p>Servlet规范：包含三个技术点（三大组件）<br>1)servlet技术——核心技术<br>2)filter技术——过滤器<br>3)listener技术——监听器</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cloudchart;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> net.sf.json.JSONArray;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">		response.getWriter().append(<span class="string">&quot;Served at: &quot;</span>).append(request.getContextPath());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">		doGet(request, response);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>web.xml中配置servlet。</p>
<p>当然，以上的Selvlet由eclipse生成，已经作了注解。旧版本的servlet需要手动配置web.xml文件，servlet2.5以后，servlet的配置直接在Java代码中进行注解配置。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>自定义名称<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>处理请求的类的完整路径<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>自定义名称<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>请求名<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="三、Tomcat"><a href="#三、Tomcat" class="headerlink" title="三、Tomcat"></a>三、Tomcat</h3><h4 id="Web开发中的常见概念"><a href="#Web开发中的常见概念" class="headerlink" title="Web开发中的常见概念"></a>Web开发中的常见概念</h4><ul>
<li><p>B&#x2F;S系统和C&#x2F;S系统<br>Brower&#x2F;Server：浏览器 服务器 系统 —– 网站<br>Client&#x2F;Server：客户端 服务器 系统 —– QQ、大型游戏</p>
</li>
<li><p>web应用服务器<br>供向外部发布web资源的服务器软件</p>
</li>
<li><p>web资源<br>存在于web应用服务器可供外界访问的资源就是web资源<br>例如：存在于web应用服务器内部的Html、Css、js、图片、视频等</p>
</li>
</ul>
<p>1）静态资源：指web页面中供人们浏览的数据始终是不变。比如：HTML、CSS、 JS、图片、多媒体。<br>2）动态资源：指web页面中供人们浏览的数据是由程序产生的，不同时间点访问 web页面看到的内容各不相同。比如：JSP&#x2F;Servlet、ASP、PHP</p>
<p>javaWEB领域：动态资源即通过java代码去动态地生成html。</p>
<h4 id="tomcat目录结构"><a href="#tomcat目录结构" class="headerlink" title="tomcat目录结构"></a>tomcat目录结构</h4><ul>
<li><p>bin</p>
<p>bin目录主要是用来存放tomcat的命令，主要有两大类，一类是以.sh结尾的（linux命令），另一类是以.bat结尾的（windows命令）。</p>
<p>很多环境变量的设置都在此处，例如可以设置JDK路径、tomcat路径<br>startup 用来启动tomcat<br>shutdown 用来关闭tomcat<br>修改catalina可以设置tomcat的内存</p>
</li>
<li><p>conf</p>
<p>conf目录主要是用来存放tomcat的一些配置文件。</p>
<p>server.xml可以设置端口号、设置域名或IP、默认加载的项目、请求编码<br>web.xml可以设置tomcat支持的文件类型<br>context.xml可以用来配置数据源之类的<br>tomcat-users.xml用来配置管理tomcat的用户与权限<br>在Catalina目录下可以设置默认加载的项目</p>
</li>
<li><p>lib</p>
<p>lib目录主要用来存放tomcat运行需要加载的jar包。</p>
</li>
<li><p>logs</p>
<p>logs目录用来存放tomcat在运行过程中产生的日志文件，非常重要的是在控制台输出的日志。（清空不会对tomcat运行带来影响）<br>在windows环境中，控制台的输出日志在catalina.xxxx-xx-xx.log文件中<br>在linux环境中，控制台的输出日志在catalina.out文件中</p>
</li>
<li><p>temp</p>
<p>temp目录用户存放tomcat在运行过程中产生的临时文件。（清空不会对tomcat运行带来影响）</p>
</li>
<li><p>webapps</p>
<p>webapps目录用来存放应用程序，当tomcat启动时会去加载webapps目录下的应用程序。可以以文件夹、war包、jar包的形式发布应用。</p>
</li>
<li><p>work</p>
<p>work目录用来存放tomcat在运行时的编译后文件，例如JSP编译后的文件。<br>清空work目录，然后重启tomcat，可以达到清除缓存的作用。</p>
</li>
</ul>
<h3 id="四、Structs"><a href="#四、Structs" class="headerlink" title="四、Structs"></a>四、Structs</h3><p>Struts2是一个比较出色的基于MVC设计模式的框架，是由Struts1和WebWork发展而来的，性能也比较稳定，现在是Apache软件基金会的一个项目。</p>
<p>struts2项目的基本框架，是一个三层结构。action从service接口得到数据负责处理业务与过滤业务，把数据给网页。service是定义接口，serviceimpl是定义接口的实现，是功能代码编写地方，它从daoimpl接口中得到数据，而dao是对数据库进行操作的代码。简而言之，action调用serviceimpl，service实现serviceimpl，serviceimpl调用daoimpl，dao实现daoimpl。</p>
<p>Struts的基层结构，jsp页面是表示层View， Action是业务逻辑即控制层Control，Dao、DaoImpl、Service、ServiceImpl都是数据访问层的东西。一般性Service、ServiceImpl是连接 Action和Dao、DaoImpl的，一般性用Spring的注解在xml中，Dao、DaoImpl是最后操作数据库的，如果你用ibatis的话，用Service、ServiceImpl调用Dao、DaoImpl，然后数据库的操作语句的调用写在Dao、DaoImpl，最后真正数据库操作语句写在相应的xml中。</p>
<p>配置web.xml，在<web-app>节点之间添加下面代码，也就是Struts2的框架的过滤器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>login filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.ty.base.LoginFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>flag<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>operator<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>login<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/login.jsp<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>excludes<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/welcome.action,/logon.action,/Login-executeJson.action,/authImg.html<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>login filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置过滤器是Struts2能跑起来最基本的前提，工作原理就是当tomcat容器启动时，首先加载web.xml，所以会加载其中定义的过滤器，因此StrutsPrepareAndExecuteFilter过滤器会过滤项目下所有的请求，然后后来利用过滤器捕获action请求，从而调用相应的方法进行处理，这就是Struts2的大致工作情况，StrutsPrepareAndExecuteFilter类出现可以让开发人员自定义过滤器，从而在请求到达处理之间对用户请求进行处理</p>
<p>配置好web.xml后需要建立Struts2的核心配置文件，位置就是项目下的src目录中，建立struts.xml文件，他负责配置所有的请求对应各种类或者方法，所以是核心配置文件，基本的结构如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">struts</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//Apache Software Foundation//DTD Struts Configuration 2.1//EN&quot;</span> <span class="string">&quot;http://struts.apache.org/dtds/struts-2.1.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">&quot;struts.enable.DynamicMethodInvocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">&quot;struts.ognl.allowStaticMethodAccess&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">&quot;struts.custom.i18n.resources&quot;</span> <span class="attr">value</span>=<span class="string">&quot;phMessage&quot;</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">&quot;struts.devMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;constant name=&quot;struts.i18n.encoding&quot; value=&quot;GB18030&quot; /&gt;  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">&quot;struts.i18n.encoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">&quot;struts.multipart.maxSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;50000000&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;jspAction.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;jsonAction.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;mobileAction.xml&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;main&quot;</span> <span class="attr">namespace</span>=<span class="string">&quot;/&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;welcome&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ty.login.LoginAction&quot;</span>  <span class="attr">method</span>=<span class="string">&quot;welcome&quot;</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span>&gt;</span>/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;login&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.ty.login.LoginAction&quot;</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span>&gt;</span>/page/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;input&quot;</span>&gt;</span>/page/login/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    		<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;repass&quot;</span>&gt;</span>/loginuppassword.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span>    </span><br></pre></td></tr></table></figure>

<p>在这里，一个action就负责处理一个请求，packge我们使用的默认包，当有多个packge时，name一定要区分开，namespace就是访问的命名空间，如果项目名是LYL，如果命名空间是&#x2F;test那么应该访问，<a href="http://localhost:8080/LYL/test/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84action">http://localhost:8080/LYL/test/自定义的action</a></p>
<p>　　第一个action对应的访问路径就是<a href="http://localhost:8080/LYL/welcome.action%E5%BD%93%E7%84%B6%E9%BB%98%E8%AE%A4%E4%B9%9F%E5%8F%AF%E4%BB%A5%E4%B8%8D%E5%8A%A0action">http://localhost:8080/LYL/welcome.action当然默认也可以不加action</a></p>
<p>　　第二个action对应的就是<a href="http://localhost:8080/LYL/login.action">http://localhost:8080/LYL/login.action</a></p>
<p>　　然后去建立一个Action类，就是LYL，类名命名必须是以Action结尾的驼峰命名，并且继承于ActionSupport类，具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> net.zengzhiying.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginAction</span> <span class="keyword">extends</span> <span class="title class_">ActionSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行Action&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">welcome</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;welcome  new user &quot;</span>);</span><br><span class="line">        center_name = <span class="string">&quot;请输入店面编号&quot;</span>;</span><br><span class="line">        userName = <span class="string">&quot;请输入登录账号&quot;</span>;</span><br><span class="line">        password = <span class="string">&quot;请输入登录密码&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增自定义方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果前面配置文件没指定method属性，默认访问的方法就是execute方法。</p>
<h3 id="五、AJAX技术"><a href="#五、AJAX技术" class="headerlink" title="五、AJAX技术"></a>五、AJAX技术</h3><p>参考菜鸟教程：<a href="https://www.runoob.com/ajax/ajax-tutorial.html">https://www.runoob.com/ajax/ajax-tutorial.html</a></p>
<p><code>Asynchronous JavaScript and XML</code> 异步的JavaScript和XML。</p>
<p>它不是一个新的编程语言，只是使用现有标准的新方法。</p>
<p>AJAX 最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容。</p>
<p>AJAX 不需要任何浏览器插件，但需要用户允许JavaScript在浏览器上执行。</p>
<p>包含的技术包括：</p>
<p>使用CSS和XHTML来进行展示<br>使用DOM模型来交互和动态显示<br>使用XMLHttpRequest来和服务器进行异步通信<br>使用JavaScript来绑定和调用<br>它的核心技术就是 XMLHttpRequest 。不同的浏览器创建XMLHttpRequest是有差别的，IE浏览器使用ActiveXObject ，而其他浏览器使用的是 XMLHttpRequest 的JavaScript内置对象</p>
<p><strong>Ajax编程步骤：</strong></p>
<ol>
<li>创建XMLHttpRequest对象</li>
<li>设置请求方式</li>
<li>调用回调函数</li>
<li>发送请求</li>
</ol>
<p><strong>jQuery的Ajax操作</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">	<span class="attr">url</span>:请求地址,</span><br><span class="line">	<span class="attr">type</span>:<span class="string">&quot;get|put|post|delete&quot;</span>(默认是get),</span><br><span class="line">	<span class="attr">data</span>:请求参数(<span class="attr">key</span>:<span class="string">&quot;value&quot;</span>),</span><br><span class="line">	<span class="attr">dataType</span>:请求数据类型<span class="string">&quot;html|text|json|xml|script|jsonp&quot;</span>,</span><br><span class="line">	<span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">data,dataTextStatus,jqxhr</span>)&#123;&#125;,	<span class="comment">//请求成功的回调函数</span></span><br><span class="line">	<span class="attr">error</span>:<span class="keyword">function</span>(<span class="params">jqxhr,textStatus,error</span>)&#123;&#125;		<span class="comment">//请求失败的回调函数</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//简单的写法(以Post方式为例)</span></span><br><span class="line">$.<span class="title function_">post</span>(<span class="string">&quot;url&quot;</span>,&#123;请求参数&#125;,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="comment">//回调函数</span></span><br><span class="line">&#125;,<span class="string">&quot;JSON&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h3 id="六、Session和Cookie"><a href="#六、Session和Cookie" class="headerlink" title="六、Session和Cookie"></a>六、Session和Cookie</h3><h3 id="七、SQL-Server"><a href="#七、SQL-Server" class="headerlink" title="七、SQL Server"></a>七、SQL Server</h3><p>开发环境：</p>
<p>web.xml：web的核心配置文件，servlet、filter、listener资源都会在这里进行配置</p>
<p>部署环境：jdk1.8+tomcat7.0+structs2.1</p>
]]></content>
      <categories>
        <category>项目开发</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLServer内存占用</title>
    <url>/2022/02/SQLServer%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8/</url>
    <content><![CDATA[<p>SQL Server对服务器内存的使用策略是用多少内存就占用多少内存，只用在服务器内存不足时，才会释放一点占用的内存，所以SQL Server 服务器内存往往会占用很高。</p>
<p>查看使用内存</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> counter_name, </span><br><span class="line">ltrim(cntr_value<span class="operator">*</span><span class="number">1.0</span><span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span>)<span class="operator">+</span><span class="string">&#x27;G&#x27;</span> <span class="keyword">as</span> memoryGB </span><br><span class="line"><span class="keyword">from</span> master.sys.dm_os_performance_counters  </span><br><span class="line"><span class="keyword">where</span> counter_name <span class="keyword">like</span> <span class="string">&#x27;%target%server%memory%&#x27;</span><span class="keyword">or</span> counter_name <span class="keyword">like</span> <span class="string">&#x27;%total%memory%&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>这些内存一般都是SQL Server运行时候用作缓存的：</p>
<ol>
<li>数据缓存：执行个查询语句，SQL Server会将相关的数据页（SQL Server操作的数据都是以页为单位的）加载到内存中来， 下一次如果再次请求此页的数据的时候，就无需读取磁盘了，大大提高了速度。</li>
<li>执行命令缓存：在执行存储过程，自定函数时，SQL Server需要先二进制编译再运行，编译后的结果也会缓存起来， 再次调用时就无需再次编译。</li>
</ol>
<p>调用以下几个DBCC管理命令来清理这些缓存：</p>
<p>DBCC FREEPROCCACHE 清除存储过程相关的缓存<br>DBCC FREESESSIONCACHE 会话缓存<br>DBCC FREESYSTEMCACHE(‘All’) 系统缓存<br>DBCC DROPCLEANBUFFERS 所有缓存</p>
<p>但是，这几个命令虽然会清除掉现有缓存，为新的缓存腾地方，但是SQL Server并不会因此释放掉已经占用的内存。Sql Server并没有提供任何命令允许我们释放不用到的内存。因此我们只能通过动态调整SQL Server可用的物理内存设置来强迫它释放内存。</p>
<p>解决SQL Server占用内存过高的具体步骤：</p>
<p>1、清除所有缓存<br>DBCC DROPCLEANBUFFERS</p>
<p>2、调整可使用物理内存</p>
<hr>
<p>论坛方法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DBCC FREEPROCCACHE</span><br><span class="line">DBCC FREESESSIONCACHE</span><br><span class="line">DBCC FREESYSTEMCACHE(<span class="string">&#x27;All&#x27;</span>)</span><br><span class="line">DBCC DROPCLEANBUFFERS</span><br><span class="line">USE master</span><br><span class="line">go</span><br><span class="line"><span class="keyword">EXEC</span> sp_configure <span class="string">&#x27;show advanced options&#x27;</span>, <span class="number">1</span> </span><br><span class="line">go</span><br><span class="line">RECONFIGURE <span class="keyword">WITH</span> OVERRIDE</span><br><span class="line"><span class="comment">-- 先设置物理内存上限到1G  </span></span><br><span class="line"><span class="keyword">EXEC</span> sp_configure <span class="string">&#x27;max server memory (MB)&#x27;</span>, <span class="number">1024</span></span><br><span class="line">RECONFIGURE <span class="keyword">WITH</span> OVERRIDE</span><br><span class="line"><span class="comment">-- 还原原先的上限 </span></span><br><span class="line"><span class="keyword">EXEC</span> sp_configure <span class="string">&#x27;max server memory (MB)&#x27;</span>, <span class="number">5120</span></span><br><span class="line">RECONFIGURE <span class="keyword">WITH</span> OVERRIDE</span><br><span class="line"><span class="comment">-- 恢复默认配置 </span></span><br><span class="line"><span class="keyword">EXEC</span> sp_configure <span class="string">&#x27;show advanced options&#x27;</span>, <span class="number">0</span></span><br><span class="line">RECONFIGURE <span class="keyword">WITH</span> OVERRIDE</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>项目开发</category>
      </categories>
      <tags>
        <tag>SQL Server</tag>
      </tags>
  </entry>
  <entry>
    <title>tomcat相关问题</title>
    <url>/2021/06/Tomcat%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="1-服务端口被占用"><a href="#1-服务端口被占用" class="headerlink" title="1.服务端口被占用"></a>1.服务端口被占用</h3><p>使用tomcat运行server时，提示 8005 端口被占用，但在控制台 netstat 查不到哪个程序占用了该端口。</p>
<p>通过</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netsh winsock reset </span><br></pre></td></tr></table></figure>

<p>重启电脑后，可以运行。</p>
<h3 id="2-无法启动组件"><a href="#2-无法启动组件" class="headerlink" title="2.无法启动组件"></a>2.无法启动组件</h3><p><font color=red>错误日志：</font>无法启动组件 [org.apache.catalina.webresources.StandardRoot@5c39da9e …</p>
<p>eclipse 运行服务器程序时报以上错误，但任务在之前可以正常运行，所以与配置有关。</p>
<p>检查配置，发现 servers中配置了多个服务器工程，需要 remove 掉不运行的工程，然后 start。</p>
]]></content>
      <categories>
        <category>项目开发</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt-OpenCV人脸识别</title>
    <url>/2022/05/Qt-OpenCV%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/</url>
    <content><![CDATA[<p>本文记录安装openCV以及在Qt上创建桌面程序进行人脸识别的全过程。</p>
<blockquote>
<p>安装OpenCV参考自博客：</p>
<p>Qt配置OpenCV教程，亲测已试过（详细版）：<a href="https://blog.csdn.net/weixin_43763292/article/details/112975207">https://blog.csdn.net/weixin_43763292/article/details/112975207</a></p>
<p>Qt人脸识别程序参考自博客：</p>
<p>基于Qt的OpenCV人脸识别：<a href="https://blog.csdn.net/huhuandk/category_8468159.html">https://blog.csdn.net/huhuandk/category_8468159.html</a></p>
</blockquote>
<h3 id="一、安装环境"><a href="#一、安装环境" class="headerlink" title="一、安装环境"></a>一、安装环境</h3><ul>
<li><p>OS：Windows10</p>
</li>
<li><p>Qt版本：5.15.2</p>
</li>
<li><p>CMake版本：3.20.2</p>
</li>
<li><p>OpenCV</p>
<p>版本：起初选择的版本是4.5.5，安装完后发现程序运行有问题，后来换成了3.4.16版本。</p>
<p>说明：<em>安装版本4.5.5，运行Qt程序总是崩溃，下意识怀疑是该版本与Qt版本不匹配。但实际是不是版本问题尚不确定，因为是第一次安装和在Qt上使用OpenCV，可能存在误判。后续需要重新测试一下4.5.5版本。</em></p>
</li>
<li><p>OpenCV-contrib</p>
<p>与OpenCV版本一致（3.4.16），这是从OpenCV分离出来的未稳定的功能模块，人脸识别需要的face库就在该文件下。到github上选择相应的tag下载。</p>
</li>
</ul>
<h3 id="二、安装前配置"><a href="#二、安装前配置" class="headerlink" title="二、安装前配置"></a>二、安装前配置</h3><p>添加三个路径到系统PATH：</p>
<ol>
<li><p>Qt库的MinGw路径：<code>Qt/5.15.2/mingw81_64/bin</code></p>
</li>
<li><p>Qt的MinGw工具路径：<code>Qt/Tools/mingw810_64/bin</code></p>
</li>
<li><p>CMake路径：<code>CMake/bin</code></p>
</li>
</ol>
<p>配置完后需要重启电脑。</p>
<h3 id="三、下载"><a href="#三、下载" class="headerlink" title="三、下载"></a>三、下载</h3><p>OpenCV和OpenCV-contrib，这两个都可以在github上下载</p>
<ul>
<li><p>OpenCV：<a href="https://github.com/opencv/opencv/releases">https://github.com/opencv/opencv/releases</a></p>
</li>
<li><p>OpenCV-contrib：<a href="https://github.com/opencv/opencv_contrib/tags">https://github.com/opencv/opencv_contrib/tags</a></p>
</li>
</ul>
<h3 id="四、安装"><a href="#四、安装" class="headerlink" title="四、安装"></a>四、安装</h3><ol>
<li><p>将OpenCV文件解压至将要安装的目录下：<code>D:/Tools/opencv/opencv-3.4.16</code></p>
</li>
<li><p>将OpenCV-contrib放到OpenCV的解压目录下，与sources同级：<code>D:/Tools/opencv/opencv-3.4.16/opencv-contrib-3.4.16</code></p>
</li>
<li><p>前往CMake目录下运行cmake-gui.exe，</p>
<ol>
<li><p>配置source code目录为sources路径：<code>D:/Tools/opencv/opencv-3.4.16/sources</code></p>
</li>
<li><p>配置build目录为与sources同级的新建目录opencv-build：<code>D:/Tools/opencv/opencv-3.4.16/opencv-build</code></p>
</li>
<li><p>勾选Advanced</p>
</li>
<li><p>点击Configure</p>
<ol>
<li><p>选择<code>MinGw Makefiles</code>，<code>Specify native compilers</code></p>
</li>
<li><p>选择Compilers，</p>
<ul>
<li><p>C：<code>Qt/Tools/mingw810_64/bin/gcc.exe</code></p>
</li>
<li><p>C++：<code>Qt/Tools/mingw810_64/bin/g++.exe</code></p>
</li>
</ul>
</li>
<li><p>Finish</p>
</li>
</ol>
</li>
<li><p>Configuring done后，在opencv配置参数中选中<strong>WITH_OPENGL</strong>和<strong>WITH_QT</strong>，搜索<strong>OPENCV_EXTRA_MODULES_PATH</strong>，填入opencv-contrib目录下的modules路径：<code>D:/Tools/opencv/opencv-3.4.16/opencv_contrib-3.4.16/modules</code></p>
</li>
<li><p>点击Configure，done之后，opencv配置参数中有红色条框，确认路径无误后，再次点击Configure</p>
</li>
<li><p>红色消失，Generate，生成完成</p>
</li>
</ol>
</li>
<li><p>进入opencv-build目录下，生成安装文件：<code>mingw32-make -j 12</code></p>
</li>
<li><p>100%完成后，安装：<code>mingw32-make install</code>，完成</p>
</li>
</ol>
<h3 id="五、将OpenCV加入PATH"><a href="#五、将OpenCV加入PATH" class="headerlink" title="五、将OpenCV加入PATH"></a>五、将OpenCV加入PATH</h3><p>添加动态链接库：<code>D:/Tools/opencv/opencv-3.4.16/opencv-build/install/x64/mingw/bin</code></p>
<h3 id="六、Qt人脸识别程序"><a href="#六、Qt人脸识别程序" class="headerlink" title="六、Qt人脸识别程序"></a>六、Qt人脸识别程序</h3><ol>
<li><p>新建Qt的MainWindow工程opencv-test，选择生成器qmake，编译工具Qt MinGw 64-bit</p>
</li>
<li><p>设计ui，一个用于显示摄像头拍摄的QLabel，三个QPushButton分别是开启摄像头，关闭摄像头，拍照</p>
</li>
<li><p>在opencv-test.pro文件中添加头文件搜索路径（INCLUDEPATH）和链接库（LIBS），opencv-test.pro文件如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">QT</span>       <span class="string">+= core gui</span></span><br><span class="line"></span><br><span class="line"><span class="attr">greaterThan(QT_MAJOR_VERSION,</span> <span class="string">4): QT += widgets</span></span><br><span class="line"></span><br><span class="line"><span class="attr">CONFIG</span> <span class="string">+= c++11</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># You can make your code fail to compile if it uses deprecated APIs.</span></span><br><span class="line"><span class="comment"># In order to do so, uncomment the following line.</span></span><br><span class="line"><span class="comment">#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">SOURCES</span> <span class="string">+= \</span></span><br><span class="line"><span class="string">    main.cpp \</span></span><br><span class="line"><span class="string">    mainwindow.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="attr">HEADERS</span> <span class="string">+= \</span></span><br><span class="line"><span class="string">    mainwindow.h</span></span><br><span class="line"></span><br><span class="line"><span class="attr">FORMS</span> <span class="string">+= \</span></span><br><span class="line"><span class="string">    mainwindow.ui</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#添加这两条</span></span><br><span class="line"><span class="attr">INCLUDEPATH</span> <span class="string">+= D:\Tools\opencv\opencv-3.4.16\opencv-build\install\include</span></span><br><span class="line"><span class="attr">LIBS</span> <span class="string">+= D:\Tools\opencv\opencv-3.4.16\opencv-build\lib\libopencv_*.a</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Default rules for deployment.</span></span><br><span class="line"><span class="attr">qnx</span>: <span class="string">target.path = /tmp/$$&#123;TARGET&#125;/bin</span></span><br><span class="line"><span class="attr">else</span>: <span class="string">unix:!android: target.path = /opt/$$&#123;TARGET&#125;/bin</span></span><br><span class="line"><span class="comment">!isEmpty(target.path): INSTALLS += target</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>头文件mainwindow.h</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MAINWINDOW_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAINWINDOW_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMainWindow&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/imgproc/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/objdetect.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/face.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv::face;</span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"><span class="keyword">namespace</span> Ui &#123; <span class="keyword">class</span> <span class="title class_">MainWindow</span>; &#125;</span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span> : <span class="keyword">public</span> QMainWindow</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MainWindow</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    ~<span class="built_in">MainWindow</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_openBtn_clicked</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_captureBtn_clicked</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_closeBtn_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::MainWindow *ui;</span><br><span class="line">    VideoCapture capture;</span><br><span class="line">    Mat frame;</span><br><span class="line">    QImage image;</span><br><span class="line">    CascadeClassifier faceDetector;</span><br><span class="line">    CV_OUT std::vector&lt;Rect&gt; faces;</span><br><span class="line">    Ptr&lt;BasicFaceRecognizer&gt;model;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">closeEvent</span><span class="params">(QCloseEvent *event)</span></span>;</span><br><span class="line">    <span class="function">QImage <span class="title">Mat2QImage</span><span class="params">(Mat cvImg)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Sleep</span><span class="params">(<span class="type">int</span> msec)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// MAINWINDOW_H</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>源文件mainwindow.cpp</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QTime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QTimer&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Delay_MSec</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> msec)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QEventLoop loop;<span class="comment">//定义一个新的事件循环</span></span><br><span class="line">    QTimer::<span class="built_in">singleShot</span>(msec, &amp;loop, <span class="built_in">SLOT</span>(<span class="built_in">quit</span>()));<span class="comment">//创建单次定时器，槽函数为事件循环的退出函数</span></span><br><span class="line">    loop.<span class="built_in">exec</span>();<span class="comment">//事件循环开始执行，程序会卡在这里，直到定时时间到，本循环被退出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">//加载人脸检测模型</span></span><br><span class="line">    <span class="keyword">if</span>(!faceDetector.<span class="built_in">load</span>(<span class="string">&quot;D:\\Tools\\opencv\\opencv-3.4.16\\opencv-build\\install\\etc\\haarcascades\\haarcascade_frontalface_alt.xml&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;--(!)Error loading&quot;</span>;</span><br><span class="line">        QApplication::<span class="built_in">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    model =EigenFaceRecognizer::<span class="built_in">create</span>();</span><br><span class="line">    vector&lt;Mat&gt;images;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;labels;</span><br><span class="line">    Mat mat;</span><br><span class="line">    <span class="comment">/**不直接读成灰度图，而是多经过一步转换，是因为在train时会报错：</span></span><br><span class="line"><span class="comment">    OpenCV: terminate handler is called! The last OpenCV error is:</span></span><br><span class="line"><span class="comment">OpenCV(3.4.16) Error: Image step is wrong (The matrix is not continuous, thus its number of rows can not be changed) in reshape, file D:\Tools\opencv\opencv-3.4.16\sources\modules\core\src\matrix.cpp, line 1115</span></span><br><span class="line"><span class="comment">    从StackOverflow上看到这个问题可能的原因：1、未找到图片，2、图像矩阵不连续，注意图片编码格式，解决方法是多经一步转换</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    mat=<span class="built_in">imread</span>(<span class="string">&quot;myFace/0.png&quot;</span>,<span class="number">1</span>);<span class="comment">//一般样本是提前准本好的，从文件里读取。测试程序就简单点直接从文件夹里读图片。</span></span><br><span class="line">    <span class="built_in">cvtColor</span>(mat,mat,CV_BGR2GRAY);<span class="comment">//多一步转换，解决上述报错</span></span><br><span class="line">    images.<span class="built_in">push_back</span>(mat);</span><br><span class="line"></span><br><span class="line">    mat=<span class="built_in">imread</span>(<span class="string">&quot;myFace/1.png&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cvtColor</span>(mat,mat,CV_BGR2GRAY);</span><br><span class="line">    images.<span class="built_in">push_back</span>(mat);</span><br><span class="line"></span><br><span class="line">    mat=<span class="built_in">imread</span>(<span class="string">&quot;myFace/2.png&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cvtColor</span>(mat,mat,CV_BGR2GRAY);</span><br><span class="line">    images.<span class="built_in">push_back</span>(mat)</span><br><span class="line"></span><br><span class="line">    labels.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">    labels.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">    labels.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    model-&gt;<span class="built_in">train</span>(images,labels);<span class="comment">//训练</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_openBtn_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(capture.<span class="built_in">isOpened</span>())</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    capture.<span class="built_in">open</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(capture.<span class="built_in">isOpened</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(;;)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!capture.<span class="built_in">isOpened</span>())</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            capture &gt;&gt; frame;</span><br><span class="line">            <span class="built_in">flip</span>(frame, frame, <span class="number">1</span>);  <span class="comment">//画面翻转</span></span><br><span class="line">            <span class="keyword">if</span> (!frame.<span class="built_in">empty</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//人脸检测</span></span><br><span class="line">                Mat frame_gray;</span><br><span class="line">                Mat dst;</span><br><span class="line">                Mat testSample;</span><br><span class="line">                <span class="built_in">cvtColor</span>(frame, frame_gray, COLOR_BGR2GRAY);</span><br><span class="line">                <span class="built_in">equalizeHist</span>(frame_gray, frame_gray);</span><br><span class="line">                faceDetector.<span class="built_in">detectMultiScale</span>(frame_gray, faces, <span class="number">1.1</span>, <span class="number">2</span>, <span class="number">0</span> | CASCADE_SCALE_IMAGE, <span class="built_in">Size</span>(<span class="number">30</span>, <span class="number">30</span>));</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; faces.<span class="built_in">size</span>(); i++)</span><br><span class="line">                &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">                    <span class="comment">//只摄像</span></span><br><span class="line">                    <span class="built_in">rectangle</span>(frame, faces[i], <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">1</span>, <span class="number">8</span>, <span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">                    <span class="comment">//人脸识别</span></span><br><span class="line">                    Mat roi = <span class="built_in">frame</span>(faces[i]);</span><br><span class="line">                    <span class="built_in">cvtColor</span>(roi, dst, COLOR_BGR2GRAY);</span><br><span class="line">                    cv::<span class="built_in">resize</span>(dst, testSample, <span class="built_in">Size</span>(<span class="number">92</span>, <span class="number">112</span>));</span><br><span class="line">                    <span class="type">int</span> label = model-&gt;<span class="built_in">predict</span>(testSample);</span><br><span class="line">                    <span class="built_in">rectangle</span>(frame, faces[i], <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>, <span class="number">8</span>, <span class="number">0</span>);</span><br><span class="line">                    <span class="built_in">putText</span>(frame, format(<span class="string">&quot;I&#x27;m %s&quot;</span>, (label == <span class="number">0</span> ? <span class="string">&quot;ly&quot;</span> : <span class="string">&quot;Unknow&quot;</span>)),</span><br><span class="line">                            faces[i].<span class="built_in">tl</span>(), FONT_HERSHEY_PLAIN, <span class="number">1.0</span>, <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>, <span class="number">8</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//显示</span></span><br><span class="line">                image = <span class="built_in">Mat2QImage</span>(frame);</span><br><span class="line">                ui-&gt;label-&gt;<span class="built_in">setPixmap</span>(QPixmap::<span class="built_in">fromImage</span>(image));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//Sleep(10); //延时10ms</span></span><br><span class="line">            <span class="built_in">Delay_MSec</span>(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发现如果不关闭摄像头，直接关闭窗口，则程序不会被杀死，变成僵尸程序在后台运行，因此点击关闭窗口时，先关闭掉摄像头</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::closeEvent</span><span class="params">(QCloseEvent *event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(capture.<span class="built_in">isOpened</span>()) capture.<span class="built_in">release</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//要想在Qt上显示OpenCV的图像，必须将Mat转化为QImage</span></span><br><span class="line"><span class="function">QImage <span class="title">MainWindow::Mat2QImage</span><span class="params">(Mat cvImg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QImage qImg;</span><br><span class="line">    <span class="keyword">if</span>(cvImg.<span class="built_in">channels</span>()==<span class="number">3</span>)                             <span class="comment">//3 channels color image</span></span><br><span class="line">    &#123;</span><br><span class="line">        cv::<span class="built_in">cvtColor</span>(cvImg,cvImg,CV_BGR2RGB);</span><br><span class="line">        qImg =<span class="built_in">QImage</span>((<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>*)(cvImg.data),</span><br><span class="line">                      cvImg.cols, cvImg.rows,</span><br><span class="line">                      cvImg.cols*cvImg.<span class="built_in">channels</span>(),</span><br><span class="line">                      QImage::Format_RGB888);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(cvImg.<span class="built_in">channels</span>()==<span class="number">1</span>)                    <span class="comment">//grayscale image</span></span><br><span class="line">    &#123;</span><br><span class="line">        qImg =<span class="built_in">QImage</span>((<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>*)(cvImg.data),</span><br><span class="line">                      cvImg.cols,cvImg.rows,</span><br><span class="line">                      cvImg.cols*cvImg.<span class="built_in">channels</span>(),</span><br><span class="line">                      QImage::Format_Indexed8);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        qImg =<span class="built_in">QImage</span>((<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>*)(cvImg.data),</span><br><span class="line">                      cvImg.cols,cvImg.rows,</span><br><span class="line">                      cvImg.cols*cvImg.<span class="built_in">channels</span>(),</span><br><span class="line">                      QImage::Format_RGB888);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> qImg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//延时函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::Sleep</span><span class="params">(<span class="type">int</span> msec)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QTime dieTime = QTime::<span class="built_in">currentTime</span>().<span class="built_in">addMSecs</span>(msec);</span><br><span class="line">    <span class="keyword">while</span>( QTime::<span class="built_in">currentTime</span>() &lt; dieTime )</span><br><span class="line">        QCoreApplication::<span class="built_in">processEvents</span>(QEventLoop::AllEvents, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_captureBtn_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    Mat dst;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; faces.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cv::<span class="built_in">resize</span>(<span class="built_in">frame</span>(faces[i]), dst, <span class="built_in">Size</span>(<span class="number">92</span>, <span class="number">112</span>));</span><br><span class="line">        <span class="built_in">cvtColor</span>(dst,dst,COLOR_BGR2RGB);</span><br><span class="line">        <span class="built_in">imwrite</span>(format(<span class="string">&quot;myFace/%d.png&quot;</span>, count), dst);</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_closeBtn_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(capture.<span class="built_in">isOpened</span>()) capture.<span class="built_in">release</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>项目开发</category>
      </categories>
      <tags>
        <tag>Qt</tag>
        <tag>OpenCV</tag>
      </tags>
  </entry>
  <entry>
    <title>web服务崩溃</title>
    <url>/2022/02/web%E6%9C%8D%E5%8A%A1%E5%B4%A9%E6%BA%83/</url>
    <content><![CDATA[<p>服务器web服务总是崩溃无法运行，重启web服务后，经常会启动正常但无法访问。</p>
<p>经过最近测试，发现很大可能是端口占用问题。</p>
<p>处理方式如下：</p>
<ol>
<li>先运行shutdown脚本关闭tomcat服务，然后start。如果服务器恢复正常，则暂时解决，否则继续下面；</li>
<li><code>netstat -ano | findstr &quot;:80&quot;</code>，查看80端口号，即tomcat程序的进程id，假设查到进程id为5788；</li>
<li><code>taskkill /F /pid 5788</code>，杀死进程后，启动tomcat；</li>
</ol>
<hr>
<p>2022-02-16 补充</p>
<p>今日发现Tomcat服务无法应，debug输出</p>
<p><strong>数据库池异常，重新构造数池</strong></p>
<p><strong>事务&lt;进程 ID 6299&gt;与另一个进程被死锁在 锁 | 线程 资源上，并且已被选作死锁牺牲品。请重新运行该事务。</strong></p>
<p>程序发生死锁。</p>
]]></content>
      <categories>
        <category>项目开发</category>
      </categories>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>安装ssl证书</title>
    <url>/2021/08/%E5%AE%89%E8%A3%85SSL%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<h3 id="1-在阿里云-tomcat-服务器上安装-ssl-证书"><a href="#1-在阿里云-tomcat-服务器上安装-ssl-证书" class="headerlink" title="1.在阿里云 tomcat 服务器上安装 ssl 证书"></a>1.在阿里云 tomcat 服务器上安装 ssl 证书</h3><p>首先得有服务器，开通域名，并且搭建好 tomcat 网站。</p>
<p>其次申请 ssl 证书，我申请的是阿里云免费证书，绑定域名，下载证书。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://qzwjer.top/doc/blogImg/img/image-20210730140745634.png" alt="image-20210730140745634"></p>
<p>按照阿里云 SSL 证书安装指南，<a href="https://help.aliyun.com/document_detail/98576.htm?spm=a2c4g.11186623.2.3.6fe960e0JLtFaB#concept-omf-lxn-yfb">在 tomcat 服务器安装 SSL 证书，安装 pfx 格式证书</a>。</p>
<h3 id="2-前提条件"><a href="#2-前提条件" class="headerlink" title="2.前提条件"></a>2.前提条件</h3><ul>
<li>您的Tomcat服务器上已经开启了443端口（HTTPS服务的默认端口）。</li>
<li>已安装OpenSSL工具。</li>
<li>已下载Tomcat服务器所需要的证书文件。有关证书下载的具体操作，请参见<a href="https://help.aliyun.com/document_detail/98737.htm#concept-ixp-4fx-yfb">下载证书</a>。</li>
</ul>
<hr>
<p><em>按照安装指南进行配置，注意把其中的注释去掉。</em></p>
<p>安装 openssl 工具，工具下载网站 <a href="https://slproweb.com/products/Win32OpenSSL.html">Win32&#x2F;Win64 OpenSSL Installer for Windows - Shining Light Productions (slproweb.com)</a></p>
<p>下载安装后，配置系统环境：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">OPENSSL_HOME   =&gt;  [安装目录，默认目录 C:\Program Files\OpenSSL-Win64\bin]</span><br><span class="line"></span><br><span class="line">PATH  添加 [%OPENSSL_HOME%]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在 cmd 命令行工具中输入 <code>openssl version</code> 查看版本信息。</p>
<p><em>可选修改 web.xml，http 跳转到 https，如果不修改，则 http 和 https 可以同时访问。</em></p>
<p>重启 tomcat。</p>
<hr>
<p>tip</p>
<blockquote>
<p>原微信公众号 h5 使用 http 网页，ssl 认证后，安卓系统浏览 https 网页没有问题，苹果系统无法访问。</p>
<p>经检查将网页中所有 http 改为 https 后，恢复正常。</p>
</blockquote>
]]></content>
      <categories>
        <category>项目开发</category>
      </categories>
      <tags>
        <tag>SSL</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>开始C++ADO</title>
    <url>/2021/06/%E5%BC%80%E5%A7%8BC-ADO/</url>
    <content><![CDATA[<p><em>ODBC是个老古董，现抛弃之，改为使用 ADO。</em></p>
<p><strong>在此提醒自己，在要实现任何一个功能之前，应该先充分了解所有实现路径，谨慎选择，以免干了一段时间后才又恍然发现，有更好的方法。</strong></p>
<hr>
<p>ADO 花了一个早上终于连接并执行数据库操作了，当然花这么多时间，和自己对 vs 的文件夹管理不熟悉有关，在不必要的事情上徒徒浪费时间。</p>
<p>长个记性，头文件、源文件最好还是放在生成的筛选器中，然后加入附加包含目录即可，别搞有的没的。</p>
<p>（另外提醒，在手动 update 数据库时，最好做好备份，千万别把 where 条件弄错了）</p>
<p><font color=red>参考：</font></p>
<p><a href="https://blog.csdn.net/asanscape/article/details/6084600">ADO在C++中的使用_阿珊境界-CSDN博客_c++ado</a></p>
<p><font size=12> ADO 连接</font></p>
<h2 id="1-需要包含头文件-icrsint-h，其中有用到的宏"><a href="#1-需要包含头文件-icrsint-h，其中有用到的宏" class="headerlink" title="1.需要包含头文件 icrsint.h，其中有用到的宏"></a>1.需要包含头文件 icrsint.h，其中有用到的宏</h2><p>官方例子（实际自己写可有可无）：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">_COM_SMARTPTR_TYPEDEF(IADORecordBinding, __uuidof(IADORecordBinding));</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CCustomRs</span> : <span class="keyword">public</span> CADORecordBinding &#123;</span><br><span class="line">    <span class="built_in">BEGIN_ADO_BINDING</span>(CCustomRs)</span><br><span class="line">        <span class="built_in">ADO_VARIABLE_LENGTH_ENTRY2</span>(<span class="number">2</span>, adVarChar, m_ch_fname, <span class="built_in">sizeof</span>(m_ch_fname), m_ul_fnameStatus, <span class="literal">false</span>)</span><br><span class="line">        <span class="built_in">ADO_VARIABLE_LENGTH_ENTRY2</span>(<span class="number">4</span>, adVarChar, m_ch_lname, <span class="built_in">sizeof</span>(m_ch_lname), m_ul_lnameStatus, <span class="literal">false</span>)</span><br><span class="line">        <span class="built_in">END_ADO_BINDING</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CHAR m_ch_fname[<span class="number">22</span>];</span><br><span class="line">    CHAR m_ch_lname[<span class="number">32</span>];</span><br><span class="line">    ULONG m_ul_fnameStatus;</span><br><span class="line">    ULONG m_ul_lnameStatus;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">TESTHR</span><span class="params">(HRESULT _hr)</span> </span>&#123; <span class="function"><span class="keyword">if</span> <span class="title">FAILED</span><span class="params">(_hr)</span> _<span class="title">com_issue_error</span><span class="params">(_hr)</span></span>; &#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-引入文件-msado15-dll"><a href="#2-引入文件-msado15-dll" class="headerlink" title="2.引入文件 msado15.dll"></a>2.引入文件 msado15.dll</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;msado15.dll&quot;</span> no_namespace rename(<span class="string">&quot;EOF&quot;</span>, <span class="string">&quot;EndOfFile&quot;</span>)  </span></span><br></pre></td></tr></table></figure>

<p>该文件在目录 <code>C:\Program Files\Common Files\System\ado</code> 下可以找到，最好把它搬到工程目录下使用，不同系统版本可能不同<em>no_namespace</em>是指忽略命名空间，<em>rename</em>则是把<em>ADO</em>中的<em>EOF</em>重命名为<em>adoEOF</em>。命成什么名字无所谓，但注意声明中的名字要和代码中的名字一致。</p>
<h2 id="3-报错：无法打开源文件-msado15-tlh"><a href="#3-报错：无法打开源文件-msado15-tlh" class="headerlink" title="3.报错：无法打开源文件 msado15.tlh"></a>3.报错：无法打开源文件 msado15.tlh</h2><ol>
<li>新生成工程</li>
<li>调整配置管理器，选择 x64 或 x86</li>
</ol>
<h2 id="4-初始化"><a href="#4-初始化" class="headerlink" title="4.初始化"></a>4.初始化</h2><p>初始化：<code>CoInitialize(NULL);</code></p>
<p>卸载：<code>CoUninitialize();</code></p>
<h2 id="5-实例化"><a href="#5-实例化" class="headerlink" title="5.实例化"></a>5.实例化</h2><p>新建 x.udl，双击配置连接数据库，测试成功后，文本形式打开，文本内容正常为 <code>Provider=SQLOLEDB.1;Persist Security Info=False;User ID=xx;Password=xxxxx;Initial Catalog=DB;Data Source=IP</code>，其中 Password是后加的。</p>
<p>两个方法，推荐第 2 种，方法1 我把握不住。测试时，一开始用方法1还好好的，不知道搞了什么，后面就不能正常查询了。</p>
<ol>
<li>方法1</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">_RecordsetPtr <span class="title">pRs</span><span class="params">(<span class="string">&quot;ADODB.Recordset&quot;</span>)</span></span>;</span><br><span class="line">      CCustomRs rs;</span><br><span class="line">      <span class="function">IADORecordBindingPtr <span class="title">picRs</span><span class="params">(pRs)</span></span>;</span><br><span class="line"></span><br><span class="line">      pRs-&gt;<span class="built_in">Open</span>(<span class="string">L&quot;SELECT * FROM [DCWLW].[dbo].[center]&quot;</span>, <span class="string">L&quot;Provider = SQLOLEDB.1; Persist Security Info = False; User ID = xxx; Password = xxxxx; Initial Catalog = DB; Data Source = IP&quot;</span>, adOpenStatic, adLockOptimistic, adCmdText);</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">      <span class="built_in">TESTHR</span>(picRs-&gt;<span class="built_in">BindToRecordset</span>(&amp;rs));</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (!pRs-&gt;EndOfFile) &#123;</span><br><span class="line">          <span class="comment">// Process data in the CCustomRs C++ instance variables.  </span></span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;Name = %s %s\n&quot;</span>,</span><br><span class="line">              (rs.m_ul_fnameStatus == adFldOK ? rs.m_ch_fname : <span class="string">&quot;&lt;Error&gt;&quot;</span>),</span><br><span class="line">              (rs.m_ul_lnameStatus == adFldOK ? rs.m_ch_lname : <span class="string">&quot;&lt;Error&gt;&quot;</span>));</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Move to the next row of the Recordset.   Fields in the new row will   </span></span><br><span class="line">          <span class="comment">// automatically be placed in the CCustomRs C++ instance variables.  </span></span><br><span class="line"></span><br><span class="line">          pRs-&gt;<span class="built_in">MoveNext</span>();</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>方法2</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">_ConnectionPtr <span class="title">pConn</span><span class="params">(__uuidof(Connection))</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function">_RecordsetPtr <span class="title">pRec</span><span class="params">(__uuidof(Recordset))</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function">_CommandPtr <span class="title">pCmd</span><span class="params">(__uuidof(Command))</span></span>;</span><br><span class="line"></span><br><span class="line">   pConn.<span class="built_in">CreateInstance</span>(<span class="string">&quot;ADODB.Connection&quot;</span>);</span><br><span class="line"></span><br><span class="line">   pRec.<span class="built_in">CreateInstance</span>(<span class="string">&quot;ADODB.Recordset&quot;</span>);</span><br><span class="line"></span><br><span class="line">   pCmd.<span class="built_in">CreateInstance</span>(<span class="string">&quot;ADODB.Command&quot;</span>);</span><br><span class="line"></span><br><span class="line">   pConn-&gt;ConnectionString = <span class="string">&quot;Provider=SQLOLEDB.1;Persist Security Info=False;User ID=xx;Password=xxxxx;Initial Catalog=DB;Data Source=IP&quot;</span>;</span><br><span class="line"></span><br><span class="line">   pConn-&gt;<span class="built_in">Open</span>(<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, adConnectUnspecified);</span><br><span class="line"></span><br><span class="line">   <span class="type">const</span> <span class="type">char</span>* strSQL = <span class="string">&quot;SELECT\</span></span><br><span class="line"><span class="string">       [report_5001_id]\</span></span><br><span class="line"><span class="string">       , [report_str]\</span></span><br><span class="line"><span class="string">       , isnull(row_state, &#x27;good&#x27;) as row_state\</span></span><br><span class="line"><span class="string">       , [create_date]\</span></span><br><span class="line"><span class="string">       , [barcode]\</span></span><br><span class="line"><span class="string">       , [states]\</span></span><br><span class="line"><span class="string">       , [dy]\</span></span><br><span class="line"><span class="string">       , [dl]\</span></span><br><span class="line"><span class="string">       , [wdmax]\</span></span><br><span class="line"><span class="string">       , [wdmin]\</span></span><br><span class="line"><span class="string">       , [soc]\</span></span><br><span class="line"><span class="string">       , [err_str]\</span></span><br><span class="line"><span class="string">       , [err_str2]\</span></span><br><span class="line"><span class="string">       , [err_str3]\</span></span><br><span class="line"><span class="string">       , [err_str4]\</span></span><br><span class="line"><span class="string">       FROM[DCWLW].[dbo].[report_5001]\</span></span><br><span class="line"><span class="string">       where cast([dl] as decimal) &gt; 50.0 and create_date &gt; &#x27;2021&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line">   pRec = pConn-&gt;<span class="built_in">Execute</span>(<span class="type">_bstr_t</span>(strSQL), <span class="literal">NULL</span>, adCmdText);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">while</span> (!pRec-&gt;EndOfFile)</span><br><span class="line">   &#123;</span><br><span class="line"></span><br><span class="line">       string str = <span class="built_in">LPSTR</span>(<span class="type">_bstr_t</span>(pRec-&gt;<span class="built_in">GetCollect</span>(<span class="string">&quot;barcode&quot;</span>)));</span><br><span class="line">       cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//((CListBox*)GetDlgItem(IDC_LIST1))-&gt;AddString(str);</span></span><br><span class="line">       pRec-&gt;<span class="built_in">MoveNext</span>();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   pRec-&gt;<span class="built_in">Close</span>();</span><br><span class="line"></span><br><span class="line">   pConn-&gt;<span class="built_in">Close</span>();</span><br><span class="line"></span><br><span class="line">   pRec.<span class="built_in">Release</span>();</span><br><span class="line"></span><br><span class="line">   pCmd.<span class="built_in">Release</span>();</span><br><span class="line"></span><br><span class="line">   pConn.<span class="built_in">Release</span>();</span><br></pre></td></tr></table></figure>





<h2 id="6-错误捕获"><a href="#6-错误捕获" class="headerlink" title="6.错误捕获"></a>6.错误捕获</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;<span class="built_in">catch</span> (_com_error&amp; e) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error:\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Code = %08lx\n&quot;</span>, e.<span class="built_in">Error</span>());</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Meaning = %s\n&quot;</span>, e.<span class="built_in">ErrorMessage</span>());</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Source = %s\n&quot;</span>, (LPCSTR)e.<span class="built_in">Source</span>());</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Description = %s\n&quot;</span>, (LPCSTR)e.<span class="built_in">Description</span>());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>项目开发</category>
      </categories>
      <tags>
        <tag>连接数据库</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序开发小结</title>
    <url>/2021/05/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<h2 id="1-看官方文档时，注意看底部的-Bug-amp-Tips。"><a href="#1-看官方文档时，注意看底部的-Bug-amp-Tips。" class="headerlink" title="1.看官方文档时，注意看底部的 Bug &amp; Tips。"></a>1.看官方文档时，注意看底部的 Bug &amp; Tips。</h2><h3 id="1-data"><a href="#1-data" class="headerlink" title="1.data"></a>1.data</h3><p>data 是页面第一次渲染使用的初始数据。</p>
<p>页面加载时，data 将会以 JSON 字符串的形式由逻辑层传至渲染层，因此 data 中的数据必须是可以转成 JSON 的类型：字符串，数字，布尔值，对象，数组。</p>
<p>渲染层可以通过 WXML 对数据进行绑定。</p>
<h3 id="2-component"><a href="#2-component" class="headerlink" title="2.component"></a>2.component</h3><ul>
<li>使用 this.data 可以获取内部数据和属性值；但直接修改它不会将变更应用到界面上，应使用 setData 修改。</li>
<li>生命周期函数无法在组件方法中通过 this 访问到。</li>
<li>属性名应避免以 data 开头，即不要命名成 dataXyz 这样的形式，因为在 WXML 中， data-xyz&#x3D;”” 会被作为节点 dataset 来处理，而不是组件属性。</li>
<li>在一个组件的定义和使用时，组件的属性名和 data 字段相互间都不能冲突（尽管它们位于不同的定义段中）</li>
<li>从基础库 2.0.9 开始，对象类型的属性和 data 字段中可以包含函数类型的子字段，即可以通过对象类型的属性字段来传递函数。低于这一版本的基础库不支持这一特性。</li>
</ul>
<h3 id="3-page"><a href="#3-page" class="headerlink" title="3.page"></a>3.page</h3><ul>
<li>onPullDownRefresh()<br>  监听用户下拉刷新事件<ul>
<li>需要在 app.json 的 window 选项中或页面配置中开启 enablePullDownRefresh。</li>
<li>可以通过 wx.startPullDownRefresh 触发下拉刷新，调用后触发下拉刷新动画，效果与用户手动下拉刷新一致。</li>
<li>当处理完数据刷新后，wx.stopPullDownRefresh 可以停止当前页面的下拉刷新。</li>
</ul>
</li>
<li>onReachBottom()<br>  监听用户上拉触底事件<ul>
<li>可以在 app.json 的 window 选项中或页面配置中设置触发距离 onReachBottomDistance。</li>
<li>在触发距离内滑动期间，本事件只会被触发一次。</li>
</ul>
</li>
<li>页面间通信<br>  如果一个页面由另一个页面通过 wx.navigateTo 打开，这两个页面间将建立一条数据通道：<ul>
<li>被打开的页面可以通过 this.getOpenerEventChannel() 方法来获得一个 EventChannel 对象；</li>
<li>wx.navigateTo 的 success 回调中也包含一个 EventChannel 对象。</li>
<li>这两个 EventChannel 对象间可以使用 emit 和 on 方法相互发送、监听事件。</li>
</ul>
</li>
</ul>
<h2 id="2-弯路"><a href="#2-弯路" class="headerlink" title="2.弯路"></a>2.弯路</h2><ol>
<li>底部导航栏<ul>
<li>开始即看到官方文档给的程序，自定义 tabBar 组件，新增文件夹 custom-tab-bar，app.json 配置 <code>&quot;custom&quot;: true</code>，导航页面使用 component 而不是 page。测试过程中发现点击底部导航会发生闪烁现象，跳转不流畅。并且使用 component 则一些page 的功能将无法使用，例如上拉、下拉刷新。后来发现其实直接使用原生 tabbar 没有上述问题。</li>
</ul>
</li>
</ol>
<h2 id="3-遇到错误和警告"><a href="#3-遇到错误和警告" class="headerlink" title="3.遇到错误和警告"></a>3.遇到错误和警告</h2><ol>
<li><p>marker 警告：<font color=red>width and heigth of marker id 0 are required</font></p>
<ul>
<li>marker 属性增加 width 和 height。</li>
</ul>
</li>
<li><p>this 错误：<font color=red>TypeError: Cannot read property ‘setData’ of undefined</font></p>
<ul>
<li>在生命周期函数中调用 API，在 API 中使用到 this时，需要在调用 API 前用其它变量替换 this，例如 <code>var that=this</code>。</li>
</ul>
</li>
<li><p>对象属性单独在 this.setData 中更新</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line">	<span class="attr">bat</span>:&#123;</span><br><span class="line">		<span class="attr">code</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">		<span class="attr">state</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">		<span class="attr">vol</span>: <span class="number">0</span>,</span><br><span class="line">		<span class="attr">curr</span>: <span class="number">0</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">inputCode</span>: <span class="string">&quot;abc&quot;</span>,</span><br><span class="line">    <span class="attr">inputBat</span>:&#123;</span><br><span class="line">        <span class="attr">code</span>: <span class="string">&quot;aaa&quot;</span>,</span><br><span class="line">        <span class="attr">state</span>: <span class="string">&quot;x&quot;</span>,</span><br><span class="line">        <span class="attr">vol</span>: <span class="number">65</span>,</span><br><span class="line">        <span class="attr">curr</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">a</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//如更新 bat 中的所有属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">bat</span>: inputBat</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//如单独更新 code 属性</span></span><br><span class="line">    <span class="keyword">var</span> batCode=<span class="string">&#x27;bat.code&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        [batCode]: <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">inputCode</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>项目开发</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>换电开发小结</title>
    <url>/2021/04/%E6%8D%A2%E7%94%B5%E5%BC%80%E5%8F%91%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<h2 id="1-方面"><a href="#1-方面" class="headerlink" title="1.方面"></a>1.方面</h2><ul>
<li><p>模块：</p>
<ul>
<li><p>2G 通信：A9G 模块</p>
</li>
<li><p>4G 通信：移远 EC20，合宙 Air724UG</p>
</li>
<li><p>主控：勘智 K210，stm32F103C8T6，stm32F413RCT7（后期）</p>
</li>
<li><p>采集：SH367309，GPS 模块</p>
</li>
</ul>
</li>
<li><p>外设：</p>
<ul>
<li><p>通信：UART，CAN，RS485，SPI，IIC</p>
</li>
<li><p>传感器：温度传感器，重力传感器</p>
</li>
<li><p>显示：串口屏，SPI 屏</p>
</li>
<li><p>声音：喇叭</p>
</li>
</ul>
</li>
<li><p>协议：</p>
<ul>
<li>换电柜通讯协议</li>
<li>CAN 通讯协议</li>
<li>换电网络通讯协议</li>
</ul>
</li>
</ul>
<hr>
<h2 id="2-历程"><a href="#2-历程" class="headerlink" title="2.历程"></a>2.历程</h2><ul>
<li><p>2019~2020：前期研发</p>
<ul>
<li>3月~6月：换电柜整体设计，主板硬件设计，控制逻辑，初版定型，软件研发；</li>
<li>6月~9月：BMS 协议制定，协议测试，换电柜协议制定，平台设计与开发；</li>
<li>9月~12月：协议修订测试，OTA 测试，BMS 测试。</li>
</ul>
</li>
<li><p>2020~2021：产品迭代</p>
<ul>
<li>1月~3月：座式充电器设计开发，BMS 软件重新开发，BMS 板硬件重新设计（人员变更）；</li>
<li>3月~6月：功能设计，业务规划，服务器端软件研发，微信端软件开发，测试，产品发布会；</li>
<li>6月~9月：工厂生产，产品装配，功能测试；</li>
<li>9月~12月：落地银川、运城，解决市场端问题，业务调整，软硬件更新。</li>
</ul>
</li>
<li><p>2021~至今：产品迭代</p>
<ul>
<li>1月~3月：市场端问题修复，新版本软硬件设计，寻求融资。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="3-图画"><a href="#3-图画" class="headerlink" title="3.图画"></a>3.图画</h2><p><img src= "/img/loading.gif" data-lazy-src="https://i.loli.net/2021/04/06/RhuqYQNneLsDKkt.png" alt="项目图.png"></p>
<hr>
<h2 id="4-程序"><a href="#4-程序" class="headerlink" title="4.程序"></a>4.程序</h2><blockquote>
<p><strong>开发感想：</strong></p>
<blockquote>
<p>没有费脑的算法，或者特别难理解的协议或驱动实现；<br>麻烦的地方在于业务和逻辑的实现，比较绕人，需要清晰的业务设计和流程梳理；<br>其中最关键的在于前期设计，是否完善、合理，以及可扩展性。<br>明白自己在做什么很重要。</p>
</blockquote>
</blockquote>
<blockquote>
<p><strong>个人成长：</strong></p>
<blockquote>
<p>嵌入式开发 GET!<br>代码能力得到锻炼，但还需加强。<br>从前到后。</p>
</blockquote>
</blockquote>
<h3 id="1-bootloader"><a href="#1-bootloader" class="headerlink" title="1.bootloader"></a>1.bootloader</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> FLASH_SECTOR_NUM    	 (64)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FLASH_SECTOR_SIZE   	 (1024)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//loader 起始地址  //loader 大小 4k</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FLASH_LOADER_BASE      ((uint32_t)0x8000000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FLASH_LOADER_SIZE      (5 * FLASH_SECTOR_SIZE)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//app 起始地址  //app 大小25K</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FLASH_APP_BASE         (FLASH_LOADER_BASE+FLASH_LOADER_SIZE)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FLASH_APP_SIZE         (25 * FLASH_SECTOR_SIZE)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//地址跳转</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span> <span class="params">(*funcptr)</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//funcptr是一个类型转换符，转型为“指向返回值为void的函数的指针”</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> APPADDR (*(uint32_t*))(FLASH_APP_BASE + 4)     <span class="comment">//用户代码区第二个字为程序开始地址(复位地址) </span></span></span><br><span class="line"><span class="comment">//flash从地址0开始是一个4字节的向量表，0x04存放复位程序的地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用typedef</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">jumpApp</span><span class="params">()</span>&#123;</span><br><span class="line">    (*(funcptr)APPADDR)();	</span><br><span class="line">    <span class="comment">//根据《C陷阱与缺陷》：fp() 是 (*fp)() 的简写</span></span><br><span class="line">    <span class="comment">//以上语句可以简写为</span></span><br><span class="line">    <span class="comment">//((funcptr)APPADDR)();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不使用typedef</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">jumpApp2</span><span class="params">()</span>&#123;</span><br><span class="line">    (*(<span class="type">void</span>(*)())APPADDR)();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">funcptr jump;</span><br><span class="line"><span class="type">void</span> <span class="title function_">jumpApp3</span><span class="params">()</span>&#123;</span><br><span class="line">    jump = (funcptr)APPADDR;</span><br><span class="line">    jump();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-application"><a href="#2-application" class="headerlink" title="2.application"></a>2.application</h3><blockquote>
<p><strong>校验</strong></p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//累加和</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">m_crc8</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *p, <span class="type">uint16_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> crc = <span class="number">0</span>;</span><br><span class="line">    <span class="type">uint16_t</span> i  = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        crc += p[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> crc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//crc校验</span></span><br><span class="line"><span class="type">int16_t</span> <span class="title function_">factory_crc16</span> <span class="params">( <span class="type">uint8_t</span> *bufData, <span class="type">uint16_t</span> buflen)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint16_t</span> TCPCRC = <span class="number">0xffff</span>;</span><br><span class="line">    <span class="type">uint16_t</span> POLYNOMIAL = <span class="number">0xa001</span>;</span><br><span class="line">    <span class="type">uint8_t</span> i, j;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; buflen; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        TCPCRC ^= bufData[i];</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((TCPCRC &amp; <span class="number">0x0001</span>) != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                TCPCRC &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">                TCPCRC ^= POLYNOMIAL;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                TCPCRC &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TCPCRC;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>OTA 升级</strong></p>
</blockquote>
<ul>
<li><p>4G 模块从服务器下载升级固件：curl 下载，curl 相关资料：</p>
<ul>
<li><a href="https://everything.curl.dev/libcurl">everything curl</a></li>
<li><a href="https://github.com/curl/curl">curl</a></li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//create an &quot;easy handle&quot;, which is the handle to a transfer</span></span><br><span class="line">CURL *easy_handle = curl_easy_init();</span><br><span class="line"><span class="comment">//then set options in that handle to control the upcomming transfer</span></span><br><span class="line">CURLcode res = curl_easy_setopt(easy_handle, CURLOPT_URL, <span class="string">&quot;http://example.com/&quot;</span>);</span><br><span class="line"><span class="comment">//if curl_easy_setopt() returns CURL_OK, it stored the option fine</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------Drive transfers</span></span><br><span class="line"><span class="comment">//1. drive with easy</span></span><br><span class="line">res = curl_easy_perform(easy_handle);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. drive with multi</span></span><br><span class="line">CURLM *multi_handle = curl_multi_init();</span><br><span class="line"><span class="comment">//add an easy handle to the multi handle </span></span><br><span class="line">curl_multi_add_handle(multi_handle, easy_handle);</span><br><span class="line"><span class="comment">//remove one</span></span><br><span class="line">curl_multi_remove_handle(multi_handle, easy_handle);</span><br><span class="line"></span><br><span class="line"><span class="comment">//a. do the transfer loop with curl_multi_wait()</span></span><br><span class="line"><span class="type">int</span> transfers_running;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">	<span class="comment">//1000 ms:longest time</span></span><br><span class="line">	curl_multi_wait(multi_handle, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">1000</span>, <span class="literal">NULL</span>);</span><br><span class="line">	curl_multi_perform(multi_handle, &amp;transfers_running);</span><br><span class="line">&#125;<span class="keyword">while</span>(transfers_running);</span><br><span class="line"></span><br><span class="line"><span class="comment">//b. do the transfer loop with select()</span></span><br><span class="line"><span class="type">int</span> transfers_running;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">	fd_set fdread;</span><br><span class="line">	fd_set fdwrite; <span class="comment">//只接收的话不用定义，select参数设为NULL</span></span><br><span class="line">	fd_set fdexcep; <span class="comment">//同上</span></span><br><span class="line">	<span class="type">int</span> maxfd = <span class="number">-1</span>;</span><br><span class="line">	<span class="type">long</span> timeout;</span><br><span class="line">	<span class="comment">// extract timeout value</span></span><br><span class="line">	curl_multi_timeout(multi_handle, &amp;timeout);</span><br><span class="line">	<span class="keyword">if</span>(timeout &lt; <span class="number">0</span>) timeout = <span class="number">1000</span>;</span><br><span class="line">	<span class="comment">//convert to struct usable by select</span></span><br><span class="line">	timeout.tv_sec = timeout / <span class="number">1000</span>;</span><br><span class="line">	timeout.tv_usec = (timeout % <span class="number">1000</span>) * <span class="number">1000</span>;</span><br><span class="line">	</span><br><span class="line">	FD_ZERO(&amp;fdread);</span><br><span class="line">	FD_ZERO(&amp;fdwrite);</span><br><span class="line">	FD_ZERO(&amp;fdexcep);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//get file description from the transfer</span></span><br><span class="line">	mc = curl_multi_fdset(multi_handle, &amp;fdread, &amp;fdwrite, &amp;fdexcep, &amp;maxfd);</span><br><span class="line">	<span class="keyword">if</span>(maxfd == <span class="number">-1</span>) SHORT_SLEEP;</span><br><span class="line">	<span class="keyword">else</span> select(maxfd+<span class="number">1</span>, &amp;fdread, &amp;fdwrite, &amp;fdexcep, &amp;timeout);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//timeout or readable/writable sockets</span></span><br><span class="line">	curl_multi_perform(multi_handle, &amp;transfers_running);</span><br><span class="line">&#125;<span class="keyword">while</span>(transfers_running);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. drive with multi_socket</span></span><br><span class="line"><span class="comment">//socket_callback</span></span><br><span class="line"><span class="comment">//libcurl informs the application about socket activity to wait for with a callback called //CURLMOPT_SOCKETFUNCTION.</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">socket_callback</span><span class="params">(CURL *easy,</span></span><br><span class="line"><span class="params">                    <span class="type">curl_socket_t</span> s,	<span class="comment">//socket</span></span></span><br><span class="line"><span class="params">                    <span class="type">int</span> what, 			<span class="comment">//what to wait for</span></span></span><br><span class="line"><span class="params">                    <span class="type">void</span> *userp,		<span class="comment">//private callback pointer</span></span></span><br><span class="line"><span class="params">                    <span class="type">void</span> *socketp)</span>		<span class="comment">//private socket pointer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//told about the socket &#x27;s&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//set the callback in the multi handle</span></span><br><span class="line">curl_multi_setopt(multi_handle, CURLMOPT_SOCKETFUNCTION, socket_callback);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> running_handles;</span><br><span class="line">ret = curl_multi_socket_action(multi_handle,</span><br><span class="line">                               sockfd,		<span class="comment">//the socket with activity</span></span><br><span class="line">                               ev_bitmask, 	<span class="comment">//the specific activity</span></span><br><span class="line">                               &amp;running_handles);</span><br><span class="line"><span class="comment">//timer_callback</span></span><br><span class="line"><span class="comment">//libcurl sets the timeout with the timer_callback CURLMOPT_TIMERFUNCTION.</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">timer_callback</span><span class="params">(multi_handle,	</span></span><br><span class="line"><span class="params">                   timeout_ms,		<span class="comment">//ms to wait</span></span></span><br><span class="line"><span class="params">                   userp)</span>			<span class="comment">//private callback pointer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//the new time-out value to wait for is in &#x27;timeout-ms&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//set the callback in the multi handle</span></span><br><span class="line">curl_multi_setopt(multi_handle, CURLMOPT_TIMERFUNCTION, timer_callback);</span><br><span class="line"></span><br><span class="line"><span class="comment">//How to start everything</span></span><br><span class="line">curl_multi_socket_action(muti, CURL_SOCKET_TIMEOUT, <span class="number">0</span>, &amp;running);</span><br><span class="line"><span class="comment">//looping</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//exit</span></span><br><span class="line">event_base_dispatch(event_base); <span class="comment">//libevent2 has this API</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------Callbacks</span></span><br><span class="line"><span class="comment">//1. Write data</span></span><br><span class="line">curl_easy_setopt(handle, CURLOPT_WRITEFUNCTION, write_callback);</span><br><span class="line"><span class="comment">//write_callback function prototype</span></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">write_callback</span><span class="params">(<span class="type">char</span> *ptr, <span class="type">size_t</span> size, <span class="type">size_t</span> nmemb, <span class="type">void</span> *userdata)</span>;</span><br><span class="line"><span class="comment">//if this callback is not set, libcurl instead uses &#x27;fwrite&#x27; by default</span></span><br><span class="line"><span class="comment">//2. Read data</span></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure>
<p>在 linux 上测试，只需包含 <code>&quot;curl/curl.h&quot;</code> 头文件即可，链接时加入参数 <code>-lcurl</code>，测试代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;curl/curl.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">process_data</span><span class="params">(<span class="type">void</span> *buffer, <span class="type">size_t</span> size, <span class="type">size_t</span> nmemb, <span class="type">void</span> *user_p)</span></span><br><span class="line">&#123;</span><br><span class="line">	FILE *fp = (FILE *)user_p;</span><br><span class="line">	<span class="type">size_t</span> return_size = fwrite(buffer, size, nmemb, fp);</span><br><span class="line">	<span class="keyword">return</span> return_size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	CURL *curl;</span><br><span class="line">	CURLcode res;</span><br><span class="line"></span><br><span class="line">	curl = curl_easy_init();</span><br><span class="line">	<span class="keyword">if</span>(!curl)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="type">char</span> *url = <span class="string">&quot;liyunlong.xdt-iot.com/download/XDT_BMS/V1.20tobms.bin&quot;</span>;</span><br><span class="line">	curl_easy_setopt(curl, CURLOPT_URL, url);</span><br><span class="line">	curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, &amp;process_data);    </span><br><span class="line">	<span class="comment">/* </span></span><br><span class="line"><span class="comment">	 * &#x27;b&#x27; shows that the file is a binary file.  </span></span><br><span class="line"><span class="comment">	 * Linux ignore this. </span></span><br><span class="line"><span class="comment">	 * Some system treat different between text file and binary file.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	FILE *fp = fopen(<span class="string">&quot;down.bin&quot;</span>, <span class="string">&quot;ab+&quot;</span>);</span><br><span class="line">	curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);</span><br><span class="line">	res = curl_easy_perform(curl);</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">if</span> (CURLE_OK == res) <span class="built_in">printf</span>(<span class="string">&quot;ok!\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;ng!\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">	fclose(fp);</span><br><span class="line">	curl_easy_cleanup(curl);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>读取下载文件<ul>
<li><a href="http://c.biancheng.net/skill/c/file/">C语言文件操作</a></li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> p[<span class="number">1024</span> * <span class="number">50</span>];</span><br><span class="line"><span class="type">long</span> file_size;</span><br><span class="line">FILE *r_file = fopen(<span class="string">&quot;ota.bin&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">fseek(r_file, <span class="number">0L</span>, SEEK_END);		<span class="comment">//移动文件指针到末尾</span></span><br><span class="line">file_size = ftell(r_file);			<span class="comment">//返回文件位置指针当前位置相对于文件首的偏移字节</span></span><br><span class="line">fseek(r_file, <span class="number">0L</span>, SEEK_SET);</span><br><span class="line">fread(p, <span class="keyword">sizeof</span>(<span class="type">uint8_t</span>), file_size, r_file);</span><br><span class="line">fclose(r_file);</span><br><span class="line">system(<span class="string">&quot;rm -rf ota.bin&quot;</span>);			<span class="comment">//删除</span></span><br></pre></td></tr></table></figure>






<hr>
]]></content>
      <categories>
        <category>项目开发</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
        <tag>编程</tag>
        <tag>总结</tag>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt配置文件详解</title>
    <url>/2022/07/Qt%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>Qt配置文件总是不知其然，每次工程建立，需要改配置文件，不论是qmake的.pro，还是cmake的CMakeLists.txt，都是靠一手浏览器解决，从未真正掌握过。因此这篇文章开始学习和掌握Qt配置文件的语法和书写，进行知识总结。</p>
<p><em><strong>以参考官方手册为佳</strong></em></p>
<h3 id="一、Qt工具moc，uic，rcc详解"><a href="#一、Qt工具moc，uic，rcc详解" class="headerlink" title="一、Qt工具moc，uic，rcc详解"></a>一、Qt工具moc，uic，rcc详解</h3><p>Qt可看作一个C++界面库，对C++语法进行了扩展，可以跨平台编译。</p>
<h4 id="MOC"><a href="#MOC" class="headerlink" title="MOC"></a>MOC</h4><p>Qt将源码交给标准C++编译器前，需要事先将这些扩展的语法解析，完成这一操作的就是moc。</p>
<p>moc全称Meta-Object Compiler，元对象编译器。MOC分析Qt的C++源文件时，如果发现在一个头文件中包含了宏Q_OBJECT，则会生成另一个C++源文件，该文件中包含了Q_OBJECT宏的实现代码，该文件的名称将会是原文件名前加上“moc_”构成。moc的执行在预处理器之前，因为预处理器执行后，Q_OBJECT宏就不存在了。新生成的源文件参与到标准编译器的编译中，编译过程中如果找不到对应的moc文件将出现链接错误。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">moc myclass.h -o moc_myclass.cpp</span><br></pre></td></tr></table></figure>

<h4 id="UIC"><a href="#UIC" class="headerlink" title="UIC"></a>UIC</h4><p>用designer设计的x.ui文件可通过uic工具转换为头文件，名称为ui_x.ui。ui文件的使用就是利用默认工具uic自动产生一个类，然后用该类的setui函数加载界面到相应的对象上。</p>
<p>.ui文件使用有三种形式：1.直接使用，2.定义一个新类，声明一个ui子对象，利用该对象来加载界面，3.将ui作为基类派生新的类。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uic app.ui -o ui_app.h</span><br></pre></td></tr></table></figure>



<h4 id="RCC"><a href="#RCC" class="headerlink" title="RCC"></a>RCC</h4><p>rcc用于将.qrc里面描述的图片、文档等编译成对应的源代码文件qrc_*.cpp或者独立的二进制资源文件*.rcc。</p>
<p><strong>生成独立的二进制资源文件.rcc</strong></p>
<p>对于太大的图片、音频、视频等文件，不适合集成到目标程序内部，可以放到操作系统文件目录，或单独编译成外挂资源.rcc。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rcc -binary myresource.qrc -o myresource.rcc</span><br></pre></td></tr></table></figure>

<p>代码中使用myresource.rcc，需要在main函数开始的位置注册这个独立的二进制资源文件：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">QResource::<span class="built_in">registerResource</span>(<span class="string">&quot;/path/to/myresource.rcc&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>使用文件时用虚拟文件路径，在qml中使用rcc的内容，前缀是<code>qrc:/</code>；在Qt C++中前缀是<code>:</code>。</p>
<p><strong>应用程序内嵌资源</strong></p>
<p>如果希望一个资源描述文件application.qrc在程序编译时内嵌到目标程序里，需要在*.pro文件里添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RESOURCES += application.qrc</span><br></pre></td></tr></table></figure>

<p>qmake会自动为application.qrc添加编译脚本。</p>
<p>rcc工具会解析 application.qrc内的 XML文本，找到需要添加的各种文件，默认情况下，rcc 工具会对这些文件做ZIP压缩，然后将压缩后的ZIP数据的每个字节转换成比如 0x6f数值形式，所有文件压缩后的数据对应一个C++静态数组 qt_resource_data[]，并添加注册、取消注册、初始化、清除等函数和资源描述结构体，最终形成一个 qrc_application.cpp文件。然后用编译器编译qrc_application.cpp文件，得到 qrc_applicaotion.o ，链接到目标程序内部，就可以用 “:&#x2F;images&#x2F;copy.png” 等形式访问程序内嵌资源了。<br>注意到刚才向 .pro 文件里添加 qrc 资源描述文件使用的运算符是+&#x3D;，也就是说可以为应用程序添加多个.qrc 文件，如果涉及的图片比较多，可以用多个*.qrc 对图片分类存放：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RESOURCES += buttons.qrc </span><br><span class="line">RESOURCES += backgrounds.qrc</span><br></pre></td></tr></table></figure>

<p>使用多个<code>*.qrc</code> 与使用一个<code>*.qrc</code> 的方式是一样的，虚拟文件路径都类似 “:&#x2F;buttons&#x2F;ok.png” 、”:&#x2F;backgrounds&#x2F;bgmain.png” 等，这里的 ok.png 放在项目文件夹的 buttons 子文件夹里，而 bgmain.png 是放在项目文件夹的 backgrounds 子文件夹里，因此两个文件的路径是不同的。<br>qmake 为内嵌资源添加的 rcc 编译命令，类似下面这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rcc -name application  application.qrc -o qrc_application.cpp</span><br></pre></td></tr></table></figure>


<p>得到 qrc_application.cpp 源文件之后，剩下的编译、链接就与普通 .cpp 文件一模一样了。<br>qrc_application.cpp 文件中不仅有各种图片、文档对应的静态数组，还有些结构体和函数，比如初始化和清除函数。<br>对于rcc命令，如果不加-name application选项参数，那么在 qrc_application.cpp 里面生成的初始化和清除函数名为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int QT_RCC_MANGLE_NAMESPACE(qInitResources)();</span><br><span class="line">int QT_RCC_MANGLE_NAMESPACE(qCleanupResources)();</span><br></pre></td></tr></table></figure>

<p>如果加了-name application选项参数，那么资源的初始化和清除函数名变为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int QT_RCC_MANGLE_NAMESPACE(qInitResources_application)();</span><br><span class="line">int QT_RCC_MANGLE_NAMESPACE(qCleanupResources_application)();</span><br></pre></td></tr></table></figure>

<p>QT_RCC_MANGLE_NAMESPACE() 这个宏其实没什么用，仅用于提示作用。资源的初始化函数和清除函数会在资源加载和卸载时自动被调用。<br>应用程序的内嵌资源通常不需要手动初始化，但也有例外情况，比如在使用某些链接库中的资源文件时，如果出现使用了正确的文件路径 “:&#x2F;images&#x2F;copy.png” 却找不到资源里图片文件的情况，那么需要在使用该资源的类声明里或者在 main 函数里打头的位置加入一句手动初始化：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Q_INIT_RESOURCE(resources);</span><br></pre></td></tr></table></figure>


<p>resources 是指 resources.qrc 的简短名字形式，不需要扩展名。</p>
<h3 id="二、qmake的-pro配置"><a href="#二、qmake的-pro配置" class="headerlink" title="二、qmake的.pro配置"></a>二、qmake的.pro配置</h3><p><em><strong>应当仔细阅读Qt <a href="http://qt5.digitser.net/5.15/zh-CN/qmake-manual.html">qmake手册</a></strong></em></p>
<p>qmake工具是与Qt一起提供的，为不同平台和编译器生成Makefile。</p>
<p>对于某些简单的项目，可以在其项目顶层目录下直接执行<code>qmake -project</code>命令来自动生成.pro文件，对复杂程序，需要手动改写.pro文件。</p>
<h4 id="常用Pro文件变量"><a href="#常用Pro文件变量" class="headerlink" title="常用Pro文件变量"></a>常用Pro文件变量</h4><p><strong>HEADERS</strong></p>
<p>指定项目的头文件。qmake会自动检测头文件的类中是否需要moc，并增加适当的依赖关系和文件到项目中，来生成和链接moc文件</p>
<p><strong>SOURCES</strong></p>
<p>指定项目的C++文件</p>
<p><strong>TEMPLATE</strong></p>
<p>模板变量告诉qmake为这个应用程序生成哪种makefile。</p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">qpp</td>
<td align="left">创建一个用于构建应用程序的Makefile（默认）。</td>
</tr>
<tr>
<td align="left">lib</td>
<td align="left">创建一个用于构建库的Makefile。</td>
</tr>
<tr>
<td align="left">subdirs</td>
<td align="left">创建一个用于构建目标子目录的Makefile，子目录使用SUBDIRS变量指定。</td>
</tr>
<tr>
<td align="left">aux</td>
<td align="left">创建一个不建任何东西的Makefile。如果没有编译器需要被调用来创建目标，比如你的项目使用解释型语言写的，使用此功能。注：此模板类型只能用于Makefile-based生成器。特别是，它不会工作在vcxproj和Xcode生成器。</td>
</tr>
<tr>
<td align="left">vcapp</td>
<td align="left">仅适用于Windows。创建一个Visual Studio应用程序项目。</td>
</tr>
<tr>
<td align="left">vclib</td>
<td align="left">仅适用于Windows。创建一个Visual Studio库项目。</td>
</tr>
<tr>
<td align="left">vcsubdirs</td>
<td align="left">Visual Studio解决方案，构建子目录项目</td>
</tr>
</tbody></table>
<p><strong>FORMS</strong></p>
<p>指定需要uic处理的由Qt designer 生成的.ui文件。所有的构建这些UI文件所需的依赖、头文件和源文件都会被自动添加到项目中</p>
<p><strong>RESOURCES</strong></p>
<p>指定需要rcc处理的.qrc文件</p>
<p><strong>DEFINES</strong></p>
<p>指定预定义的C++预处理器符号</p>
<p><strong>INCLUDEPATH</strong></p>
<p>指定C++编译器搜索全局头文件的路径。如果包含空格，需引号。</p>
<p><strong>LIBS</strong></p>
<p>指定工程要链接的库。<code>-l library -L library_path</code></p>
<p><strong>CONFIG</strong></p>
<p>指定各种用于工程配置和编译的参数。</p>
<p><strong>QT</strong></p>
<p>指定工程所要使用的Qt模板（默认是core，gui对应于QtCore和QtGui，以确保标准的GUI应用程序无需进一步的配置就可以构建）。如果想建立一个不包含Qt GUI模块的项目，可以使用<code>-=</code>操作符。</p>
<p><strong>TARGET</strong></p>
<p>指定可执行文件的基本文件名</p>
<p><strong>DESTDIR</strong></p>
<p>指定可执行文件放置的目录</p>
<p><strong>DEPENDPATH</strong></p>
<p>指定查看解决依赖关系的目录列表，当包含文件时使用</p>
<p><strong>MOC_DIR</strong></p>
<p>指定来自moc的所有中间文件（含Q_OBJECT宏的头文件转换成标准.h文件的存放目录）放置的目录</p>
<p><strong>OBJECTS_DIR</strong></p>
<p>指定所有中间文件.o放置的目录</p>
<p><strong>RCC_DIR</strong></p>
<p>指定Qt资源编译器输出文件的目录</p>
<p><strong>TRANSLATIONS</strong></p>
<p>指定包含用户界面翻译文本的翻译（.ts）文件列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TRANSLATIONS += Resource/myapp_zh.ts \</span><br><span class="line">				Resource/myapp_en.ts</span><br></pre></td></tr></table></figure>

<p><strong>UI_DIR</strong></p>
<p>指定来自uic的所有中间文件放置的目录</p>
<center>|————————————————————————————————————|</center>

<p><strong>CONFIG</strong>变量用于指定编译器选项和项目配置，参数如下：</p>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">qt</td>
<td align="center">指应用程序使用Qt。此选项是默认包括的。CONFIG如果包含qt，可以使用QT变量（QT变量默认包含gui和core模块）控制应用程序需要的任何附加Qt模块</td>
</tr>
<tr>
<td align="center">debug</td>
<td align="center">编译出具有调试信息的可执行程序</td>
</tr>
<tr>
<td align="center">release</td>
<td align="center">使用release模式构建，如果debug也被指定会被忽略</td>
</tr>
<tr>
<td align="center">dll</td>
<td align="center">动态编译库文件</td>
</tr>
<tr>
<td align="center">staticlib</td>
<td align="center">静态编译库文件</td>
</tr>
<tr>
<td align="center">console</td>
<td align="center">指应用程序需要写控制台（使用cout、cerro、qWarning()等）</td>
</tr>
<tr>
<td align="center">debug_and_release</td>
<td align="center">项目准备以debug和release两种模式构建。</td>
</tr>
<tr>
<td align="center">debug_and_release_target</td>
<td align="center">此选项默认设置。如果也指定了debug_and_release，最终的debug和release构建在不同的目录。</td>
</tr>
<tr>
<td align="center">build_all</td>
<td align="center">如果指定了debug_and_release，默认情况下，该项目会构建为debug和release模式。</td>
</tr>
<tr>
<td align="center">autogen_precompile_source</td>
<td align="center">自动生成一个.cpp文件，包含在.pro中指定的预编译头文件。</td>
</tr>
<tr>
<td align="center">ordered</td>
<td align="center">使用subdirs模板时，此选项指定应该按照目录列表的顺序处理它们。</td>
</tr>
<tr>
<td align="center">precompile_header</td>
<td align="center">可以在项目中使用预编译头文件的支持。</td>
</tr>
<tr>
<td align="center">warn_on</td>
<td align="center">编译器应该输出尽可能多的警告。如果也指定了warn_off，最后一个生效。</td>
</tr>
<tr>
<td align="center">warn_off</td>
<td align="center">编译器应该输出尽可能少的警告。</td>
</tr>
<tr>
<td align="center">exceptions</td>
<td align="center">启用异常支持。默认设置。</td>
</tr>
<tr>
<td align="center">exceptions_off</td>
<td align="center">禁用异常支持。</td>
</tr>
<tr>
<td align="center">rtti</td>
<td align="center">启用RTTI支持。默认情况下，使用编译器默认。</td>
</tr>
<tr>
<td align="center">rtti_off</td>
<td align="center">禁用RTTI支持。默认情况下，使用编译器默认。</td>
</tr>
<tr>
<td align="center">stl</td>
<td align="center">启用STL支持。默认情况下，使用编译器默认。</td>
</tr>
<tr>
<td align="center">stl_off</td>
<td align="center">禁用STL支持。默认情况下，使用编译器默认。</td>
</tr>
<tr>
<td align="center">thread</td>
<td align="center">启用线程支持。当CONFIG包括qt时启用，这是缺省设置。</td>
</tr>
<tr>
<td align="center">c++11</td>
<td align="center">启用c++11支持。如果编译器不支持c++11这个选项，没有影响。默认情况下，支持是禁用的。</td>
</tr>
<tr>
<td align="center">c++14</td>
<td align="center">启用c++14支持。如果编译器不支持c++14这个选项，没有影响。默认情况下，支持是禁用的。</td>
</tr>
</tbody></table>
<h4 id="内置函数和控制流"><a href="#内置函数和控制流" class="headerlink" title="内置函数和控制流"></a>内置函数和控制流</h4><p>include()可引用外部项目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include(other.pro)</span><br></pre></td></tr></table></figure>

<p>通过作用域实现条件语句，类似编程语言中的if语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">win32 &#123;</span><br><span class="line">	SOURCES += paintwidget_win.cpp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其它包括find()，unique()，count()等</p>
<p>同时CONFIG()可以用来测试配置选项是否被包含</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONFIG(opengl)&#123;</span><br><span class="line">	message(Building with OpenGL support.)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">	message(OpenGL support is not avilable.)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="变量扩展"><a href="#变量扩展" class="headerlink" title="变量扩展"></a>变量扩展</h4><p><code>$$</code>操作符用来提取变量的值，可被用来将值在变量与函数间传递</p>
<h4 id="访问qmake特性"><a href="#访问qmake特性" class="headerlink" title="访问qmake特性"></a>访问qmake特性</h4><p>特殊<code>$$[...]</code>操作符可用来访问qmake特性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">message(Qt version: $$[QT_VERSION])</span><br><span class="line">message(Qt is installed in $$[QT_INSTALL_PREFIX])</span><br><span class="line">message(Qt resources can be found in the following locations:)</span><br><span class="line">message(Documentation: $$[QT_INSTALL_DOCS])</span><br><span class="line">message(Header files: $$[QT_INSTALL_HEADERS])</span><br><span class="line">message(Libraries: $$[QT_INSTALL_LIBS])</span><br><span class="line">message(Binary files (executables): $$[QT_INSTALL_BINS])</span><br><span class="line">message(Plugins: $$[QT_INSTALL_PLUGINS])</span><br><span class="line">message(Data files: $$[QT_INSTALL_DATA])</span><br><span class="line">message(Translation files: $$[QT_INSTALL_TRANSLATIONS])</span><br><span class="line">message(Settings: $$[QT_INSTALL_CONFIGURATION])</span><br><span class="line">message(Examples: $$[QT_INSTALL_EXAMPLES])</span><br></pre></td></tr></table></figure>





<h3 id="三、cmake的CMakeLists-txt"><a href="#三、cmake的CMakeLists-txt" class="headerlink" title="三、cmake的CMakeLists.txt"></a>三、cmake的CMakeLists.txt</h3><p><em><strong>应参考</strong></em></p>
<p><em><strong><a href="https://runebook.dev/zh-CN/docs/cmake/manual/cmake-qt.7">cmake-qt手册（中文）</a></strong></em></p>
<p><em><strong><a href="https://cmake.org/cmake/help/v3.21/manual/cmake-qt.7.html">cmake-qt手册（英文）</a></strong></em></p>
<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>CMake可以找到并使用Qt 4 和Qt 5。Qt 4库是由CMake附带的 FindQt4 查找模块找到的，而Qt 5库是使用Qt 5附带的“配置文件包”找到的。</p>
<p>Qt 4和Qt 5可以在同一 CMake buildsystem 一起使用：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.8</span>.<span class="number">0</span> FATAL_ERROR)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(Qt4And5)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_AUTOMOC <span class="keyword">ON</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(Qt5 COMPONENTS Widgets DBus REQUIRED)</span><br><span class="line"><span class="keyword">add_executable</span>(publisher publisher.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(publisher Qt5::Widgets Qt5::DBus)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(Qt4 REQUIRED)</span><br><span class="line"><span class="keyword">add_executable</span>(subscriber subscriber.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(subscriber Qt4::QtGui Qt4::QtDBus)</span><br></pre></td></tr></table></figure>

<p>一个 CMake 目标不能同时链接到 Qt 4 和 Qt 5。如果试图这样做或者是目标依赖性评估的结果,就会发出一个诊断。</p>
<h4 id="Qt构建工具"><a href="#Qt构建工具" class="headerlink" title="Qt构建工具"></a>Qt构建工具</h4><p>Qt依赖于一些捆绑的代码生成工具，例如moc用于元对象代码生成，uic用于小部件布局和填充，以及rcc用于虚拟文件系统内容生成。如果满足适当的条件，这些工具可以有cmake自动调用。自动工具调用可以与Qt 4和Qt 5一起使用。</p>
<h4 id="AUTOMOC"><a href="#AUTOMOC" class="headerlink" title="AUTOMOC"></a>AUTOMOC</h4><p>AUTOMOC属性控制cmake是否检查目标中的C++文件，以确定它们是否需要运行moc，并在适当的时间创建规则执行moc。</p>
<p>如果在头文件中找到来自AUTOMOC_MACRO_NAMES的宏，则将在该文件上运行moc。结果将放入如moc_&lt;basename&gt;.cpp命名的文件中。如果在C++实现文件中找到该宏，则将按照Qt约定将moc输出到如&lt;basename&gt;.moc命名的文件中。用户必须使用预处理器#include将&lt;basename&gt;.moc包含在C++实现文件中。</p>
<p>包含的<code>moc_*.cpp</code>和<code>*.moc</code>文件将在<code>&lt;AUTOGEN_BUILD_DIR&gt;/include</code>目录中生成，该目录会自动添加到目标的INCLUDE_DIRECTORIES中。</p>
<ul>
<li>这与CMake 3.7及以下版本不同，详情请看他们的文档</li>
<li>对于multi configuration generators，include目录为<code>&lt;AUTOGEN_BUILD_DIR&gt;/include_&lt;CONFIG&gt;</code></li>
<li>参见AUTOGEN_BUILD_DIR</li>
</ul>
<p>不包括在内的<code>moc_&lt;basename&gt;.cpp</code>文件将在自定义文件夹中生成，以避免名称冲突，并包含在一个单独的文件中，该文件已编译到目标中，名为<code>&lt;AUTOGEN_BUILD_DIR&gt;/mocs_compilation.cpp</code>或<code>&lt;AUTOGEN_BUILD_DIR&gt;/mocs_compilation_$&lt;CONFIG&gt;.cpp</code></p>
<p>moc命令行将消耗从被调用的目标中处理COMPILE_DEFINITIONS和INCLUDE_DIRECTORIES目标属性为适当的构建配置。</p>
<p>通过设置CMAKE_AUTOMOC变量，AUTOMOC目标属性可为之后所有目标预置。AUTOMOC_MOC_OPTIONS可以填充设置选项传递给moc。可以填充CMAKE_AUTOMOC_MOC_OPTIONS变量，以为之后所有目标预置选项。</p>
<p>可将其它要搜索的宏名称添加到AUTOMOC_MACRO_NAMES中。</p>
<p>可使用AUTOMOC_DEPEND_FILTERS从源代码中提取其它moc依赖项文件名。</p>
<p>通过启用SKIP_AUTOMOC或更广泛的SKIP_AUTOGEN，可将C++源文件从AUTOMOC处理中排除。</p>
<h4 id="AUTOUIC"><a href="#AUTOUIC" class="headerlink" title="AUTOUIC"></a>AUTOUIC</h4><p>AUTOUIC目标属性控制cmake是否检查目标中的C++文件，以确定它们是否需要运行uic，并在合适时机创建规则运行uic。</p>
<p>如果找到与 <code>&lt;path&gt;ui_&lt;basename&gt;.h</code> 匹配的预处理器 <code>#include</code> 指令，并且存在 <code>&lt;basename&gt;.ui</code> 文件，则将执行 <code>uic</code> 生成适当的文件。该 <code>&lt;basename&gt;.ui</code> 文件中搜索在以下地方</p>
<ol>
<li><code>&lt;source_dir&gt;/&lt;basename&gt;.ui</code></li>
<li><code>&lt;source_dir&gt;/&lt;path&gt;&lt;basename&gt;.ui</code></li>
<li><code>&lt;AUTOUIC_SEARCH_PATHS&gt;/&lt;basename&gt;.ui</code></li>
<li><code>&lt;AUTOUIC_SEARCH_PATHS&gt;/&lt;path&gt;&lt;basename&gt;.ui</code></li>
</ol>
<p>其中， <source_dir> 是C ++文件的目录，而 AUTOUIC_SEARCH_PATHS 是其他搜索路径的列表。</p>
<p>生成的 <code>ui_*.h</code>文件放置在<AUTOGEN_BUILD_DIR>&#x2F;include目录中，该目录会自动添加到目标的 INCLUDE_DIRECTORIES 中。</p>
<p>该 AUTOUIC 目标属性可以通过设置对所有以下目标预先设定 CMAKE_AUTOUIC 变量。该 AUTOUIC_OPTIONS 目标属性可被填充设置选项传递给 uic 。该 CMAKE_AUTOUIC_OPTIONS 变量可被填充到预先设定的所有以下目标的选项。所述 AUTOUIC_OPTIONS 源文件属性可以在被设置 <code>&lt;basename&gt;.ui</code> 文件为文件组特定选项。这将覆盖来自 AUTOUIC_OPTIONS 目标属性的选项。</p>
<p>目标可以使用调用 uic 时应使用的选项来填充 INTERFACE_AUTOUIC_OPTIONS 目标属性。这必须与 AUTOUIC_OPTIONS 目标的AUTOUIC_OPTIONS目标属性内容一致。所述 CMAKE_DEBUG_TARGET_PROPERTIES 变量可被用于跟踪这样的原点目标 INTERFACE_AUTOUIC_OPTIONS 。这意味着为Qt提供替代翻译系统的库可以指定在运行 uic 时应使用的选项：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_library</span>(KI18n klocalizedstring.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(KI18n Qt5::Core)</span><br><span class="line"></span><br><span class="line"><span class="comment"># KI18n uses the tr2i18n() function instead of tr().  That function is</span></span><br><span class="line"><span class="comment"># declared in the klocalizedstring.h header.</span></span><br><span class="line"><span class="keyword">set</span>(autouic_options</span><br><span class="line">  -tr tr2i18n</span><br><span class="line">  -<span class="keyword">include</span> klocalizedstring.h</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set_property</span>(<span class="keyword">TARGET</span> KI18n APPEND PROPERTY</span><br><span class="line">  INTERFACE_AUTOUIC_OPTIONS <span class="variable">$&#123;autouic_options&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>链接到从上游导出的目标的消耗项目当uic由于AUTOUIC而运行时自动使用适当的选项，作为与导入目标链接的结果：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(CMAKE_AUTOUIC <span class="keyword">ON</span>)</span><br><span class="line"><span class="comment"># Uses a libwidget.ui file:</span></span><br><span class="line"><span class="keyword">add_library</span>(LibWidget libwidget.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(LibWidget</span><br><span class="line">  KF5::KI18n</span><br><span class="line">  Qt5::Widgets</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>通过启用 SKIP_AUTOUIC 或更广泛的 SKIP_AUTOGEN ,可以将源文件从 AUTOUIC 处理中排除。</p>
<h4 id="AUTORCC"><a href="#AUTORCC" class="headerlink" title="AUTORCC"></a>AUTORCC</h4><p>AUTORCC目标属性控制cmake是否创建规则来执行 <code>rcc</code> 在适当的时间在其上具有后缀源文件 <code>.qrc</code> 。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add_executable(myexe main.cpp resource_file.qrc)</span><br></pre></td></tr></table></figure>

<p>该 AUTORCC 目标属性可以通过设置对所有以下目标预先设定 CMAKE_AUTORCC 变量。该 AUTORCC_OPTIONS 目标属性可被填充设置选项传递给 rcc 。该 CMAKE_AUTORCC_OPTIONS 变量可被填充到预先设定的所有以下目标的选项。所述 AUTORCC_OPTIONS 源文件属性可以在被设置<code> &lt;name&gt;.qrc</code> 文件设置为文件特定的选项。这将覆盖来自 AUTORCC_OPTIONS 目标属性的选项。</p>
<p>通过启用 SKIP_AUTORCC 或更广泛的 SKIP_AUTOGEN ,可以将源文件从 AUTORCC 处理中排除。</p>
<h4 id="lt-ORIGIN-gt-autogen目标"><a href="#lt-ORIGIN-gt-autogen目标" class="headerlink" title="&lt;ORIGIN&gt;_autogen目标"></a><code>&lt;ORIGIN&gt;_autogen</code>目标</h4><p>moc 和 uic 工具作为由CMake生成的综合的<code>&lt;ORIGIN&gt;_autogen</code> custom target 一部分被执行。默认情况下该 <code>&lt;ORIGIN&gt;_autogen</code> 目标继承 <code>&lt;ORIGIN&gt;</code> 目标的依赖（见 AUTOGEN_ORIGIN_DEPENDS ）。可以通过将目标依赖项添加到  AUTOGEN_TARGET_DEPENDS 目标属性中的方式将它们添加到<code>&lt;ORIGIN&gt;_autogen </code>目标中。</p>
]]></content>
      <categories>
        <category>学习总结</category>
      </categories>
      <tags>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>常用英语词汇</title>
    <url>/2021/11/%E5%B8%B8%E7%94%A8%E8%8B%B1%E8%AF%AD%E8%AF%8D%E6%B1%87/</url>
    <content><![CDATA[<h2 align='center' id='常用英语词汇'>常用英语词汇</h2>

<table>
<thead>
<tr>
<th align="center"><a href="#%E8%93%9D%E7%89%99">蓝牙</a></th>
<th align="center"><a href="#%E8%8A%AF%E7%89%87">芯片</a></th>
<th align="center"><a href="#%E7%BD%91%E7%BB%9C">网络</a></th>
<th align="center"><a href="#SQL">SQL</a></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong><a href="#%E5%B5%8C%E5%85%A5%E5%BC%8F">嵌入式</a></strong></td>
<td align="center"><strong><a href="#Qt">Qt</a></strong></td>
<td align="center"><strong><a href="#%E5%85%B6%E5%AE%83">其它</a></strong></td>
<td align="center"><strong><a href="#Linux">Linux</a></strong></td>
</tr>
<tr>
<td align="center"><strong><a href="#%E5%8F%98%E9%87%8F%E5%AE%9A%E4%B9%89">变量定义</a></strong></td>
<td align="center"><strong><a href="#%E6%B1%87%E7%BC%96">汇编</a></strong></td>
<td align="center"><strong><a href="#%E5%BA%95%E9%83%A8">底部</a></strong></td>
<td align="center"></td>
</tr>
</tbody></table>
<h2 align='center' id='蓝牙'>蓝牙</h2>



<table>
<thead>
<tr>
<th>缩写</th>
<th>全称</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>GAP</td>
<td>generic access profile</td>
<td>通用访问配置文件</td>
</tr>
<tr>
<td>SM</td>
<td>security management protocol</td>
<td>全管理协议</td>
</tr>
<tr>
<td>GATT</td>
<td>generic attribute profile</td>
<td>通用属性配置文件</td>
</tr>
<tr>
<td>ATT</td>
<td>attribbute protocol</td>
<td>属性协议</td>
</tr>
<tr>
<td>L2CAP</td>
<td>logical link contorl and adaptation protocol</td>
<td>逻辑链路和适配协议</td>
</tr>
<tr>
<td>LL</td>
<td>link layer</td>
<td>链路层</td>
</tr>
<tr>
<td>PPCP</td>
<td>The Peripheral Preferred Connection Parameters</td>
<td>外围设备首选连接参数</td>
</tr>
<tr>
<td>CAR</td>
<td>Central Address Resolution</td>
<td>中心设备地址解析</td>
</tr>
<tr>
<td>RPA</td>
<td>Resolvable Private Address</td>
<td>可解析私有地址</td>
</tr>
<tr>
<td>UUID</td>
<td>Universally Unique Identifier</td>
<td>通用唯一识别码，128位</td>
</tr>
<tr>
<td>PPI</td>
<td>Programmable Peripheral Interconnect</td>
<td>可编程外设互联</td>
</tr>
<tr>
<td>ADC</td>
<td>Analog-to-digital converter</td>
<td>模数转换器</td>
</tr>
<tr>
<td>SAADC</td>
<td>Successive approximation analog-to-digital converter</td>
<td>逐次逼近型ADC</td>
</tr>
<tr>
<td>GAIN</td>
<td></td>
<td>增益</td>
</tr>
<tr>
<td>REFFERENCE</td>
<td></td>
<td>参考电压</td>
</tr>
<tr>
<td>HAL</td>
<td>Hardware Access Layer; Hardware Abstraction Layer</td>
<td>硬件访问层; 硬件抽象层</td>
</tr>
<tr>
<td>NVMC</td>
<td>Non-volatile memory controller</td>
<td>非易失性存储器控制器</td>
</tr>
<tr>
<td>AP</td>
<td>access point</td>
<td>接入点</td>
</tr>
<tr>
<td>SDP</td>
<td>service discovery protocol</td>
<td>服务发现协议</td>
</tr>
<tr>
<td>LM</td>
<td>link manager</td>
<td>链路管理器</td>
</tr>
<tr>
<td>LMP</td>
<td>link manager protocol</td>
<td>链路管理协议</td>
</tr>
</tbody></table>
<hr>
<h2 align='center' id='芯片'>芯片</h2>



<table>
<thead>
<tr>
<th>缩写</th>
<th>全称</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>OSC</td>
<td>oscillator   [ˈɑsɪˌleɪtər]</td>
<td>振荡器， crystal oscillator 晶体振荡器</td>
</tr>
<tr>
<td>HSI</td>
<td>high speed internal</td>
<td>高速内部时钟</td>
</tr>
<tr>
<td>HSE</td>
<td>high speed external</td>
<td>高速外部时钟</td>
</tr>
<tr>
<td>LSI</td>
<td>low speed internal</td>
<td>低速内部时钟</td>
</tr>
<tr>
<td>LSE</td>
<td>low speed external</td>
<td>低速外部时钟</td>
</tr>
<tr>
<td>PLL</td>
<td>phase-locked loop</td>
<td>锁相环路（倍频）</td>
</tr>
<tr>
<td>COMP</td>
<td>compensation</td>
<td>补偿引脚</td>
</tr>
<tr>
<td>Cortex</td>
<td>Cortex</td>
<td>大脑皮层。<a href="https://baike.baidu.com/item/ARM/5907">ARM</a>公司在经典<a href="https://baike.baidu.com/item/%E5%A4%84%E7%90%86%E5%99%A8/914419">处理器</a><a href="https://baike.baidu.com/item/ARM11">ARM11</a>以后的产品改用Cortex命名，并分成A、R和M三类</td>
</tr>
<tr>
<td>CMSIS</td>
<td>Cortex Microcontroller Software Interface Standard</td>
<td>ARM Cortex™ 微控制器软件接口标准</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<hr>
<h2 align='center' id='网络'>网络</h2>



<table>
<thead>
<tr>
<th>缩写</th>
<th>全称</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>TLB</td>
<td>Translation Look-aside Buffer</td>
<td>翻译后援缓冲器</td>
</tr>
<tr>
<td>TCP</td>
<td>Transmission Control Protocol</td>
<td>传输控制协议</td>
</tr>
<tr>
<td>SYN</td>
<td>sync</td>
<td>同步</td>
</tr>
<tr>
<td>ACK</td>
<td>Acknowledge</td>
<td>应答</td>
</tr>
<tr>
<td>SEQ</td>
<td>sequence</td>
<td>序列号</td>
</tr>
<tr>
<td>APN</td>
<td>Access Point Name</td>
<td>接入点名称</td>
</tr>
<tr>
<td>DOM</td>
<td>Document Object Model</td>
<td>文件对象模型</td>
</tr>
<tr>
<td>AP</td>
<td>access point</td>
<td>接入点</td>
</tr>
<tr>
<td>SSL</td>
<td>Secure Socket Layer</td>
<td>安全套接层</td>
</tr>
</tbody></table>
<hr>
<h2 align='center' id='SQL'>SQL</h2>

<table>
<thead>
<tr>
<th>缩写</th>
<th>全称</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>QPS</td>
<td>Queries Per Second</td>
<td>每秒处理的查询数（如果是数据库，就相当于读取）</td>
</tr>
<tr>
<td>TPS</td>
<td>Transactions Per Second</td>
<td>每秒处理的事务数（如果是数据库，就相当于写入、修改）</td>
</tr>
<tr>
<td>IOPS</td>
<td></td>
<td>每秒磁盘进行的I&#x2F;O操作次数</td>
</tr>
<tr>
<td>transaction</td>
<td></td>
<td>事务（指一组SQL语句）</td>
</tr>
<tr>
<td>truncate</td>
<td></td>
<td>截断</td>
</tr>
<tr>
<td>grant</td>
<td></td>
<td>授权</td>
</tr>
<tr>
<td>revoke</td>
<td></td>
<td>撤回，废弃</td>
</tr>
<tr>
<td>privilege</td>
<td>[ˈprɪvəlɪdʒ]</td>
<td>特权，权限。<strong>grant all privileges on *.* to ‘root’ ;</strong></td>
</tr>
</tbody></table>
<hr>
<h2 align='center' id='5'>嵌入式</h2>

<table>
<thead>
<tr>
<th>缩写</th>
<th>全称</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>MMU</td>
<td>memory management unit</td>
<td>内存管理单元</td>
</tr>
<tr>
<td>TWI</td>
<td>Two-wire Serial Interface</td>
<td>是对I2C总线接口的继承和发展，完全兼容I2C总线</td>
</tr>
<tr>
<td>NVIC</td>
<td>nested vectored interrupt controller</td>
<td>嵌套向量中断控制器</td>
</tr>
</tbody></table>
<h2 align='center' id='Qt'>Qt</h2>

<table>
<thead>
<tr>
<th>单词</th>
<th>词性，音标</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>aliasing</td>
<td></td>
<td>锯齿，antialiasing（抗锯齿）</td>
</tr>
<tr>
<td>opaque</td>
<td>n,adj       [oʊˈpeɪk]</td>
<td>不透明，模糊</td>
</tr>
<tr>
<td>slider</td>
<td></td>
<td>滑块</td>
</tr>
<tr>
<td>palette</td>
<td></td>
<td>调色板</td>
</tr>
<tr>
<td>gradient</td>
<td></td>
<td>渐变，倾斜度</td>
</tr>
<tr>
<td>pseudo</td>
<td>[‘sjuːdəʊ]</td>
<td>伪；假的，冒充的</td>
</tr>
<tr>
<td>anchor</td>
<td>n,v</td>
<td>锚点；下锚</td>
</tr>
<tr>
<td>blur</td>
<td>[blɜː(r)]</td>
<td>虚化，模糊</td>
</tr>
<tr>
<td>stroke</td>
<td>n,v</td>
<td>描边；轻抚</td>
</tr>
<tr>
<td>padding</td>
<td></td>
<td>填充，内边距</td>
</tr>
<tr>
<td>margin</td>
<td></td>
<td>边缘，外边距</td>
</tr>
<tr>
<td>canvas</td>
<td></td>
<td>画布</td>
</tr>
<tr>
<td>animation</td>
<td></td>
<td>动画制作</td>
</tr>
<tr>
<td>gap</td>
<td></td>
<td>间隔</td>
</tr>
<tr>
<td>gradient</td>
<td>[ˈɡreɪdiənt]</td>
<td>渐变</td>
</tr>
<tr>
<td>dense</td>
<td></td>
<td>密集的</td>
</tr>
<tr>
<td>solid</td>
<td></td>
<td>固体的，实体的</td>
</tr>
<tr>
<td>spin</td>
<td></td>
<td>自转，旋转（spinbox旋钮控件）</td>
</tr>
<tr>
<td>dimension</td>
<td>[daɪˈmenʃ(ə)n]</td>
<td>尺寸、维度</td>
</tr>
<tr>
<td>axes</td>
<td>[ˈækˌsiz]</td>
<td>坐标轴</td>
</tr>
</tbody></table>
<h2 align='center' id='其它'>其它</h2>

<table>
<thead>
<tr>
<th>单词</th>
<th>词性or全称</th>
<th>释义</th>
</tr>
</thead>
<tbody><tr>
<td>hook</td>
<td></td>
<td>钩子</td>
</tr>
<tr>
<td>in case</td>
<td></td>
<td>以防万一</td>
</tr>
<tr>
<td>retention</td>
<td></td>
<td>保持，retention registers</td>
</tr>
<tr>
<td>threshold</td>
<td></td>
<td>阈值</td>
</tr>
<tr>
<td>parameter</td>
<td></td>
<td>形参</td>
</tr>
<tr>
<td>argument</td>
<td></td>
<td>实参</td>
</tr>
<tr>
<td>interpret</td>
<td></td>
<td>诠释，说明，解释</td>
</tr>
<tr>
<td>hint</td>
<td></td>
<td>线索，提示</td>
</tr>
<tr>
<td>delegate</td>
<td></td>
<td>代理，委派</td>
</tr>
<tr>
<td>calibrate</td>
<td></td>
<td>校正</td>
</tr>
<tr>
<td>form</td>
<td></td>
<td>窗体，表格，形式</td>
</tr>
<tr>
<td>spacer</td>
<td></td>
<td>隔板，间隔物</td>
</tr>
<tr>
<td>facility</td>
<td></td>
<td>设施，机构</td>
</tr>
<tr>
<td>content</td>
<td></td>
<td>目录，内容</td>
</tr>
<tr>
<td>moderator</td>
<td></td>
<td>版主</td>
</tr>
<tr>
<td>alias</td>
<td></td>
<td>别名</td>
</tr>
<tr>
<td>implicit</td>
<td></td>
<td>隐式（转换）</td>
</tr>
<tr>
<td>explicit</td>
<td></td>
<td>显式</td>
</tr>
<tr>
<td>util</td>
<td></td>
<td>工具类</td>
</tr>
<tr>
<td>archive</td>
<td></td>
<td>档案</td>
</tr>
<tr>
<td>JAR</td>
<td>Java Archive File</td>
<td>Java归档</td>
</tr>
<tr>
<td>manifest</td>
<td></td>
<td>清单；显示</td>
</tr>
<tr>
<td>constrain</td>
<td></td>
<td>限制，约束（resource-constrained，资源有限的）</td>
</tr>
<tr>
<td>bare-minimum</td>
<td></td>
<td>绝对最小值；最低条件</td>
</tr>
<tr>
<td>authentication</td>
<td></td>
<td>验证；鉴定；认证</td>
</tr>
<tr>
<td>authorization</td>
<td></td>
<td>授权；批准；权限；核准</td>
</tr>
<tr>
<td>backend</td>
<td></td>
<td>后台</td>
</tr>
<tr>
<td>integration</td>
<td></td>
<td>集成；整合；综合；一体化</td>
</tr>
<tr>
<td>NAT</td>
<td>Network Address Translation</td>
<td>网络地址翻译</td>
</tr>
<tr>
<td>deter</td>
<td></td>
<td>制止；防止</td>
</tr>
<tr>
<td>malicious</td>
<td></td>
<td>怀有恶意的</td>
</tr>
<tr>
<td>LWT</td>
<td>Last Will and Testament</td>
<td>临终遗嘱</td>
</tr>
<tr>
<td>endure</td>
<td></td>
<td>容忍</td>
</tr>
<tr>
<td>consume</td>
<td></td>
<td>消耗；消费</td>
</tr>
<tr>
<td>MQTT</td>
<td>Message Queuing Telemetry Transport</td>
<td>消息队列遥测传输协议</td>
</tr>
<tr>
<td>retain</td>
<td></td>
<td>保留</td>
</tr>
<tr>
<td>hierarchy</td>
<td></td>
<td>层次，阶层</td>
</tr>
<tr>
<td>appropriate</td>
<td></td>
<td>适当的</td>
</tr>
<tr>
<td>synopsis</td>
<td></td>
<td>总览；概要</td>
</tr>
<tr>
<td>loopback</td>
<td></td>
<td>回环</td>
</tr>
<tr>
<td>verbose</td>
<td></td>
<td>详细</td>
</tr>
<tr>
<td>approximately</td>
<td></td>
<td>近似地；大约</td>
</tr>
<tr>
<td>alphabetical</td>
<td></td>
<td>按字母表顺序的</td>
</tr>
<tr>
<td>crypto</td>
<td></td>
<td>加密</td>
</tr>
<tr>
<td>assignment</td>
<td></td>
<td>分配</td>
</tr>
<tr>
<td>peak</td>
<td></td>
<td>峰值</td>
</tr>
<tr>
<td>manipulate</td>
<td></td>
<td>操作、操纵</td>
</tr>
<tr>
<td>versus</td>
<td></td>
<td>比对（VS）</td>
</tr>
<tr>
<td>justify</td>
<td></td>
<td>证明；两端对齐（CSS）</td>
</tr>
<tr>
<td>infrastructure</td>
<td></td>
<td>基础设施</td>
</tr>
<tr>
<td>suppress</td>
<td>[səˈpres]</td>
<td>抑制，压制，阻止，禁止</td>
</tr>
<tr>
<td>trade-off</td>
<td></td>
<td>均衡，权衡</td>
</tr>
<tr>
<td>optimal</td>
<td></td>
<td>最佳的</td>
</tr>
<tr>
<td>amplifier</td>
<td></td>
<td>功放</td>
</tr>
<tr>
<td>panel</td>
<td></td>
<td>面板</td>
</tr>
<tr>
<td>enumerate</td>
<td>[ɪˈnjuːməreɪt]</td>
<td>列举、枚举</td>
</tr>
</tbody></table>
<h2 align='center' id='Linux'>Linux</h2>

<table>
<thead>
<tr>
<th>缩写</th>
<th>全称&#x2F;词性</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>GNOME</td>
<td>GNU Network Object Environment</td>
<td>网络对象模型环境</td>
</tr>
<tr>
<td>KDE</td>
<td>Kool Desktop Environment</td>
<td>K 桌面环境</td>
</tr>
<tr>
<td>grep</td>
<td></td>
<td>查找字符串；正则表达式</td>
</tr>
<tr>
<td>duplicate</td>
<td>n,v</td>
<td>副本；复制<strong>dup()</strong></td>
</tr>
<tr>
<td>seek</td>
<td></td>
<td>寻求，探索<strong>fseek(),lseek()</strong></td>
</tr>
<tr>
<td>dirent</td>
<td></td>
<td>目录项</td>
</tr>
<tr>
<td>mandatory</td>
<td></td>
<td>强制的；法定的；义务的</td>
</tr>
<tr>
<td>dereference</td>
<td></td>
<td>解引用</td>
</tr>
<tr>
<td>retrieve</td>
<td></td>
<td>检索；找回；取回；收回</td>
</tr>
<tr>
<td>identical</td>
<td></td>
<td>完全相同的；相等的；恒等</td>
</tr>
<tr>
<td>proc</td>
<td></td>
<td>定义过程；存储过程；文件系统</td>
</tr>
<tr>
<td>procfs</td>
<td></td>
<td>进程文件系统</td>
</tr>
<tr>
<td>probe</td>
<td></td>
<td>探针，探测</td>
</tr>
</tbody></table>
<h2 align='center' id='变量定义'>变量定义</h2>

<table>
<thead>
<tr>
<th>变量</th>
<th>全程</th>
</tr>
</thead>
<tbody><tr>
<td>argc</td>
<td>argument count</td>
</tr>
<tr>
<td>argv</td>
<td>argument vector</td>
</tr>
<tr>
<td>atoi</td>
<td>ascii to int</td>
</tr>
<tr>
<td>htonl</td>
<td>host to network long</td>
</tr>
<tr>
<td>htons</td>
<td>host ot network short</td>
</tr>
<tr>
<td>ntohl</td>
<td>network to host long</td>
</tr>
<tr>
<td>ntohs</td>
<td>network to host short</td>
</tr>
</tbody></table>
<h2 align='center' id='汇编'>汇编</h2>

<table>
<thead>
<tr>
<th>命令</th>
<th>释义</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td>LDR</td>
<td>从存储器中加载字到一个寄存器中</td>
<td></td>
</tr>
<tr>
<td>BL</td>
<td>跳转到寄存器&#x2F;标号给出的地址，并把跳转前的下条指令地址保存到LR</td>
<td></td>
</tr>
<tr>
<td>BLX</td>
<td>跳转到寄存器给出的地址，根据LSE确定确定处理器的状态，下一指令存到LR</td>
<td></td>
</tr>
<tr>
<td>BX</td>
<td>跳转到寄存器&#x2F;标号给出的地址，不用返回</td>
<td></td>
</tr>
<tr>
<td>STR</td>
<td>把值存储到寄存器所指的地址中</td>
<td></td>
</tr>
<tr>
<td>STRB</td>
<td></td>
<td></td>
</tr>
<tr>
<td>AREA</td>
<td>指示汇编器汇编一个新的代码段或数据段。段是独立的、指定的、不可见的代码或数据块，它们由连接器处理。</td>
<td>AREA STACK, NOINIT, READWRITE, ALIGN&#x3D;3</td>
</tr>
<tr>
<td>SPACE</td>
<td>保留一个用零填充的存储器块</td>
<td></td>
</tr>
<tr>
<td>ORR</td>
<td>按位或操作</td>
<td></td>
</tr>
<tr>
<td>BIC</td>
<td>把立即数取反，再按位与</td>
<td></td>
</tr>
</tbody></table>
<p><a href="#常用英语词汇" id='底部' >回到顶部</a></p>
]]></content>
      <categories>
        <category>杂文集合</category>
      </categories>
      <tags>
        <tag>杂文</tag>
      </tags>
  </entry>
</search>
